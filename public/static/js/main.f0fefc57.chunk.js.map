{"version":3,"sources":["services/sessionStorageService.js","services/httpService.js","services/userService.js","store/actions/userAction.js","services/eventBusService.js","cmps/AppHeader.jsx","pages/HomePage.jsx","services/storageService.js","services/utilService.js","services/boardService.js","cmps/PopoverHeader.jsx","cmps/BoardActions.jsx","cmps/LoadingSpinner.jsx","cmps/BoardPreview.jsx","cmps/BoardList.jsx","services/styleService.js","cmps/BoardMemberImg.jsx","cmps/BoardMembersComposer.jsx","cmps/BoardComposer.jsx","pages/Boards.jsx","store/actions/boardActions.js","cmps/LabelsPopover.jsx","cmps/ChangeMembersPopover.jsx","cmps/CopyTaskPopover.jsx","cmps/QuickEditButton.jsx","cmps/MUIDateTime.jsx","cmps/DateTimePopover.jsx","cmps/MoveTaskPopover.jsx","cmps/TaskEdit.jsx","cmps/TaskPreview.jsx","store/actions/popoverActions.js","cmps/ListActions.jsx","cmps/ListTitle.jsx","cmps/TaskComposer.jsx","cmps/TaskList.jsx","cmps/Board.jsx","cmps/BoardFilter.jsx","cmps/NotificationPopover.jsx","cmps/BackgroundMenu.jsx","cmps/SideMenu.jsx","cmps/BoardHeader.jsx","cmps/TaskDetailsInfo.jsx","cmps/TaskDetailsDesc.jsx","cmps/TaskDetailsChecklist.jsx","cmps/TaskDetailsActivity.jsx","cmps/TaskDetailsAttachments.jsx","services/cloudinaryService.js","cmps/TaskSidebar.jsx","cmps/TaskDetails.jsx","services/socketService.js","services/dashboardService.js","cmps/Charts/TasksPerPerson.jsx","cmps/Charts/ActivityPerDay.jsx","cmps/Charts/TasksPerDay.jsx","cmps/DashboardDataPreview.jsx","cmps/Dashboard.jsx","pages/TrelloApp.jsx","services/googleService.js","pages/LoginSignup.jsx","routes.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","store/reducers/boardReducer.js","store/reducers/userReducer.js","store/reducers/popoverReducer.js","store/store.js","index.js"],"names":["sessionService","store","key","value","console","log","val","JSON","stringify","sessionStorage","setItem","load","defaultValue","getItem","parse","clear","BASE_URL","axios","Axios","create","withCredentials","httpService","endpoint","data","ajax","a","method","url","res","dir","response","status","window","location","assign","KEY","userService","getUsers","login","signup","filterUsersBy","checkLoggedUser","logout","users","user","password","username","loggedUser","isGoogle","newUser","regex","RegExp","filter","test","fullname","clearUser","dispatch","type","_AppHeader","state","navBgc","document","addEventListener","scrollY","setState","this","props","setUserAfterRefresh","currPath","history","pathname","className","to","substring","indexOf","onClick","Component","mapDispatchToProps","AppHeader","connect","isOverlayOpen","boardReducer","userReducer","withRouter","HomePage","href","storageService","saveToLocalStorage","localStorage","loadFromLocalStorage","utilService","delay","ms","Promise","resolve","setTimeout","getRandomInt","min","max","Math","ceil","floor","random","makeId","formatTime","timestamp","Date","toLocaleDateString","getRandomColor","color","i","formActivity","txt","task","id","createdAt","now","byMember","imgUrl","title","lightenColor","percent","num","parseInt","replace","amt","round","R","B","G","toString","slice","length","possible","charAt","boardService","query","getById","save","remove","getTaskById","getListIdxById","getTaskIdxById","getLabelIdxById","labelId","labels","findIndex","label","getListAndTaskIdxById","board","listId","taskId","list","lists","find","listIdx","taskIdx","getEmptyList","tasks","style","bgColor","getNotifications","NOTIFICATION_KEY","saveNotifications","notifications","getListByTaskId","some","boards","activity","_id","savedBoard","boardId","map","taskIds","forEach","push","PopoverHeader","setCurrPopover","_BoardActions","handleClickOutside","ev","toggleBoardActions","onEditBoard","onRemoveBoard","stopPropagation","BoardActions","onClickOutside","LoadingSpinner","width","height","position","BoardPreview","isBoardActionsOpen","isBoardHovered","toggle","boardPreviewHandlers","onMouseEnter","onMouseLeave","onRemove","onEdit","backgroundImage","bg","BoardList","onToggleCompose","styleService","getBgOptions","BoardMemberImg","member","size","alt","name","toUpperCase","textSizeRatio","fgColor","src","BoardMemberComposer","filterBy","filterMembers","target","usersToShow","isBoardMember","toggleMember","closeModal","placeholder","onChange","data-id","_BoardComposer","isMembersPreviewOpen","newBoard","members","bgs","filterMembersBy","btnTxt","onAddBoard","preventDefault","loadBgs","handleInput","field","prevState","setBg","toggleMemberPreview","memberPreview","closeMembersPreview","unshift","copyBoard","prevProps","onSubmit","backgroundSize","autoComplete","BoardComposer","Boards","isComposerOpen","boardToEdit","loadBoards","newBoards","currBoard","lastState","editBoard","updateBoard","isEmitting","updatedBoard","toggleTask","err","toggleOverlay","_LabelsPopover","isPicked","elRefs","onToggleLabel","dataset","labelIdx","taskLabelIdx","splice","markExistingLabels","handleChange","labelsCopy","cloneDeep","onEnterPress","keyCode","shiftKey","boardCopy","labelsToAdd","onEditLabel","current","focus","setRefs","labelsIdsMap","taskLabel","includes","currLabel","refs","React","createRef","onMouseDown","onKeyDown","ref","backgroundColor","LabelsPopover","ChangeMembersPopover","currTask","onUpdateTaskMember","membersRef","isTaskMember","onRemoveTaskMember","onAddTaskMember","clientWidth","classList","add","listAndTaskIdx","miniMember","memberIdx","currMember","boardMembers","CopyTaskPopover","selectedListIdx","onCopyClick","copyTask","FormControl","marginBottom","minWidth","Select","native","inputProps","QuickEditButton","isLabelsPopoverOpen","currPopover","Icon","data-for","useStyles","makeStyles","theme","container","display","flexWrap","textField","marginLeft","spacing","marginRight","DateAndTimePickers","classes","noValidate","TextField","format","InputLabelProps","shrink","DateTimePopover","classNames","onDateChange","onSaveDate","MoveTaskPopover","onMoveSaveClick","taskToMove","match","params","popovers","LabelIcon","ChangeMembersIcon","ArrowForwardIcon","FileCopyOutlinedIcon","ChangeDueDateIcon","TaskEdit","dueDate","isDone","dueDateHandlers","parsedString","parseISO","getTime","onRemoveTask","popover","_TaskPreview","isTaskHovered","isEditOpen","taskTitle","titleBeforeChange","unreadNotificationsCount","isLabelOpen","isManyMembers","onTaskUpdated","activityTxt","setDefaultTitle","onOpenDetails","setCurrListAndTaskIdx","taskPreviewHandlers","onToggleEdit","setListDnd","evt","onSaveTitle","toggleLabels","draggableId","index","isDragDisabled","provided","snapshot","draggableProps","dragHandleProps","innerRef","isDragging","attachments","html","disabled","doesContainIndics","description","checklists","taskDoneTodosLength","taskTodosLength","comments","reduce","acc","checklist","todos","doneTodos","checklistDoneTodos","todo","TaskPreview","isTaskOpen","_ListActions","listColors","onSetListColor","onToggleComposer","onRemoveList","ListActions","_ListTitle","isListActionsOpen","elListTitleRef","listTitleHandlers","onBlur","onFocus","borderRadius","editIconHandlers","onPressEnter","blur","onToggleListActions","ListTitle","_TaskComposer","onAddTask","titleRef","TaskComposer","TaskList","elTaskTitleRef","onEditTask","listTitleHandlersProps","setDragability","boolean","droppableId","droppableProps","flexGrow","minHeight","idx","_Board","listToAdd","addListHandlers","listToAddIdx","listColor","onDragEnd","destination","source","sourceListIdx","destinationListIdx","sourceListName","destinationListName","isDashboardOpen","isCurrPopover","direction","Board","popoverReducer","_BoardFilter","isOpen","toggleSearch","BoardFilter","NotificationPopover","onReadNotification","notificationId","notificationIdx","notification","BackgroundMenu","backgrounds","onChangeBoardBg","goBack","SideMenu","activites","currSection","onOpenTask","onChangeSection","section","activities","formatDistanceToNow","addSuffix","BoardHeader","currBadgeCount","incNotificationBadge","onToggleDashboard","_TaskDetailsInfo","isMemberModalOpen","onToggleMembersModal","onDateCheckChange","taskDueDate","checked","currPopver","togglePopover","currListIdx","currTaskIdx","formatRelative","TaskDetailsInfo","_TaskDetailsDesc","isTxtAreaOpen","toggleControls","closeInput","saveDescription","left","top","fontSize","fontWeight","spellCheck","rows","TaskDetailsDesc","_TaskDetailsChecklist","newTodo","newTodos","elTitleRef","checkListToUpdate","checklistsCopy","handleCheckbox","todoIdx","copyChecklists","onUpdateBoard","handleTodoChange","percentDone","handleNewTodo","checklistIdx","activityType","onRemoveTodo","todoToRemove","onAddItem","todoToAdd","onDeleteChecklist","padding","LinearProgressWithLabel","TaskDetailsChecklist","Box","alignItems","mr","LinearProgress","variant","Typography","root","_TaskDetailsActivity","isActivityOpen","comment","onToggleDetails","handleComment","saveComment","commentToAdd","onRemoveComment","commentIdx","taskComments","taskActivities","formatDistance","TaskDetailsActivity","TaskDetailsAttachments","onDeleteImg","imgIdx","taskImages","img","right","cloudinaryService","uploadImg","file","formData","FormData","append","TaskSidebar","taskImgUrl","onAddNewList","newChecklist","onUploadImg","files","secure_url","msg","cursor","hidden","_TaskDetails","isDetailsOpen","getDetails","handleTitle","onSubmitForm","getCurrTask","onCloseModal","onOverlayClick","details","currList","TaskDetails","socketService","socket","setup","io","on","eventName","cb","off","emit","terminate","saveMsgsToStorage","msgs","MSG_STORAGE_KEY","getMsgsFromStorage","createSocketService","dashboardService","getTasksPerPeopleData","boardTasks","tasksPerPerson","currIdx","datasets","hoverBackgroundColor","getActivityPerDayData","timeZone","Intl","DateTimeFormat","resolvedOptions","date","zonedDate","utcToZonedTime","getDate","activityPerDay","zonedCreatedAt","formattedTime","barPercentage","borderColor","borderWidth","getTasksPerDayData","tasksPerDay","getDashboardPrevsData","currTime","oneWeekMS","boardActivity","totalActivity","totalNewActivity","_getAllTasks","totalTasks","totalNewTasks","overDueTasks","totalOverDueTasks","totalNewOverDueTasks","total","new","MyChart","ActivityPerDay","DashboardDataPreview","Dashboard","toggleDashboard","prevsData","Charts","Chart","TasksPerPerson","TasksPerDay","_TrelloApp","isBoardClosed","componentDidMount","userId","onBoardUpdated","setBoard","paddingTop","TrelloApp","refreshTokenSetup","refreshTiming","tokenObj","expires_in","refreshToken","reloadAuthResponse","newAuthRes","id_token","clientId","_LoginSignup","signupCred","loginCred","googleCreds","isNewUser","isUploading","onSuccessGoogleLogin","profileObj","email","googleId","imageUrl","onFailureGoogleLogin","userCreds","setUser","typeOfForm","toggleForms","onLogout","buttonText","onLogoutSuccess","clientSecret","proxy","callbackURL","absoluteURI","onSuccess","onFailure","cookiePolicy","isSignedIn","routes","path","component","App","route","exact","Boolean","hostname","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","isPopoverOpen","rootReducer","combineReducers","action","isPopover","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sRAAaA,EAAiB,CAC1BC,MAUJ,SAAeC,EAAKC,GAChBC,QAAQC,IAAI,qBACZ,IAAMC,EAAMC,KAAKC,UAAUL,GAC3BM,eAAeC,QAAQR,EAAKI,IAZ5BK,KAiBJ,SAAcT,GAA2B,IAAtBU,EAAqB,uDAAN,KAC1BT,EAAQM,eAAeI,QAAQX,GACnC,OAAKC,EACOI,KAAKO,MAAMX,GADJS,GAlBnBG,MAIJ,WACIN,eAAeM,U,sBCNbC,EAEA,QAGFC,EAAQC,IAAMC,OAAO,CACvBC,iBAAiB,IAGNC,EAAc,SACrBC,EAAUC,GACZ,OAAOC,EAAKF,EAAU,MAAOC,IAFpBF,EAAc,SAIpBC,EAAUC,GACb,OAAOC,EAAKF,EAAU,OAAQC,IALrBF,EAAc,SAOrBC,EAAUC,GACZ,OAAOC,EAAKF,EAAU,MAAOC,IARpBF,EAAc,SAUlBC,EAAUC,GACf,OAAOC,EAAKF,EAAU,SAAUC,I,SAIrBC,E,8EAAf,WAAoBF,GAApB,+BAAAG,EAAA,6DAA8BC,EAA9B,+BAAuC,MAAOH,EAA9C,+BAAqD,KAArD,kBAEsBN,EAAM,CACtBU,IAAI,GAAD,OAAKX,GAAL,OAAgBM,GACnBI,SACAH,SALN,cAEUK,EAFV,yBAOWA,EAAIL,MAPf,sCASInB,QAAQC,IAAR,qBACgBqB,EADhB,yCACuDJ,EADvD,wBAC+EC,IAE/EnB,QAAQyB,IAAR,MACI,KAAIC,UAAoC,MAAxB,KAAIA,SAASC,QAC/BC,OAAOC,SAASC,OAAO,YAd7B,+D,sBCxBA,IAAMZ,EAAW,OACXa,EAAM,eAECC,EAAc,CACvBC,S,2CACAC,M,4CACAC,O,8CACAC,c,4CACAC,gBAgDJ,WACI,OAAOzC,EAAeW,KAAKwB,IAhD3BO,O,wFAGJ,4BAAAjB,EAAA,sEACwBJ,EAAgBC,GADxC,cACUqB,EADV,yBAEWA,GAFX,4C,kEAKA,WAAqBC,GAArB,eAAAnB,EAAA,+EAG2BJ,EAAA,UAAoBC,EAApB,4BAAgDsB,EAAKC,SAArD,qBAA0ED,EAAKE,WAH1G,cAGQC,EAHR,QAI0BF,SAClB7C,EAAeC,MAAMkC,EAAKY,GAC1B3C,QAAQC,IAAI,SAAU0C,GAN9B,gDAQQ3C,QAAQC,IAAI,qBARpB,iCAUW0C,GAVX,0D,kEAaA,WAAsBH,EAAMI,GAA5B,eAAAvB,EAAA,6DACIrB,QAAQC,IAAI,UAAWuC,GAD3B,kBAG8BvB,EAAA,UAAoBC,EAApB,WAAuC,CAAEsB,OAAMI,aAH7E,qBAGcC,EAHd,QAIuBJ,SACf7C,EAAeC,MAAMkC,EAAKc,GALlC,kBAMeL,GANf,kCAQQxC,QAAQC,IAAI,sBAAZ,MARR,2D,kEAaA,WAA6BF,GAA7B,iBAAAsB,EAAA,+EAG0BJ,EAAgBC,GAH1C,cAGYqB,EAHZ,OAIcO,EAAQ,IAAIC,OAAOhD,EAAO,KAChCwC,EAAQA,EAAMS,QAAO,SAAAR,GAAI,OAAIM,EAAMG,KAAKT,EAAKU,WAAaJ,EAAMG,KAAKT,EAAKE,aAC1E1C,QAAQC,IAAI,kBAAmBsC,GANvC,kBAOeA,GAPf,kCASQvC,QAAQC,IAAR,MATR,2D,kEAiBA,sBAAAoB,EAAA,+EAEcJ,EAAA,UAAoBC,EAApB,YAFd,OAGQtB,EAAee,QAHvB,+CAKQX,QAAQC,IAAI,mBAAZ,MALR,yD,sBCvCO,SAASkD,IAEZ,OADAnD,QAAQC,IAAI,2BACZ,uCAAO,WAAOmD,GAAP,SAAA/B,EAAA,sDACH,IACKW,EAAYM,SAKbc,EAHe,CACXC,KAAM,eAIb,SACGrD,QAAQC,IAAI,qBAVb,2CAAP,sDCPG,ICVAqD,E,4MACHC,MAAQ,CACJC,OAAQ,I,kEAGS,IAAD,OAChBC,SAASC,iBAAiB,UAAU,WAC5B9B,OAAO+B,QAAU,IACjB,EAAKC,SAAS,CAAEJ,OAAQ,gBAExB,EAAKI,SAAS,CAAEJ,OAAQ,oBAIhC,IAAMb,EAAaX,EAAYK,kBAC/BrC,QAAQC,IAAI,oBAAqB0C,GAC7BA,GAAYkB,KAAKC,MAAMC,oBAAoBpB,K,+BAM/C,IAAMqB,EAAWH,KAAKC,MAAMG,QAAQpC,SAASqC,SACrCV,EAAWK,KAAKN,MAAhBC,OACAhB,EAASqB,KAAKC,MAAdtB,KACR,OACI,wBAAQ2B,UAAS,6CAAqD,MAAbH,EAAmBR,EAAS,GAApE,YAAuF,WAAbQ,GAAsC,WAAbA,EAAwB,eAAiB,IAA7J,SACI,qBAAIG,UAAU,kCAAd,UACI,oBAAIA,UAAU,OAAd,SAAqB,cAAC,IAAD,CAASC,GAAG,IAAZ,SAAgB,8CACpC5B,GAAQ,qBAAI2B,UAAU,8BAAd,qBAAqD3B,EAAKU,SAASmB,UAAU,EAAG7B,EAAKU,SAASoB,QAAQ,MAAtG,OACT,6BAAI,cAAC,IAAD,CAASF,GAAG,SAAZ,SAAqB,+CACvB5B,GAAQ,6BAAI,cAAC,IAAD,CAAS4B,GAAG,SAAZ,SAAqB,6CAClC5B,GAAQ,oBAAI2B,UAAU,2BAA2BI,QAASV,KAAKC,MAAMX,UAA7D,+B,GAhCHqB,aAkDpBC,EAAqB,CACvBtB,YACAY,oBFrBG,SAA6BpB,GAEhC,OAAO,SAACS,GAKJA,EAJe,CACXC,KAAM,WACNV,kBEsBC+B,EAAYC,aAjBD,SAAApB,GACpB,MAAO,CACHqB,cAAerB,EAAMsB,aAAaD,cAClCpC,KAAMe,EAAMuB,YAAYtC,QAckBiC,EAAzBE,CAA6CI,YAAWzB,IChEpE0B,EAAb,uKAGQ,OACI,uBAAMb,UAAU,YAAhB,UACI,0BAASA,UAAU,gBAAnB,UACI,sBAAKA,UAAU,4DAAf,UACI,wCACA,iDACA,sCAAQ,0CAAR,WACA,mBAAGc,KAAK,kCAAkCd,UAAU,sBAApD,0BAEJ,qBAAKA,UAAU,sBAInB,0BAASA,UAAU,aAAnB,UACI,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAU,iBACf,sBAAKA,UAAU,2CAAf,UACI,+DACA,8DACA,2FACA,2FAGR,sBAAKA,UAAU,qBAAf,UACI,sBAAKA,UAAU,2CAAf,UACI,yDACA,8EACA,kEACA,4FAEJ,qBAAKA,UAAU,oBAEnB,sBAAKA,UAAU,qBAAf,UACI,qBAAKA,UAAU,iBACf,sBAAKA,UAAU,2CAAf,UACI,mDACA,uDACA,6FACA,iIAIR,yBAASA,UAAU,iCAAnB,SACI,oBAAGc,KAAK,kCAAR,UACI,yBACA,yBACA,yBACA,yBAJJ,sBAQR,wBAAQd,UAAU,mCAAlB,SACI,qEAAoC,mBAAGc,KAAK,0DAAR,8BAApC,8BAvDpB,GAA8BT,a,QCFjBU,EAAiB,CAC1BrF,MAYJ,SAAeC,EAAKC,GAChBM,eAAeP,GAAOK,KAAKC,UAAUL,IAZrCQ,KAeJ,SAAcT,GAA2B,IAAtBU,EAAqB,uDAAN,KAC1BT,EAAQM,eAAeP,GAC3B,OAAKC,EACOI,KAAKO,MAAMX,GADJS,GAhBnBG,MAMJ,WACIN,eAAeM,SANfwE,mBAkBJ,SAA4BrF,EAAKC,GAC7BqF,aAAatF,GAAOK,KAAKC,UAAUL,IAlBnCsF,qBAqBJ,SAA8BvF,GAA2B,IAAtBU,EAAqB,uDAAN,KAC1CT,EAAQqF,aAAatF,GACzB,OAAKC,EACOI,KAAKO,MAAMX,GADJS,IC3BhB,IAAM8E,EAAc,CACvBC,MASJ,WAA2B,IAAZC,EAAW,uDAAN,KAChB,OAAO,IAAIC,SAAQ,SAAAC,GACfC,WAAWD,EAASF,OAVxBI,aAcJ,SAAsBC,EAAKC,GAGvB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,GAAOA,IAhBhDM,SACAC,WAoCJ,SAAoBC,GAEhB,OADa,IAAIC,KAAKD,GAAWE,sBApCjCC,eAwCJ,WAGI,IAFA,IACIC,EAAQ,IACHC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,GAHU,mBAGOV,KAAKE,MAAsB,GAAhBF,KAAKG,WAErC,OAAOO,GA7CPE,aAyBJ,YAAmD,IAA3BnE,EAA0B,EAA1BA,KAAMoE,EAAoB,EAApBA,IAAoB,IAAfC,YAAe,MAAR,KAAQ,EAC9C,MAAO,CACHC,GAAIX,IACJY,UAAWT,KAAKU,MAChBJ,MACAK,SAAU,CAAEC,OAAM,OAAE1E,QAAF,IAAEA,OAAF,EAAEA,EAAM0E,OAAQhE,UAAc,OAAJV,QAAI,IAAJA,OAAA,EAAAA,EAAMU,WAAY,SAC9D2D,KAAMA,EAAO,CAAEC,GAAID,EAAKC,GAAIK,MAAON,EAAKM,OAAU,OA9BtDC,aA8CJ,SAAsBX,EAAOY,GACzB,IAAIC,EAAMC,SAASd,EAAMe,QAAQ,IAAI,IAAK,IACxCC,EAAM1B,KAAK2B,MAAM,KAAOL,GACxBM,GAAKL,GAAO,IAAMG,EAClBG,GAAKN,GAAO,EAAI,KAAUG,EAC1BI,GAAW,IAANP,GAAkBG,EAEvB,OAAQ,SAAgC,OAAnBE,EAAE,IAAIA,EAAE,EAAE,EAAEA,EAAE,KAAmC,KAAnBC,EAAE,IAAIA,EAAE,EAAE,EAAEA,EAAE,MAAcC,EAAE,IAAIA,EAAE,EAAE,EAAEA,EAAE,MAAMC,SAAS,IAAIC,MAAM,KAtC5H,SAAS5B,IAGL,IAHyB,IAAb6B,EAAY,uDAAH,EACjBpB,EAAM,GACNqB,EAAW,iEACNvB,EAAI,EAAGA,EAAIsB,EAAQtB,IACxBE,GAAOqB,EAASC,OAAOnC,KAAKE,MAAMF,KAAKG,SAAW+B,EAASD,SAE/D,OAAOpB,ECxBJ,IAAMuB,EAAe,CACxBC,M,2CACAC,UACAC,K,4CACAC,O,4CACAC,Y,+CACAC,kBACAC,kBACAC,gBAiFJ,SAAyB9B,EAAM+B,GAE3B,OADiB/B,EAAKgC,OAAOC,WAAU,SAAAC,GAAK,OAAIA,EAAMjC,KAAO8B,MAjF7DI,sBAqEJ,SAA+BC,EAAOC,EAAQC,GAC1C,IAAMC,EAAOH,EAAMI,MAAMC,MAAK,SAAAF,GAAI,OAAIA,EAAKtC,KAAOoC,KAC5CK,EAAUd,GAAeQ,EAAOC,GAChCM,EAAUd,GAAeU,EAAMD,GACrC,MAAO,CAAEI,UAASC,YAxElBC,aAoFJ,WACI,MAAO,CACH3C,GAAI,aACJK,MAAO,GACPuC,MAAO,GACPC,MAAO,CACHxC,MAAO,CAAEyC,QAAS,cAzF1BC,iBA8FJ,WACI,OAAO3E,EAAeG,qBAAqByE,IAAqB,CAC5D,CACIhD,GAAI,OACJF,IAAK,+BAET,CACIE,GAAI,OACJF,IAAK,0BAET,CACIE,GAAI,OACJF,IAAK,uBAET,CACIE,GAAI,OACJF,IAAK,gCA7GbmD,kBAkHJ,SAA2BC,GACvB9E,EAAeC,mBAAmB2E,EAAkBE,IAlHpDC,gBA2DJ,SAAyBhB,EAAOE,GAI5B,OAHaF,EAAMI,MAAMC,MAAK,SAAAF,GAC1B,OAAOA,EAAKM,MAAMQ,MAAK,SAAArD,GAAI,OAAIA,EAAKC,KAAOqC,UA1D7CjI,EAAW,QACX4I,EAAmB,iB,4CAEzB,4BAAAzI,EAAA,sEACyBJ,EAAgBC,GADzC,cACUiJ,EADV,yBAEWA,GAFX,4C,kEAMA,WAAoBlB,GAApB,6BAAA5H,EAAA,yDAA2B+I,EAA3B,+BAAsC,KAG7BnB,EAAMoB,IAHf,gCAI2BpJ,EAAiBC,EAAU+H,GAJtD,OAIQqB,EAJR,8CAM2BrJ,EAAA,UAAmBC,EAAnB,YAA+B+H,EAAMoB,KAAO,CAAEpB,QAAOmB,aANhF,OAMQE,EANR,wCASWA,GATX,6C,kEAaA,WAAsBC,GAAtB,SAAAlJ,EAAA,sEACUJ,EAAA,UAAsBC,EAAtB,YAAkCqJ,IAD5C,4C,+BAIelC,E,8EAAf,WAAuBkC,GAAvB,eAAAlJ,EAAA,sEACwBJ,EAAA,UAAmBC,EAAnB,YAA+BqJ,IADvD,cACUtB,EADV,yBAEWA,GAFX,4C,oEASA,WAA2BsB,EAASpB,GAApC,qBAAA9H,EAAA,sEACwBgH,EAAQkC,GADhC,cACUtB,EADV,OAEQS,EAAQT,EAAMI,MAAMmB,KAAI,SAAApB,GAAI,OAAIA,EAAKM,SACnCe,EAAU,GAChBf,EAAMgB,SAAQ,SAAA7D,GACV4D,EAAQE,KAAR,MAAAF,EAAO,YAAS5D,OAEdA,EAAO4D,EAAQnB,MAAK,SAAAzC,GAAI,OAAIA,EAAKC,KAAOqC,KAPlD,kBAQWtC,GARX,4C,sBAWA,SAAS6B,GAAeU,EAAMD,GAE1B,OADgBC,EAAKM,MAAMZ,WAAU,SAAAjC,GAAI,OAAIA,EAAKC,KAAOqC,KAI7D,SAASV,GAAeQ,EAAOC,GAE3B,OADgBD,EAAMI,MAAMP,WAAU,SAAAM,GAAI,OAAIA,EAAKtC,KAAOoC,K,gCCvEvD,SAAS0B,GAAT,GAA8D,IAArCzD,EAAoC,EAApCA,MAAO0D,EAA6B,EAA7BA,eAAgB1G,EAAa,EAAbA,UAEnD,OAAO,sBAAKA,UAAS,0DAAqDA,GAAaA,GAAhF,UACH,sBAAMA,UAAU,uBAAhB,SAAwCgD,IACxC,cAAC,KAAD,CAAWhD,UAAU,aAAaI,QAASsG,O,aCF5CC,G,4MAEHC,mBAAqB,SAAAC,GACjB,EAAKlH,MAAMmH,oBAAmB,I,uDAGxB,IAAD,EAC6DpH,KAAKC,MAA/DmF,EADH,EACGA,MAAOiC,EADV,EACUA,YAAaC,EADvB,EACuBA,cAAeF,EADtC,EACsCA,mBAC3C,OACI,sBAAK9G,UAAU,wBAAwBI,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAA3D,UACI,cAACR,GAAD,CAAezD,MAAM,gBAAgB0D,eAAgB,SAACG,GAClDA,EAAGI,kBACHH,OAEJ,yBAAS9G,UAAU,kBAAnB,SACI,qBAAIA,UAAU,kCAAd,UACI,oBAAIA,UAAU,qCAAqCI,QAAS,SAACyG,GACzDC,IACAC,EAAYjC,IAFhB,2BAIA,oBAAI9E,UAAU,wCAAwCI,QAAS,SAACyG,GAC5DC,IACAE,EAAclC,EAAMoB,MAFxB,yC,GApBK7F,aA+BhB6G,GAAeC,aAAeR,I,mDC/BpC,SAASS,GAAezH,GAG3B,OAEQ,aADJ,CACI,OAAKK,UAAU,kDAAkDwF,MAAO,CAAC6B,MAAM,OAAOC,OAAO,OAAOC,SAAS,SAA7G,SAEI,cAAC,KAAD,CAAQrI,KAAK,YAAYoD,MAAM,UAAUgF,OAAO,MAAMD,MAAM,UCLrE,IAAMG,GAAb,4MAEIpI,MAAQ,CACJqI,oBAAoB,EACpBC,gBAAgB,GAJxB,EAMIZ,mBAAqB,WAA8C,IAA7Ca,EAA4C,wDAAlC,EAAKvI,MAAMqI,mBACvC,EAAKhI,SAAS,CAAEgI,mBAAoBE,KAP5C,EAUIC,qBAAuB,CACnBC,aAAc,WACV,EAAKpI,SAAS,CAAEiI,gBAAgB,KAEpCI,aAAc,WACV,EAAKrI,SAAS,CAAEiI,gBAAgB,MAf5C,uDAmBc,IAAD,IAC+BhI,KAAKC,MAAjCmF,EADH,EACGA,MAAOiD,EADV,EACUA,SAAUC,EADpB,EACoBA,OACzB,OAAKlD,EAED,kDAASpF,KAAKkI,sBAAd,IACI5H,UAAS,2DAAsDN,KAAKN,MAAMqI,oBAAsB,sBAAwBjC,MAAO,CAAEyC,gBAAe,UAAEnD,EAAMU,aAAR,aAAE,EAAa0C,IADnK,UAEI,cAAC,IAAD,CAAMjI,GAAE,iBAAY6E,EAAMoB,KAA1B,SAAiC,6BAAKpB,EAAM9B,UAC5C,qBAAKhD,UAAU,iBACf,sBAAKA,UAAU,gCAAf,UACKN,KAAKN,MAAMsI,gBAAkB,cAAC,KAAD,CAAe1H,UAAS,sBAAyBI,QAASV,KAAKoH,qBAC5FpH,KAAKN,MAAMqI,oBACR,cAACP,GAAD,2BACIpC,MAAOA,EACPkC,cAAee,EACfhB,YAAaiB,GACTtI,KAAKC,OAJb,IAKImH,mBAAoBpH,KAAKoH,6BAd1B,cAACM,GAAD,QArB3B,GAAkC/G,a,oBCFrB8H,GAAb,uKACc,IAAD,EACiDzI,KAAKC,MAAnDqG,EADH,EACGA,OAAQ+B,EADX,EACWA,SAAUC,EADrB,EACqBA,OAAQI,EAD7B,EAC6BA,gBAClC,OACI,sBAAKpI,UAAU,yBAAf,UACKgG,EAAOK,KAAI,SAAAvB,GAAK,OAAI,cAAC,GAAD,CAA8BiD,SAAUA,EAAUjD,MAAOA,EAAOkD,OAAQA,GAArDlD,EAAMoB,QAC9C,sBAAKlG,UAAU,6DAA6DI,QAASgI,EAArF,UACI,cAAC,KAAD,CAASpI,UAAU,mBAAmB,qBAAKA,UAAU,gBAAf,2BAP1D,GAA+BK,a,SCDlBgI,GAAe,CAExBC,a,2FAKJ,sBAAApL,EAAA,+EAEW,CACH,uHACA,uHACA,sHACA,sHACA,sHACA,qHACA,sHACA,uHACA,uHACA,uHACA,+GACA,iHAdR,4C,8ECPe,SAASqL,GAAT,GAAkE,IAAxCC,EAAuC,EAAvCA,OAAuC,IAA/BC,YAA+B,MAAxB,GAAwB,MAApBzI,iBAAoB,MAAR,KAAQ,EAE5E,OAEI,aADA,CACC,KAAD,CAAQA,UAAS,kCAA6BA,GAAa0I,IAAI,0BAA0BC,KAAMH,EAAOzJ,SAAS6J,cAAeH,KAAMA,EAAMI,cAAe,KAAMC,QAAQ,OAAOvF,OAAO,EAAMwF,IAAKP,EAAOzF,SCCxM,IAAMiG,GAAb,4MACI5J,MAAQ,CACJhB,MAAO,GACP6K,SAAU,IAHlB,EAWIC,cAAgB,YAAiB,IACvBtN,EADsB,EAAbuN,OACMvN,MACrB,EAAK6D,SAAS,CAAEwJ,SAAUrN,IAAS,kBAAM,EAAKkC,eAbtD,EAkBIA,SAlBJ,sBAkBe,8BAAAZ,EAAA,6DACC+L,EAAa,EAAK7J,MAAlB6J,SADD,SAEmBpL,EAAYI,cAAcgL,GAF7C,OAEDG,EAFC,OAGP,EAAK3J,SAAS,CAAErB,MAAOgL,IAHhB,2CAlBf,kEAOQ1J,KAAK5B,aAPb,+BA0Bc,IAAD,EAC+C4B,KAAKC,MAAjD0J,EADH,EACGA,cAAeC,EADlB,EACkBA,aAAcC,EADhC,EACgCA,WAC7BnL,EAAUsB,KAAKN,MAAfhB,MACR,OAAKA,EAED,sBAAK4B,UAAU,iCAAiCI,QAAS,SAACyG,GAASA,EAAGI,mBAAtE,UACI,sBAAKjH,UAAU,yDAAf,UACI,uBAAMA,UAAU,uBAAhB,cAAwC,uBAAOd,KAAK,OAAOsK,YAAY,cAAcb,KAAK,WAAW/M,MAAO8D,KAAKN,MAAM8J,cAAeO,SAAU/J,KAAKwJ,mBACrJ,cAAC,KAAD,CAAWlJ,UAAU,aAAaI,QAAS,kBAAMmJ,UAErD,yBAASvJ,UAAU,kBAAnB,SACI,qBAAIA,UAAU,kCAAd,UACI,oBAAIA,UAAU,0BAAd,2BACC5B,EAAMiI,KAAI,SAAAhI,GACP,OAAO,qBAAmBqL,UAASrL,EAAK6H,IAAK9F,QAAS,kBAAMkJ,EAAajL,IAAOmH,MAAO,CAAE8B,OAAQ,QAAUtH,UAAS,sDAAiDqJ,EAAchL,EAAK6H,MAAQ,UAAzL,UACFmD,EAAchL,EAAK6H,KAAO,cAAC,KAAD,IAAe,cAAC,KAAD,IAC1C,cAACqC,GAAD,CAAgBC,OAAQnK,EAAMoK,KAAM,KACpC,uBAAMzI,UAAU,cAAc0J,UAASrL,EAAK6H,IAA5C,UAAkD7H,EAAKU,SAAvD,SAHYV,EAAK6H,gBAXtB,cAACkB,GAAD,QA7B3B,GAAyC/G,aCG5BsJ,GAAb,4MAEIvK,MAAQ,CACJwK,sBAAsB,EACtBC,SAAU,CACN7G,MAAO,GACP8G,QAAS,GACTtE,MAAO,CACH0C,GAAI,YAIZ9J,MAAO,GACP2L,IAAK,GACLC,gBAAiB,GACjBC,OAAQ,gBAfhB,EA4DIC,WA5DJ,uCA4DiB,WAAOrD,GAAP,mBAAA3J,EAAA,6DACT2J,EAAGsD,kBACGN,EAAa,EAAKzK,MAAlByK,UACO3D,MACT2D,EAAQ,6BAAQ,EAAKlK,MAAMmF,OAAU+E,IAGnC5D,EAAW,CACbxD,IAAK,qBARA,SAUgBuB,EAAaG,KAAK0F,EAAU5D,GAV5C,OAUHE,EAVG,OAWT,EAAKxG,MAAMG,QAAQ0G,KAAnB,iBAAkCL,EAAWD,MAXpC,2CA5DjB,wDA6EIkE,QA7EJ,sBA6Ec,4BAAAlN,EAAA,sEACYmL,GAAaC,eADzB,OACAyB,EADA,OAEN,EAAKtK,SAAS,CAAEsK,QAFV,2CA7Ed,EAoFIjM,SApFJ,sBAoFe,8BAAAZ,EAAA,6DACC8M,EAAoB,EAAK5K,MAAzB4K,gBADD,SAEmBnM,EAAYI,cAAc+L,GAF7C,OAEDZ,EAFC,OAGP,EAAK3J,SAAS,CAAErB,MAAOgL,IAHhB,2CApFf,EA2FIiB,YAAc,YAAiB,IAAdlB,EAAa,EAAbA,OACPvN,EAAQuN,EAAOvN,MACf0O,EAAQnB,EAAOR,KACrB,EAAKlJ,UAAS,SAAA8K,GACV,MAAO,CACHV,SAAS,6BACFU,EAAUV,UADT,mBAEHS,EAAQ1O,SAlG7B,EAyGI4O,MAAQ,SAACtC,GACL,EAAKzI,SAAS,CACVoK,SAAS,6BACF,EAAKzK,MAAMyK,UADV,IAEJrE,MAAM,6BAAM,EAAKpG,MAAMyK,SAASrE,OAA3B,IAAkC0C,YA7GvD,EAmHIuC,oBAAsB,WAClB,IAAMC,EAAgB,EAAKtL,MAAMwK,qBACjC,EAAKnK,SAAS,CAAEmK,sBAAuBc,KArH/C,EAyHIC,oBAAsB,WAClB,EAAKlL,SAAS,CAAEmK,sBAAsB,KA1H9C,EA8HIP,cAAgB,SAAC1G,GAAQ,IACbmH,EAAY,EAAK1K,MAAMyK,SAAvBC,QACR,cAAOA,QAAP,IAAOA,OAAP,EAAOA,EAAS/D,MAAK,SAAAyC,GAAM,OAAIA,EAAOtC,MAAQvD,MAhItD,EAqII2G,aAAe,SAACjL,GAAU,IAChByL,EADe,gBACE,EAAK1K,MAAMyK,UAA5BC,QACW,EAAKT,cAAchL,EAAK6H,KAGrC4D,EAAUA,EAAQjL,QAAO,SAAA2J,GAAM,OAAIA,EAAOtC,MAAQ7H,EAAK6H,OAEvD4D,EAAQc,QAAQvM,GAGpB,IAAMwM,EAAS,gBAAQ,EAAKzL,MAAMyK,UAClCgB,EAAUf,QAAUA,EACpB,EAAKrK,SAAS,CAAEoK,SAAUgB,KAjJlC,iEAmBuBC,GAAY,IACnBhG,EAAUpF,KAAKC,MAAfmF,MACJgG,EAAUhG,QAAUpF,KAAKC,MAAMmF,OAC/BpF,KAAKC,MAAMmF,OACXpF,KAAKD,SAAS,CACVoK,SAAU,CACN7G,MAAO8B,EAAM9B,MACbwC,MAAO,CACH0C,GAAIpD,EAAMU,MAAM0C,IAEpB4B,QAAShF,EAAMgF,QACf5D,IAAKpB,EAAMoB,KAEf+D,OAAQ,mBAhCxB,0CAsCQvK,KAAK5B,WACL4B,KAAK0K,YAvCb,6CA2CQ1K,KAAKD,SAAS,CACVmK,sBAAsB,EACtBC,SAAU,CACN7G,MAAO,GACP8G,QAAS,GACTtE,MAAO,CACH0C,GAAI,YAIZ9J,MAAO,GACP2L,IAAK,GACLC,gBAAiB,GACjBC,OAAQ,mBAxDpB,+BAqJc,IAAD,SACmDvK,KAAKN,MAArD2K,EADH,EACGA,IAAKF,EADR,EACQA,SAAUD,EADlB,EACkBA,qBAAsBK,EADxC,EACwCA,OACrC7B,EAAoB1I,KAAKC,MAAzByI,gBACR,OACI,cAAC,WAAD,UAEI,uBAAMpI,UAAU,mDAAmDI,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAAmB8D,SAAUrL,KAAKwK,WAAzH,UACI,qBAAKlK,UAAU,6CAAf,SACI,cAAC,KAAD,CAAWI,QAASgI,MAExB,sBAAKpI,UAAU,yDAAf,UAEI,qBAAKA,UAAU,0DAA0DwF,MAAO,CAAEyC,gBAAiB4B,EAASrE,MAAM0C,GAAI8C,eAAgB,SAAtI,SACI,0BAAUhL,UAAU,QAAQyJ,SAAU/J,KAAK2K,YAAab,YAAY,qBAAqBb,KAAK,QAAQsC,aAAa,MAAMrP,MAAOiO,EAAS7G,UAE7I,uBAAMhD,UAAU,qBAAhB,UACI,cAAC,KAAD,CAAcA,UAAU,UAAUI,QAASV,KAAK+K,sBAC/Cb,GAAwB,cAAC,GAAD,CAAqBP,cAAe3J,KAAK2J,cAAeC,aAAc5J,KAAK4J,aAAcC,WAAY7J,KAAKiL,4BAI3I,qBAAK3K,UAAU,aAAf,SACK+J,EAAI1D,KAAI,SAAA6B,GACL,OAAO,qBAAKlI,UAAU,aAAwCI,QAAS,kBAAM,EAAKoK,MAAMtC,IAAK1C,MAAO,CAAEyC,gBAAiBC,EAAI8C,eAAgB,SAApI,cAAiC7J,EAAYa,eAK5D,wBAAQhC,UAAU,gCAAlB,SAAmDiK,aAjLvE,GAAoC5J,aAwLvB6K,GAAgBtK,YAAW+I,IC7L3BwB,GAAb,4MAEI/L,MAAQ,CACJ4G,OAAQ,GACRoF,gBAAgB,EAChBC,YAAa,MALrB,EAYIC,WAZJ,sBAYiB,4BAAApO,EAAA,sEACY8G,EAAaC,QADzB,OACH+B,EADG,OAET,EAAKvG,SAAS,CAAEuG,WAFP,2CAZjB,EAkBI+B,SAlBJ,uCAkBe,WAAO3B,GAAP,iBAAAlJ,EAAA,sEACD8G,EAAaI,OAAOgC,GADnB,OAEHJ,EAAS,EAAK5G,MAAM4G,OAClBuF,EAAYvF,EAAOnH,QAAO,SAAA2M,GAAS,OAAIA,EAAUtF,MAAQE,KAC/D,EAAK3G,SAAS,CAAEuG,OAAQuF,IAJjB,2CAlBf,wDAyBInD,gBAAkB,WACd,IAAMqD,EAAY,EAAKrM,MAAMgM,eAC7B,EAAK3L,SAAS,CAAE2L,gBAAiBK,KA3BzC,EA8BIC,UAAY,SAAC5G,GACT,EAAKrF,SAAS,CAAE2L,gBAAgB,EAAMC,YAAavG,KA/B3D,kEASQpF,KAAK4L,eATb,+BAkCc,IAAD,EAE2C5L,KAAKN,MAA7C4G,EAFH,EAEGA,OAAQoF,EAFX,EAEWA,eAAgBC,EAF3B,EAE2BA,YAChC,OAAKrF,EAED,eAAC,WAAD,WAEI,qBAAKhG,UAAU,kBACf,qBAAKA,UAAU,eACf,qBAAKA,UAAU,4BAAf,SACI,qBAAKA,UAAU,8DAAf,SACI,0BAASA,UAAU,sBAAnB,UACI,qBAAKA,UAAU,oBAAf,yBACA,cAAC,GAAD,CAAWgG,OAAQA,EAAQ+B,SAAUrI,KAAKqI,SAAUC,OAAQtI,KAAKgM,UAAWtD,gBAAiB1I,KAAK0I,yBAK9G,qBAAKhI,QAASV,KAAK0I,gBAAiBpI,UAAS,4DAAuDoL,GAAkB,eAAtH,SACI,cAACF,GAAD,CAAepG,MAAOuG,EAAajD,gBAAiB1I,KAAK0I,uBAhBjD,cAAChB,GAAD,QArC5B,GAA4B/G,aCYrB,SAASsL,GAAY7G,GAA4C,IAArCmB,EAAoC,uDAAzB,KAAM2F,IAAmB,yDAEnE,8CAAO,WAAM3M,GAAN,eAAA/B,EAAA,mEAEsB0O,EAFtB,gCAEyC5H,EAAaG,KAAKW,EAAOmB,EAAU2F,GAF5E,8CAE0F9G,EAF1F,OAEO+G,EAFP,KAOC5M,EAJe,CACXC,KAAM,eACN2M,iBALL,kDASChQ,QAAQC,IAAI,uBAAZ,MATD,0DAAP,sDAcG,SAASgQ,KACZ,8CAAO,WAAM7M,GAAN,SAAA/B,EAAA,sDACH,IACI+B,EAAS,CAAEC,KAAM,gBACnB,MAAO6M,GACLlQ,QAAQC,IAAI,uCAAwCiQ,GAJrD,2CAAP,sDASG,SAASC,KACZ,8CAAO,WAAM/M,GAAN,SAAA/B,EAAA,sDACH,IACI+B,EAAS,CAAEC,KAAM,mBAErB,MAAO6M,GACHlQ,QAAQC,IAAI,sBAAuBiQ,GALpC,2CAAP,sD,0ICrCSE,GAAb,4MACI7M,MAAQ,CACJsF,OAAQ,CACJ,CAAE/B,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,GACpD,CAAEvJ,GAAI,MAAOL,MAAO,UAAWU,MAAO,GAAIkJ,UAAU,IAExDC,OAAQ,IAXhB,EA2CIC,cAAgB,SAAAvF,GACZA,EAAGI,kBADe,IAEVvC,EAFU,gBAEM,EAAKtF,OAArBsF,OAFU,kBAG8B,EAAK/E,OAA7CmF,EAHU,EAGVA,MAAOG,EAHG,EAGHA,KAAMvC,EAHH,EAGGA,KAAMiJ,EAHT,EAGSA,YACrBlH,EAAUoC,EAAGsC,OAAOkD,QAAQ1J,GAC5B2J,EAAW,EAAK9H,gBAAgBC,GACtCC,EAAO4H,GAAUJ,UAAYxH,EAAO4H,GAAUJ,SAC9C,EAAKzM,SAAS,CAAEiF,UAAhB,sBAA0B,sCAAAxH,EAAA,oEACfwH,EAAO4H,GAAUJ,SADF,EAEOlI,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAFc,EAEdA,QAASC,EAFK,EAELA,QACXY,EAAW,CAAEvD,SACnB,UAAIA,EAAKgC,cAAT,aAAI,EAAaqB,MAAK,SAAAnB,GAAK,OAAIA,EAAMjC,KAAO8B,OAClC8H,EAAe7J,EAAKgC,OAAOC,WAAU,SAAAC,GAAK,OAAIA,EAAMjC,KAAO8B,KACjE/B,EAAKgC,OAAO8H,OAAOD,EAAc,GACjCzH,EAAMI,MAAME,GAASG,MAAMF,GAAW3C,EACtCuD,EAASxD,IAAT,gCAGAC,EAAKgC,OAAShC,EAAKgC,OAAL,sBAAkBhC,EAAKgC,QAAvB,CAA+BA,EAAO4H,KAAa,CAAC5H,EAAO4H,IACzExH,EAAMI,MAAME,GAASG,MAAMF,GAAW3C,EACtCuD,EAASxD,IAAT,2BAbkB,SAgBhBkJ,EAAY7G,EAAOmB,GAhBH,OAiBtB,EAAKwG,qBAjBiB,6CAlDlC,EA4EIC,aAAe,SAACJ,EAAUzF,GAAQ,IACtBnC,EAAW,EAAKtF,MAAhBsF,OACFiI,EAAaC,qBAAUlI,GAC7BiI,EAAWL,GAAUtJ,MAAQ6D,EAAGsC,OAAOvN,MACvC,EAAK6D,SAAS,CAAEiF,OAAQiI,KAhFhC,EAmFIE,aAAe,SAAAhG,GACX,GAAKA,EAAGsC,OAAOvN,OACI,KAAfiL,EAAGiG,UAAkC,IAAhBjG,EAAGkG,SAAoB,CAC5ClG,EAAGsD,iBADyC,MAED,EAAKxK,MAAxCmF,EAFoC,EAEpCA,MAAOG,EAF6B,EAE7BA,KAAMvC,EAFuB,EAEvBA,KAAMiJ,EAFiB,EAEjBA,YAFiB,EAGf3H,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAHoC,EAGpCA,QAASC,EAH2B,EAG3BA,QACX2H,EAAYJ,qBAAU9H,GAEtBmI,EADa,EAAK7N,MAAhBsF,OACmB7F,QAAO,SAAA+F,GAAK,OAAIA,EAAMsH,YACjDc,EAAU9H,MAAME,GAASG,MAAMF,GAASX,OAASuI,EACjDtB,EAAYqB,KA7FxB,EAiGIE,YAAc,SAACZ,EAAUzF,GACrBA,EAAGI,kBACgB,EAAK7H,MAAhB+M,OACDG,GAAUa,QAAQC,SApGjC,kEAgBQ1N,KAAK+M,qBACL/M,KAAK2N,YAjBb,2CAoB0B,IAAD,EACT3K,EAAShD,KAAKC,MAAd+C,KACR,GAAI,UAACA,EAAKgC,cAAN,aAAC,EAAab,OAAlB,CAFiB,IAGXa,EAHW,gBAGKhF,KAAKN,OAArBsF,OACA4I,EAAe5I,EAAO2B,KAAI,SAAAzB,GAAK,OAAIA,EAAMjC,MAC/CD,EAAKgC,OAAO6B,SAAQ,SAAAgH,GAChB,GAAID,EAAaE,SAASD,EAAU5K,IAAK,CACrC,IAAM2J,EAAW5H,EAAOC,WAAU,SAAA8I,GAAS,OAAIA,EAAU9K,KAAO4K,EAAU5K,MAC1E+B,EAAO4H,GAAUJ,UAAW,EAC5BxH,EAAO4H,GAAUtJ,MAAQuK,EAAUvK,UAG3CtD,KAAKD,SAAS,CAAEiF,cAhCxB,gCAoCQ,IAAMgJ,EAAO,GACbhO,KAAKN,MAAMsF,OAAO6B,SAAQ,SAAA3B,GACtB8I,EAAKlH,KAAKmH,IAAMC,gBAEpBlO,KAAKD,SAAS,CAAE0M,OAAQuB,MAxChC,sCAuEoBjJ,GAEZ,OADmB/E,KAAKN,MAAhBsF,OACMC,WAAU,SAAAC,GAAK,OAAIA,EAAMjC,KAAO8B,OAzEtD,+BAwGc,IAAD,SACsB/E,KAAKN,MAAxBsF,EADH,EACGA,OAAQyH,EADX,EACWA,OAChB,OACI,sBAAKnM,UAAU,oCAAf,UACI,cAACyG,GAAD,CAAezD,MAAM,SAAS0D,eAAgBhH,KAAKC,MAAM+G,iBACzD,yBAAS1G,UAAU,kBAAnB,SACI,qBAAIA,UAAU,8CAAd,UACI,oBAAIA,UAAU,yBAAd,oBACC0E,EAAO2B,KAAI,SAACzB,EAAO0H,GAChB,OAEI,sBAAKtM,UAAU,OAAf,UACI,uBACI0J,UAAS9E,EAAMjC,GACfvC,QAAS,EAAKgM,cACdyB,YAAa,SAAChH,GAAD,OAAQA,EAAGsD,kBAExBV,SAAU,SAAC5C,GAAD,OAAQ,EAAK6F,aAAaJ,EAAUzF,IAC9CjL,MAAO8I,EAAO4H,GAAUtJ,MACxB8K,UAAW,EAAKjB,aAChBkB,IAAK5B,EAAOG,GACZtM,UAAS,oCAA+B4E,EAAMsH,UAAY,UAAY1G,MAAO,CAAEwI,gBAAiBpJ,EAAMtC,QALjGsC,EAAMjC,IAMf,cAAC,KAAD,CAAkBvC,QAAS,SAACyG,GAAD,OAAQ,EAAKqG,YAAYZ,EAAUzF,QAXvCjC,EAAMjC,mBAnHjE,GAAoCtC,aAiJ9BC,GAAqB,CACvBqL,gBAGSsC,GAAgBzN,aAVL,SAAApB,GACpB,MAAO,CACH0F,MAAO1F,EAAMsB,aAAa8K,aAQoBlL,GAAzBE,CAA6CyL,ICvJ7DiC,GAAb,4MACI9O,MAAQ,CACJ+O,SAAU,IAFlB,EAUIC,mBAVJ,uCAUyB,WAAOvH,GAAP,yBAAA3J,EAAA,yDACjB2J,EAAGI,kBACKoH,EAAe,EAAK1O,MAApB0O,WACA1L,EAAOkE,EAAGsC,OAAOkD,QAAjB1J,GAHS,kBAIM,EAAKhD,OAApBmF,EAJS,EAITA,MACAgF,EAAYhF,EAAZgF,QACFtB,EAASsB,EAAQ3E,MAAK,SAAAqD,GAAM,OAAIA,EAAOtC,MAAQvD,MACrD,EAAK2L,aAAa9F,EAAOtC,KAPR,iCAOqB,EAAKqI,mBAAmB/F,GAP7C,gDAQL,EAAKgG,gBAAgBhG,GARhB,SASjB,OAAI6F,QAAJ,IAAIA,OAAJ,EAAIA,EAAYlB,WACZkB,EAAWlB,QAAQsB,YAAc,GAC7BJ,EAAWlB,QAAQuB,UAAUC,IAAI,eAC/BN,EAAWlB,QAAQuB,UAAUtK,OAAO,gBAZ7B,4CAVzB,wDA0BIoK,gBA1BJ,uCA0BsB,WAAOhG,GAAP,uCAAAtL,EAAA,+EACsB,EAAKyC,OAAjCmF,EADM,EACNA,MAAO6G,EADD,EACCA,YADD,EAEe,EAAKiD,eAA1BxJ,EAFM,EAENA,QAASC,EAFH,EAEGA,QACX8I,EAAWrJ,EAAMI,MAAME,GAASG,MAAMF,GACpCa,EAAoCsC,EAApCtC,IAAK3H,EAA+BiK,EAA/BjK,SAAUQ,EAAqByJ,EAArBzJ,SAAUgE,EAAWyF,EAAXzF,OAC3B8L,EAAa,CAAE3I,MAAK3H,WAAUQ,WAAUgE,UAC9CoL,EAASrE,QAAUqE,EAASrE,QAAQtD,KAAKqI,GAAcV,EAASrE,QAAU,CAAC+E,GAC3E,EAAKpP,SAAS,CAAE0O,aACVlI,EAAW,CAAExD,IAAI,aAAD,OAAeoM,EAAW9P,SAA1B,YAA8C2D,KAAK,gBAAMyL,IARjE,UASRxC,EAAY7G,EAAOmB,GATX,4CA1BtB,wDAsCIsI,mBAtCJ,uCAsCyB,WAAO/F,GAAP,uCAAAtL,EAAA,+EACyB,EAAKyC,OAAvCmF,EADS,EACTA,MAAO6G,EADE,EACFA,YAAajJ,EADX,EACWA,KACtBoH,EAAYpH,EAAZoH,QACFgF,EAAYhF,EAAQnF,WAAU,SAAAoK,GAAU,OAAIvG,EAAOtC,MAAQ6I,EAAW7I,OAHzD,EAIY,EAAK0I,eAA1BxJ,EAJS,EAITA,QAASC,EAJA,EAIAA,QAJA,kBAKSyE,EAAQgF,IAA1B/P,EALS,EAKTA,UACFoP,EAAWrJ,EAAMI,MAAME,GAASG,MAAMF,IACnCyE,QAAQ0C,OAAOsC,EAAW,GACnC,EAAKrP,SAAS,CAAE0O,aACVlI,EAAW,CAAExD,IAAI,eAAD,OAAiB1D,EAAjB,cAAuC2D,KAAK,gBAAMyL,IATvD,SAUXxC,EAAY7G,EAAOmB,GAVR,2CAtCzB,sHAOQ,OADiBvG,KAAKC,MAAd+C,KACIoH,UAPpB,mCAmDiBnH,GAAK,IAAD,EAEP2L,EAAY,UADD5O,KAAKC,MAAM+C,KACEoH,eAAZ,aAAG,EAAkB/D,MAAK,SAAAgJ,GAAU,OAAIpM,IAAOoM,EAAW7I,OAC5E,OAAOoI,IAtDf,+BA+Dc,IAAD,OACCU,EAAetP,KAAKC,MAAMmF,MAAMgF,QACtC,OACI,sBAAK9J,UAAU,0BAA0BI,QAAS,SAACyG,GAASA,EAAGI,mBAA/D,UACI,cAACR,GAAD,CAAezD,MAAM,UAAU0D,eAAgBhH,KAAKC,MAAM+G,iBAC1D,yBAAS1G,UAAU,kBAAnB,SACI,qBAAIA,UAAU,kCAAd,UACI,oBAAIA,UAAU,yBAAd,2BACCgP,EAAa3I,KAAI,SAAAmC,GACd,OAAO,qBAAqBkB,UAASlB,EAAOtC,IAAK9F,QAAS,EAAKgO,mBAAoBpO,UAAS,sDAAiD,EAAKsO,aAAa9F,EAAOtC,MAAQ,UAAvK,UACC,cAACqC,GAAD,CAAgBC,OAAQA,EAAQC,KAAM,GAAIzI,UAAU,qBAExD,uBAAM0J,UAASlB,EAAOtC,IAAtB,UAA4BsC,EAAOzJ,SAAnC,MAAgDyJ,EAAOjK,SAAvD,OACC,EAAK+P,aAAa9F,EAAOtC,MAAQ,cAAC,KAAD,CAAUlG,UAAU,kBAJ1CwI,EAAOtC,kBAxEnD,qCAyD0B,IAAD,EACaxG,KAAKC,MAA3BmF,EADS,EACTA,MAAOG,EADE,EACFA,KAAMvC,EADJ,EACIA,KADJ,EAEYsB,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IACrF,MAAO,CAAEyC,QAHQ,EAETA,QACUC,QAHD,EAEAA,aA3DzB,GAA0ChF,a,oBCC7B4O,GAAb,4MACI7P,MAAQ,CACJ8P,gBAAiB,GAFzB,EAKI7E,YAAc,SAACxD,GACX,EAAKpH,SAAS,CAAEyP,gBAAiBrI,EAAGsC,OAAOvN,SANnD,EASIuT,YATJ,sBASkB,0CAAAjS,EAAA,+DAC2C,EAAKyC,MAAlDmF,EADE,EACFA,MAAOpC,EADL,EACKA,KAAMiJ,EADX,EACWA,YAAajF,EADxB,EACwBA,eAC1BwI,EAAoB,EAAK9P,MAAzB8P,gBACFrE,EAAY+B,qBAAU9H,IACtBsK,EAAWxC,qBAAUlK,IAClBC,GAAKxB,EAAYa,SAC1BoN,EAASxM,UAAYT,KAAKU,MAC1BgI,EAAU3F,MAAMgK,GAAiB3J,MAAMiB,KAAK4I,GAPlC,SAQJzD,EAAYd,GARR,OASVnE,IATU,4CATlB,uDAqBc,IACE5B,EAAUpF,KAAKC,MAAfmF,MACR,OACI,sBAAK9E,UAAU,oBAAoBI,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAAvD,UACI,cAACR,GAAD,CAAezD,MAAM,YAAY0D,eAAgBhH,KAAKC,MAAM+G,iBAC5D,sBAAK1G,UAAU,0DAAf,UACI,oDACA,cAACqP,GAAA,EAAD,CAAa7J,MAAO,CAAE8J,aAAc,OAAQC,SAAU,SAAtD,SACI,cAACC,GAAA,EAAD,CACIC,QAAM,EACNhG,SAAU/J,KAAK2K,YACfqF,WAAY,CACR/G,KAAM,OACNhG,GAAI,qBALZ,SAQKmC,EAAMI,MAAMmB,KAAI,SAACpB,EAAMG,GACpB,GAAKH,EAAKjC,MACV,OAAO,wBAAQpH,MAAOwJ,EAAf,SAAyBH,EAAKjC,eAIjD,wBAAQ5C,QAASV,KAAKyP,YAAanP,UAAU,6BAA7C,4BA3CpB,GAAqCK,aCLxBsP,GAAb,4MAEIvQ,MAAQ,CACJwQ,qBAAqB,GAH7B,uDAMc,IAAD,EAC2DlQ,KAAKC,MAA7DqD,EADH,EACGA,MAAO3C,EADV,EACUA,UAAWqG,EADrB,EACqBA,eAAgBmJ,EADrC,EACqCA,YAAaC,EADlD,EACkDA,KACvD,OACI,qCACA,mBAAG9P,UAAU,gDAAgDI,QAAS,SAAAyG,GAClEA,EAAGI,kBACH4I,IAAgB7M,EAAQ0D,IAAmBA,EAAe1D,IAC3D+M,WAAU,aAHb,SAII,uBAAM/P,UAAU,wDAAhB,UAAyE8P,GAAQ,cAACA,EAAD,CAAM9P,UAAU,wCAA0CgD,OAEzI3C,GAAcwP,IAAgB7M,GAAU,cAAC3C,EAAD,gBAAeX,KAAKC,eAhB9E,GAAqCU,a,kJCE/B2P,GAAYC,cAAW,SAACC,GAAD,MAAY,CACrCC,UAAW,CACPC,QAAS,OACTC,SAAU,QAEdC,UAAW,CACPC,WAAYL,EAAMM,QAAQ,GAC1BC,YAAaP,EAAMM,QAAQ,GAC3BnJ,MAAO,SAIA,SAASqJ,GAAmB/Q,GACvC,IAAMgR,EAAUX,KAEhB,OACI,sBAAMhQ,UAAW2Q,EAAQR,UAAWS,YAAU,EAA9C,SACI,cAACC,GAAA,EAAD,cAEIlO,GAAG,iBACHmO,OAAO,mBACP5R,KAAK,iBACL7C,aAAa,mBACb2D,UAAW2Q,EAAQL,UACnBS,gBAAiB,CACbC,QAAQ,IAERrR,MC3Bb,IAAMsR,GAAb,uKAGc,IAAD,OACGC,EAAexR,KAAKC,MAApBuR,WACR,OACI,sBAAKlR,UAAS,8CAAyCkR,GAAcA,GAAc9Q,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAAvG,UACI,cAACR,GAAD,CAAezD,MAAM,WAAW0D,eAAgBhH,KAAKC,MAAM+G,iBAC3D,sBAAK1G,UAAU,iDAAf,UACI,cAAC,GAAD,CAAUyJ,SAAU/J,KAAKC,MAAMwR,eAC/B,wBAAQ/Q,QAAS,kBAAM,EAAKT,MAAMyR,cAAcpR,UAAU,6BAA1D,4BAVpB,GAAqCK,aCIxBgR,GAAb,4MAEIjS,MAAQ,CACJ8P,gBAAiB,GAHzB,EAMI7E,YAAc,SAACxD,GACX,EAAKpH,SAAS,CAAEyP,gBAAiBrI,EAAGsC,OAAOvN,SAPnD,EAUI0V,gBAVJ,sBAUsB,wDAAApU,EAAA,+DAC6C,EAAKyC,MAAxDmF,EADM,EACNA,MAAOG,EADD,EACCA,KAAMvC,EADP,EACOA,KAAMiJ,EADb,EACaA,YAAajF,EAD1B,EAC0BA,eAChCwI,EAAoB,EAAK9P,MAAzB8P,gBAFM,EAGelL,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAHM,EAGNA,QAASC,EAHH,EAGGA,QACXwF,EAAY+B,qBAAU9H,GACtByM,EAAa1G,EAAU3F,MAAME,GAASG,MAAMiH,OAAOnH,EAAS,GAClEwF,EAAU3F,OAAOgK,GAAiB3J,MAAMiB,KAAK+K,EAAW,IAN1C,SAOR5F,EAAYd,GAPJ,OAQdnE,IARc,EASa,EAAK/G,MAAM6R,MAAMC,OAApCzM,EATM,EASNA,OAAQD,EATF,EASEA,OACZC,GAAUD,GACV,EAAKpF,MAAMG,QAAQ0G,KAAnB,iBAAkC1B,EAAMoB,IAAxC,YAA+CpB,EAAMI,MAAMgK,GAAiBvM,GAA5E,YAAkFD,EAAKC,KAX7E,4CAVtB,uDAwBc,IACEmC,EAAUpF,KAAKC,MAAfmF,MACR,OACI,sBAAK9E,UAAU,oBAAoBI,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAAvD,UACI,cAACR,GAAD,CAAezD,MAAM,YAAY0D,eAAgBhH,KAAKC,MAAM+G,iBAC5D,sBAAK1G,UAAU,0DAAf,UACI,oDACA,cAACqP,GAAA,EAAD,CAAa7J,MAAO,CAAE8J,aAAc,OAAQC,SAAU,SAAtD,SACI,cAACC,GAAA,EAAD,CACIC,QAAM,EACNhG,SAAU/J,KAAK2K,YACfqF,WAAY,CACR/G,KAAM,OACNhG,GAAI,qBALZ,SAQKmC,EAAMI,MAAMmB,KAAI,SAACpB,EAAMG,GACpB,GAAKH,EAAKjC,MACV,OAAO,wBAAQpH,MAAOwJ,EAAf,SAAyBH,EAAKjC,eAIjD,wBAAQ5C,QAASV,KAAK4R,gBAAiBtR,UAAU,6BAAjD,4BA9CpB,GAAqCK,a,oBCgB/BqR,GAAW,CACb,CACI1O,MAAO,cACP3C,UAAW4N,GACX6B,KAAM6B,MAEV,CACI3O,MAAO,iBACP3C,UAAW6N,GACX4B,KAAM8B,MAEV,CAAE5O,MAAO,OAAQ8M,KAAM+B,KAAkBxR,UAAWgR,IACpD,CAAErO,MAAO,OAAQ8M,KAAMgC,MACvB,CACI9O,MAAO,kBACP3C,UAAW4Q,GACXnB,KAAMiC,KACNb,WAAY,0BAIPc,GAAb,4MAEI5S,MAAQ,CACJ6S,QAAS,CACL/P,UAAW,GACXgQ,QAAQ,IALpB,EASIC,gBAAkB,CACdhB,aAAc,SAACtK,GACX,IAAIuL,EAAeC,aAASxL,EAAGsC,OAAOvN,OAEhCqW,EAAU,CACZ/P,UAFYoQ,aAAQF,GAGpBF,QAAQ,GAEZ,EAAKzS,SAAS,CAAEwS,aAEpBb,WAAY,WAAO,IAAD,EAC6B,EAAKzR,MAAxCmF,EADM,EACNA,MAAOG,EADD,EACCA,KAAMvC,EADP,EACOA,KAAMiJ,EADb,EACaA,YADb,EAEe3H,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAFM,EAENA,QAASC,EAFH,EAEGA,QACX2H,EAAS,gBAAQlI,GAClB,EAAK1F,MAAM6S,QAAQ/P,YACxB8K,EAAU9H,MAAME,GAASG,MAAMF,GAAS4M,QAAU,EAAK7S,MAAM6S,QAC7DtG,EAAYqB,GACZ,EAAKrN,MAAM+G,oBA1BvB,EA8BI6L,aAAe,SAAA1L,GACXA,EAAGI,kBADc,MAEa,EAAKtH,MAA3B+C,EAFS,EAETA,KAAMuC,EAFG,EAEHA,KAAMH,EAFH,EAEGA,MAFH,EAGYd,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAHS,EAGTA,QAASC,EAHA,EAGAA,QACX2H,EAAS,gBAAQ,EAAKrN,MAAMmF,OAClCkI,EAAU9H,MAAME,GAASG,MAAMiH,OAAOnH,EAAS,GAC/C,EAAK1F,MAAMgM,YAAYqB,IApC/B,uDAuCc,IAAD,OACL,OACI,sBAAKhN,UAAU,4BAAf,UACK0R,GAASrL,KAAI,SAAAmM,GACV,OAAO,cAAC,GAAD,0CAEC,EAAKL,iBACL,EAAKxS,OACL6S,GAHCA,EAAQxP,UAKrB,oBAAGhD,UAAU,gDAAgDc,KAAK,IAAIV,QAASV,KAAK6S,aAApF,UACI,sBAAMvS,UAAU,6BAChB,uBAAMA,UAAU,wDAAhB,UACI,cAAC,KAAD,CAAYA,UAAU,wCAD1B,sBAnDpB,GAA8BK,a,wCC7BjBoS,GAAb,4MAEIrT,MAAQ,CACJsT,eAAe,EACfC,YAAY,EACZC,UAAW,GACXC,kBAAmB,GACnBC,yBAA0B,EAC1BC,aAAa,EACbC,eAAe,GATvB,EAYI3E,WAAaV,IAAMC,YAZvB,EA0BIqF,cAAgB,SAACC,GAAiB,IACtBJ,EADqB,gBACa,EAAK1T,OAAvC0T,yBACR,EAAKrT,SAAS,CAAEqT,yBAA0BA,EAA2B,IAAK,gBA5BlF,EAuCIK,gBAAkB,WAAO,IACbN,EAAsB,EAAKzT,MAA3ByT,kBACR,EAAKpT,SAAS,CAAEmT,UAAWC,KAzCnC,EAgDIO,cAhDJ,uCAgDoB,WAAOvM,GAAP,2BAAA3J,EAAA,yDACZ2J,EAAGI,mBACC,EAAK7H,MAAMuT,WAFH,0DAIkB,EAAKhT,MAA3BsF,EAJI,EAIJA,KAAMH,EAJF,EAIEA,MAAOpC,EAJT,EAISA,KAJT,EAKiBsB,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7E0C,EALI,EAKJA,QAASD,EALL,EAKKA,QALL,SAON,EAAKzF,MAAM0T,sBAAsBjO,EAASC,GAPpC,uBAQN,EAAK1F,MAAMqM,gBARL,OAWZ,EAAKrM,MAAMG,QAAQ0G,KAAnB,iBAAkC1B,EAAMoB,IAAxC,YAA+CjB,EAAKtC,GAApD,YAA0DD,EAAKC,KAXnD,4CAhDpB,wDA8DI2Q,oBAAsB,CAElBzL,aAAc,WACV,EAAKpI,SAAS,CAAEiT,eAAe,KAEnC5K,aAAc,WACV,EAAKrI,SAAS,CAAEiT,eAAe,MApE3C,EAwEIa,aAAe,SAAA1M,GACXA,EAAGI,kBADc,IAET0L,EAAe,EAAKvT,MAApBuT,WACR,EAAKlT,SAAS,CAAEkT,YAAaA,IACzBA,GAAY,EAAKQ,kBACrB,EAAKxT,MAAM6T,WAAWb,IA7E9B,EAmGIjG,aAAe,SAAA+G,GACX,EAAKhU,SAAS,CAAEmT,UAAWa,EAAItK,OAAOvN,SApG9C,EAuGI8X,YAvGJ,uCAuGkB,WAAO7M,GAAP,iCAAA3J,EAAA,yDACF0V,EAAc,EAAKxT,MAAnBwT,UADE,sDAGoB,EAAKjT,MAA3BsF,EAHE,EAGFA,KAAMH,EAHJ,EAGIA,MAAOpC,EAHX,EAGWA,KACjBkQ,IAAclQ,EAAKM,MAJb,uBAKN,EAAKuQ,aAAa1M,GALZ,mCAQmB7C,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EARE,EAQFA,QAASC,EARP,EAQOA,SACXwF,EATI,gBASa/F,IACbI,MAAME,GAASG,MAAMF,GAASrC,MAAQ4P,EACxCvU,EAAS,EAAKsB,MAAdtB,KAXE,UAYJ,EAAKsB,MAAMgM,YAAYd,EAAW,CAAExM,OAAMoE,IAAI,qBAAD,OAAuBC,EAAKM,MAA5B,WAA4CN,KAAK,gBAAM,EAAK/C,MAAM+C,QAZ3G,QAaV,EAAK6Q,aAAa1M,GAbR,4CAvGlB,wHAeyB,IACTnE,EAAShD,KAAKC,MAAd+C,KACRhD,KAAKD,SAAS,CAAEmT,UAAWlQ,EAAKM,MAAO6P,kBAAmBnQ,EAAKM,QAE3DtD,KAAK2O,WAAWlB,UAChBzN,KAAK2O,WAAWlB,QAAQsB,YAAc,GAClC/O,KAAK2O,WAAWlB,QAAQuB,UAAUC,IAAI,eACpCjP,KAAK2O,WAAWlB,QAAQuB,UAAUtK,OAAO,kBAtB3D,yCAgCuB0G,GAAY,IACnBpI,EAAShD,KAAKC,MAAd+C,KACJoI,EAAUpI,OAASA,GACvBhD,KAAKD,SAAS,CAAEmT,UAAWlQ,EAAKM,MAAO6P,kBAAmBnQ,EAAKM,UAnCvE,+BAuHc,IAAD,SACsDtD,KAAKC,MAAxD+C,EADH,EACGA,KAAMuC,EADT,EACSA,KAAMI,EADf,EACeA,QAASsO,EADxB,EACwBA,aAAcZ,EADtC,EACsCA,YADtC,EAEiCrT,KAAKN,MAAnCuT,EAFH,EAEGA,WAAYD,EAFf,EAEeA,cACpB,OACI,eAAC,WAAD,WACI,qBAAK1S,UAAS,UAAK2S,GAAc,gBAAkBvS,QAASV,KAAK6T,eACjE,cAAC,KAAD,CACIK,YAAalR,EAAKC,GAClBkR,MAAOxO,EACPyO,eAAgBnB,EAHpB,SAKK,SAACoB,EAAUC,GAAX,yBACG,8DACQD,EAASE,gBACTF,EAASG,iBAFjB,IAGInG,IAAKgG,EAASI,SAHlB,SAKI,kDAAS,EAAKb,qBAAd,IAAmCtT,UAAS,uBAAkBgU,EAASI,YAAc,SAAzC,YAAqDzB,GAAc,aAAnE,YAAmF,EAAKhT,MAAMK,WAAaI,QAAS,EAAKgT,cAArK,WACK,UAAC1Q,EAAK2R,mBAAN,aAAC,EAAkBxQ,QAChB,qBAAK7D,UAAU,cAAcwF,MAAO,CAAEyC,gBAAgB,OAAD,OAASvF,EAAK2R,YAAYzQ,OAAO,GAAG,GAApC,QAEnD,IAEL,UAAAlB,EAAKgC,cAAL,eAAab,QAAS,sBAAK7D,UAAU,kCAAf,UACnB,qBAAKA,UAAU,wBAAf,SACK0C,EAAKgC,OAAO2B,KAAI,SAAAzB,GACb,OACI,qBAAKxE,QAAS,SAACyG,GACXA,EAAGI,kBACH0M,KACDnO,MAAO,CAAEwI,gBAAiBpJ,EAAMtC,OAAwBtC,UAAS,qBAAgB+S,GAAe,QAAU/P,MAAO4B,EAAM5B,MAH1H,SAGkI+P,EAAcnO,EAAM5B,MAAQ,IAA7G4B,EAAMjC,SAMnE,sBAAK3C,UAAU,qBAAf,UACK0S,GAAiB,cAAC,KAAD,CAAU1S,UAAU,YAAYI,QAAS,EAAKmT,eAC/DZ,GAAc,cAAC,GAAD,6BACP,EAAKhT,OADE,IAEX0O,WAAY,EAAKA,WACjB3L,KAAMA,EACNuC,KAAMA,EACNsO,aAAc,EAAKA,sBAEtB,GACT,sBAAKvT,UAAU,yCAAf,UAGI,cAAC,KAAD,CACIwF,MAAO,CAAElD,MAAO2C,EAAKO,MAAMxC,MAAMyC,SACjC6O,KAAM,EAAKlV,MAAMwT,UACjB2B,UAAW5B,EACXlJ,SAAU,EAAKiD,aACf1M,UAAU,uBAGb,UAAC0C,EAAKgC,cAAN,aAAC,EAAab,SAAU,sBAAK7D,UAAU,qBAAf,WACnB0S,GAAiBC,IACf,cAAC,KAAD,CAAU3S,UAAU,YAAYI,QAAS,EAAKmT,eACjDZ,GAAc,cAAC,GAAD,6BAAc,EAAKhT,OAAnB,IAA0B+C,KAAMA,EAAM2L,WAAY,EAAKA,WAAYpJ,KAAMA,EAAMsO,aAAc,EAAKA,sBAGxH,EAAKiB,mBACF,sBAAKxU,UAAU,qDAAf,UACI,sBAAKA,UAAU,2CAAf,UACK0C,EAAK+R,aAAe,cAAC,KAAD,CAAmBzU,UAAU,iDACjD,UAAA0C,EAAKgS,kBAAL,eAAiB7Q,QAAS,sBAAK7D,UAAU,oBAAf,UAAmC,cAAC,KAAD,CAAWA,UAAU,oBAAqB,EAAK2U,oBAAlF,IAAwG,EAAKC,mBAAyB,GAChKlS,EAAKuP,QAAU,sBAAKjS,UAAS,6CAAwC0C,EAAKuP,QAAQC,OAAS,WAAa,IAAzF,UAA+F,cAAC,KAAD,CAAalS,UAAU,oBAAoB,gCAAM8Q,aAAO,IAAI3O,KAAJ,OAASO,QAAT,IAASA,GAAT,UAASA,EAAMuP,eAAf,aAAS,EAAe/P,WAAY,OAAjD,IAA0D4O,aAAO,IAAI3O,KAAJ,OAASO,QAAT,IAASA,GAAT,UAASA,EAAMuP,eAAf,aAAS,EAAe/P,WAAY,WAAoB,GAClRQ,EAAKmS,UAAY,cAAC,KAAD,CAAa7U,UAAU,gDAE5C,UAAA0C,EAAKoH,eAAL,eAAcjG,QACX,qBAAKkK,IAAK,EAAKM,WAAYrO,UAAU,yBAArC,SACK0C,EAAKoH,QAAQzD,KAAI,SAAAmC,GAAY,OAAO,cAACD,GAAD,CAAiCC,OAAQA,GAApBA,EAAOtC,UAEnE,MAIbyM,GAAc,wBAAQ3S,UAAU,wBAAwBI,QAAS,EAAKsT,YAAxD,mCAtM/C,wCA4C6B,IAAD,MACZhR,EAAShD,KAAKC,MAAd+C,KACR,OAAOA,EAAK+R,cAAL,UAAoB/R,EAAKgS,kBAAzB,aAAoB,EAAiB7Q,SAAUnB,EAAKuP,UAApD,UAA+DvP,EAAKmS,gBAApE,aAA+D,EAAehR,UAA9E,UAAwFnB,EAAKoH,eAA7F,aAAwF,EAAcjG,UA9CrH,sCAqFQ,OAFiBnE,KAAKC,MAAd+C,KACcgS,WAAWI,QAAO,SAACC,EAAKC,GAAgB,OAAOD,EAAMC,EAAUC,MAAMpR,SAAU,KApF7G,0CAwF+B,IACfnB,EAAShD,KAAKC,MAAd+C,KACJwS,EAAY,GAKhB,OAJAxS,EAAKgS,WAAWnO,SAAQ,SAAAyO,GACpB,IAAMG,EAAqBH,EAAUC,MAAMpW,QAAO,SAAAuW,GAAI,OAAIA,EAAKlD,UAC/DgD,EAAS,sBAAOA,GAAP,YAAqBC,OAE3BD,EAAUrR,WA/FzB,GAAkCxD,aAmN5BC,GAAqB,CACvBwL,cACAuH,sBT9KG,SAA+BjO,EAASC,GAC3C,8CAAO,WAAMpG,GAAN,SAAA/B,EAAA,sDACH,IAKI+B,EAJe,CACXC,KAAM,yBACNkG,UAASC,YAIjB,MAAO0G,GACHlQ,QAAQC,IAAI,yCAA0CiQ,GATvD,2CAAP,uDS8KAJ,gBAWS0J,GAAc7U,aARH,SAAApB,GACpB,MAAO,CACHkW,WAAYlW,EAAMsB,aAAa4U,WAC/B7U,cAAerB,EAAMsB,aAAaD,cAClCqE,MAAO1F,EAAMsB,aAAa8K,aAIkBlL,GAAzBE,CAA6CI,YAAW6R,KChP5E,SAAS/L,KAA8B,IAAf8L,EAAc,uDAAN,KACnC,8CAAO,WAAMvT,GAAN,SAAA/B,EAAA,sDACH,IACI+B,EAAS,CAAEC,KAAM,mBAAoBsT,YACvC,MAAOzG,GACLlQ,QAAQC,IAAI,iCAAkCiQ,GAJ/C,2CAAP,sDCIG,IAAMwJ,GAAb,4MACInW,MAAQ,CACJoW,WAAY,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,YAFlG,EAKIC,eAAiB,SAACnT,GAAW,IAAD,kBACqB,EAAK3C,OAA1CmF,EADgB,EAChBA,MAAOM,EADS,EACTA,QAASuG,EADA,EACAA,YACxB7G,EAAMI,MAAME,GAASI,MAAMxC,MAAMyC,QAAUnD,EAC3CqJ,EAAY7G,IARpB,EAWI8B,mBAAqB,WACjB,EAAKjH,MAAMiH,sBAZnB,uDAcc,IAAD,SACsDlH,KAAKC,MAAxD+V,EADH,EACGA,iBAAkBC,EADrB,EACqBA,aAAcjP,EADnC,EACmCA,eACxC,OACI,sBAAK1G,UAAU,uBAAuBI,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBAA1D,UACI,cAACR,GAAD,CAAezD,MAAM,eAAe0D,eAAgBA,IACpD,yBAAS1G,UAAU,kBAAnB,SACI,qBAAIA,UAAU,kCAAd,UACI,oBAAIA,UAAU,qCAAqCI,QAAS,SAACyG,GACzDH,IACAgP,EAAiB7O,IAFrB,yBAIA,oBAAI7G,UAAU,wCAAwCI,QAAS,SAACyG,GAC5DH,IACAiP,EAAa9O,IAFjB,4BAIA,oBAAI7G,UAAU,6BAAd,SAEI,qBAAKA,UAAU,mBAAf,SAAmCN,KAAKN,MAAMoW,WAAWnP,KAAI,SAAA/D,GACzD,OAAO,qBAAiBtC,UAAU,oBAAoBI,QAAS,kBAAM,EAAKqV,eAAenT,IAAQkD,MAAO,CAAEwI,gBAAiB1L,IAA1GA,sBAhCjD,GAAkCjC,aA2CrBuV,GAAczO,aAAeoO,ICvC7BM,GAAb,4MACIzW,MAAQ,CACJ4D,MAAO,GACP8S,mBAAmB,GAH3B,EAMIC,eAAiBpI,IAAMC,YAN3B,EAaIjC,YAbJ,uCAakB,WAAO7G,GAAP,SAAA5H,EAAA,sEACJ,EAAKyC,MAAMgM,YAAY7G,GADnB,2CAblB,wDAiBIkR,kBAAoB,CAChBvM,SAAU,SAAC5C,GAAQ,IAAD,EACUA,EAAGsC,OAAnBR,EADM,EACNA,KAAM/M,EADA,EACAA,MACd,EAAK6D,SAAL,gBAAiBkJ,EAAO/M,KAE5Bqa,OAAQ,YAAiB,IAAd9M,EAAa,EAAbA,OACDrE,EAAK,gBAAQ,EAAKnF,MAAMmF,OACtBG,EAAS,EAAKtF,MAAdsF,KACFG,EAAUpB,EAAaM,eAAeQ,EAAOG,EAAKtC,IACxDmC,EAAMI,MAAME,GAAS+D,EAAOR,MAAQQ,EAAOvN,MAC3CuN,EAAO3D,MAAMwI,gBAAkB/I,EAAKO,MAAMxC,MAAMyC,QAChD0D,EAAO3D,MAAMlD,MAAQ,OACrB,EAAK3C,MAAMgM,YAAY7G,IAE3BoR,QAAS,YAAiB,IAAd/M,EAAa,EAAbA,OACRA,EAAO3D,MAAMwI,gBAAkB,OAC/B7E,EAAO3D,MAAMlD,MAAQ,UACrB6G,EAAO3D,MAAM2Q,aAAe,QAlCxC,EAsCIC,iBAAmB,CACfvO,aAAc,YAAiB,IAAdsB,EAAa,EAAbA,OACLlE,EAAS,EAAKtF,MAAdsF,KACFQ,EAAUtE,EAAY8B,aAAagC,EAAKO,MAAMxC,MAAMyC,QAAS,IACnE0D,EAAO3D,MAAMwI,gBAAkBvI,GAEnCqC,aAAc,YAAgB,EAAbqB,OACN3D,MAAMwI,gBAAkB,gBA7C3C,EAgDIqI,aAAe,SAACxP,GACZA,EAAGsD,iBACH,EAAK4L,eAAe5I,QAAQmJ,QAlDpC,EAqDIC,oBAAsB,SAAC1P,GACnBhL,QAAQC,IAAI,0BAA2B+K,EAAGI,iBAC1C,EAAKxH,SAAS,CAAEqW,mBAAoB,EAAK1W,MAAM0W,qBAvDvD,EA0DIlP,mBAAqB,SAAAC,GACjB,EAAKpH,SAAS,CAAEqW,mBAAmB,KA3D3C,kEAQyB,IACT9S,EAAUtD,KAAKC,MAAfqD,MACRtD,KAAKD,SAAS,CAAEuD,YAVxB,+BA8Dc,IAAD,EAC4BtD,KAAKC,MAA9BsF,EADH,EACGA,KAAMmG,EADT,EACSA,eACN0K,EAAsBpW,KAAKN,MAA3B0W,kBACR,OAAK7Q,EAED,uBAAM8F,SAAUrL,KAAK2W,aACjBpL,aAAa,MACbjL,UAAU,+BACVwF,MAAO,CAAEwI,gBAAgB,GAAD,OAAK/I,EAAKO,MAAMxC,MAAMyC,UAHlD,UAII,mDACQ/F,KAAKsW,mBADb,IAEIxM,YAAY,mBACZuE,IAAKrO,KAAKqW,eACVna,MAAO8D,KAAKN,MAAM4D,MAClB2F,KAAK,WACT,sBAAK3I,UAAU,+BAAf,UACK,cAAC,KAAD,6BACON,KAAK0W,kBADZ,IAEGhW,QAASV,KAAK6W,oBAEdvW,UAAS,8BAAyBoL,GAAkB,YACvD0K,GAAqB,cAACF,GAAD,6BAAiBlW,KAAKC,OAAtB,IAA6BiH,mBAAoBlH,KAAKkH,4BAlBtE,cAACQ,GAAD,QAjE1B,GAAgC/G,aAkG1BC,GAAqB,CACvBqL,eACAjF,kBACAsF,kBAGSwK,GAAYhW,aAZD,SAAApB,GACpB,MAAO,CACH0F,MAAO1F,EAAMsB,aAAa8K,aAUgBlL,GAAzBE,CAA6CqV,IC5GzDY,GAAb,4MAEIrX,MAAQ,CACJsD,KAAM,CACFM,MAAO,GACPyR,YAAa,KALzB,EASI/H,aAAe,SAAA7F,GAAO,IAAD,EACOA,EAAGsC,OAAnBR,EADS,EACTA,KAAM/M,EADG,EACHA,MACd,EAAK6D,UAAS,SAAA8K,GAAS,MAAK,CAAE7H,KAAK,6BAAM6H,EAAU7H,MAAjB,mBAAwBiG,EAAO/M,SAXzE,EAcI8a,UAAY,SAAA7P,GACRA,EAAGsD,iBACHtD,EAAGI,kBAFW,IAGNvE,EAHM,gBAGQ,EAAKtD,OAAnBsD,KACAoC,EAJM,gBAIS,EAAKnF,OAApBmF,MACAG,EAAS,EAAKtF,MAAdsF,KACFG,EAAUpB,EAAaM,eAAeQ,EAAOG,EAAKtC,IACxDD,EAAKE,UAAYT,KAAKU,MACtBH,EAAKC,GAAKxB,EAAYa,SACjB8C,EAAMI,MAAME,GAASG,QACtBT,EAAMI,MAAME,GAASG,MAAQ,IAEjCT,EAAMI,MAAME,GAASG,MAAMiB,KAAK9D,GAChC,EAAKjD,SAAS,CACViD,KAAM,CACFM,MAAO,GACPyR,YAAa,MAElB,WACC,IAAMxO,EAAW,CAAEvD,QACnBuD,EAASxD,IAAT,6BAAqCC,EAAKM,MAA1C,oBAA2DiC,EAAKjC,OAChE,EAAKrD,MAAMgM,YAAY7G,EAAOmB,OAnC1C,4DAuC2C,IAA3BnB,EAA0B,uDAAlBpF,KAAKC,MAAMmF,MAC3BpF,KAAKC,MAAMgM,YAAY7G,KAxC/B,+BA2Cc,IAAD,EACsDpF,KAAKC,MAAxDyL,EADH,EACGA,eAAgBuL,EADnB,EACmBA,SAAUjQ,EAD7B,EAC6BA,eAAgBzB,EAD7C,EAC6CA,KAC1CvC,EAAShD,KAAKN,MAAdsD,KACR,OACI,uBAAM1C,UAAS,gBAAmB+K,SAAUrL,KAAKgX,UAAjD,UACI,uBAAO9a,MAAO8G,EAAKM,MAAO9D,KAAK,OAAO6O,IAAK4I,EAAUhO,KAAK,QAAQvI,QAAS,WAAQsG,EAAe,gBAAD,OAAiBzB,EAAKtC,MAAS8G,SAAU/J,KAAKgN,aAC3IlD,YAAavE,EAAKM,MAAM1B,OAAS,qBAAuB,eAAgBoH,aAAa,MAAMtI,GAAG,KAClG,qBAAK3C,UAAS,iCAA4BoL,GAAkB,gBAA5D,SACI,wBAAQpL,UAAS,6BAAjB,0BAnDpB,GAAmCK,aAiE7BC,GAAqB,CACvBqL,gBAGSiL,GAAepW,aAVJ,SAAApB,GACpB,MAAO,CACH0F,MAAO1F,EAAMsB,aAAa8K,aAQmBlL,GAAzBE,CAA6CiW,ICnE5DI,GAAb,4MACIzX,MAAQ,CACJgM,gBAAgB,EAChB0I,gBAAgB,GAHxB,EAMIgD,eAAiBnJ,IAAMC,YAN3B,EAQIjC,YARJ,sBAQkB,wCAAAzO,EAAA,6DAAO4H,EAAP,+BAAe,EAAKnF,MAAMmF,MAA1B,SACJ,EAAKnF,MAAMgM,YAAY7G,GADnB,2CARlB,EAYIiS,WAAa,WAAO,IACR9R,EAAS,EAAKtF,MAAdsF,KACAvC,EAAS,EAAKtD,MAAdsD,KACFoC,EAAK,gBAAQ,EAAKnF,MAAMmF,OACxBO,EAAUrB,EAAaO,eAAeU,EAAMvC,EAAKC,IACvDmC,EAAMI,MAAMK,MAAMF,GAAW3C,EAC7B,EAAKiJ,eAlBb,EAqBIqL,uBAAyB,CACrBrB,aAAc,WACV,IAAMvQ,EAAU,EAAKA,QADL,kBAEoB,EAAKzF,OAAjCmF,EAFQ,EAERA,MAAO6G,EAFC,EAEDA,YACT1F,EAAW,CAAExD,IAAI,oBAAD,OAAsBqC,EAAMI,MAAME,GAASpC,QACjE8B,EAAMI,MAAMsH,OAAOpH,EAAS,GAC5BuG,EAAY7G,EAAOmB,IAGvByP,iBAAkB,SAAA7O,GACdA,EAAGI,kBACH,EAAKtH,MAAM+G,eAAX,uBAA0C,EAAK/G,MAAMsF,KAAKtC,KAC1D,EAAKlD,SAAS,CAAE2L,gBAAiB,EAAKhM,MAAMgM,iBAAkB,WAC1D,EAAK0L,eAAe3J,QAAQC,aAlC5C,EA6CI6J,eAAiB,SAACC,GACd,EAAKzX,SAAS,CAAEqU,gBAAiBoD,IACjCrb,QAAQC,IAAI,cAAe,EAAKsD,MAAM0U,iBA/C9C,uDAkDc,IAAD,SACkCpU,KAAKC,MAApCsF,EADH,EACGA,KAAM4K,EADT,EACSA,YAAazK,EADtB,EACsBA,QACnBG,EAAUN,EAAVM,MAER,OACI,cAAC,KAAD,CAAWqO,YAAa3O,EAAKtC,GAAIkR,MAAOzO,EAAS0O,eAAgBpU,KAAKN,MAAM0U,eAA5E,SAEK,SAACC,EAAUC,GAAX,OACG,4DACIxO,MAAO,CAAEwI,gBAAiB/I,EAAKO,MAAMC,SACrCzF,UAAS,wCAAmCgU,EAASI,YAAc,SAA1D,OACLL,EAASG,iBACTH,EAASE,gBAJjB,IAKIlG,IAAKgG,EAASI,SALlB,UAOI,cAACqC,GAAD,0CACQzC,EAASG,iBACT,EAAKvU,OACL,EAAKqX,yBAGb,qBAAKhX,UAAU,0BAAf,SACI,cAAC,KAAD,CAAWmX,YAAalS,EAAKtC,GAAIzD,KAAK,OAAtC,SACK,SAAA6U,GAAQ,OACL,gDAAKhG,IAAKgG,EAASI,UAAcJ,EAASqD,gBAA1C,IAA0DpX,UAAU,cAAcwF,MAAO,CAAE6R,SAAU,IAAKC,UAAW,OAArH,UAEK/R,EAAQA,EAAMc,KAAI,SAAC3D,EAAM6U,GAAP,OAAe,cAAClC,GAAD,2BAA2BhQ,QAASkS,GAAS,EAAK5X,OAAlD,IAAyD6T,WAAY,EAAKyD,eAAgBvU,KAAMA,EAAM1C,UAAYuX,IAAQhS,EAAM1B,OAAS,GAAM,eAA7HnB,EAAKC,OAA4I,GAEpMoR,EAASvK,qBAK1B,cAACoN,GAAD,6BAAkB,EAAKjX,OAAvB,IAA8BgX,SAAU,EAAKG,eAAgB1L,eAAgByE,IAAW,uBAAqB5K,EAAKtC,IAAM+S,iBAAkB,EAAKA,6BAnFvK,8BAuCmB,IAAD,EACchW,KAAKC,MAArBsF,EADE,EACFA,KAAMH,EADJ,EACIA,MAEd,OADgBd,EAAaM,eAAeQ,EAAOG,EAAKtC,QAzChE,GAA8BtC,aCGjBmX,GAAb,4MACIpY,MAAQ,CACJoW,WAAY,CAAC,UAAW,UAAW,UAAW,UAAW,WACzDiC,UAAW,CACPzU,MAAO,GACPuC,MAAO,GACPC,MAAO,CACHC,QAAS,GACTzC,MAAO,CAAEyC,QAAS,MAG1BsN,aAAa,GAXrB,EAcIgD,eAAiBpI,IAAMC,YAd3B,EAgBI+F,aAAe,WAAwC,IAAvCuD,EAAsC,wDAA3B,EAAK9X,MAAM2T,YAClC,EAAKtT,SAAS,CAAEsT,YAAamE,KAjBrC,EAoBIQ,gBAAkB,CACdtX,QAAS,SAACyG,GACNA,EAAGI,kBACH,EAAK8O,eAAe5I,QAAQC,SAE5B1G,EAD2B,EAAK/G,MAAxB+G,gBACO,aAEnBqE,SAAU,SAAAlE,GACNA,EAAGsD,iBADS,sBAEwB,EAAKxK,OAAjCmF,EAFI,EAEJA,MAAO6G,EAFH,EAEGA,YACP8L,EAHI,gBAGe,EAAKrY,OAAxBqY,UACFE,EAAe7S,EAAMI,MAAMrB,OAC7B+T,EAAY,EAAKxY,MAAMoW,WAAWmC,GACjCC,IAAWA,EAAYzW,EAAYkB,kBACxCoV,EAAU9U,GAAKxB,EAAYa,SAC3ByV,EAAUjS,MAAMxC,MAAMyC,QAAUmS,EAChCH,EAAUjS,MAAMC,QAAUgS,EAAUjS,MAAMxC,MAAMyC,QAAU,KAC1DX,EAAMI,MAAMsB,KAAKiR,GACjB,EAAKhY,SAAS,CACVgY,UAAW,CACPzU,MAAO,GACPuC,MAAO,GACPC,MAAO,CACHxC,MAAO,CAAEyC,QAAS,QAK9BkG,EAAY7G,EADG,CAAErC,IAAI,mBAAD,OAAqBgV,EAAUzU,MAA/B,uBA/ChC,EAoDI0J,aAAe,YAAiB,IAAdvD,EAAa,EAAbA,OACNR,EAAgBQ,EAAhBR,KAAM/M,EAAUuN,EAAVvN,MACd,EAAK6D,UAAS,SAAA8K,GAAS,MAAK,CAAEkN,UAAU,6BAAMlN,EAAUkN,WAAjB,mBAA6B9O,EAAO/M,SAtDnF,EA4DIic,UAAY,SAACxa,GAAS,IACVya,EAA8Bza,EAA9Bya,YAAaC,EAAiB1a,EAAjB0a,OAAQ7Y,EAAS7B,EAAT6B,KAE7B,GAAK4Y,IAGDA,EAAYX,cAAgBY,EAAOZ,aACnCW,EAAYjE,QAAUkE,EAAOlE,OAFjC,CAKA,IAAMhJ,EAAS,gBAAQ,EAAKlL,MAAMmF,OAE5BmB,EAAW,GACjB,GAAa,SAAT/G,EAAiB,CAEjB,IAAM8Y,EAAgBhU,EAAaM,eAAeuG,EAAWkN,EAAOZ,aAC9Dc,EAAqBjU,EAAaM,eAAeuG,EAAWiN,EAAYX,aACxEzU,EAAOmI,EAAU3F,MAAM8S,GAAezS,MAAMiH,OAAOuL,EAAOlE,MAAO,GACvEhJ,EAAU3F,MAAM+S,GAAoB1S,MAAMiH,OAAOsL,EAAYjE,MAAO,EAAGnR,EAAK,IAE5E,IAAMwV,EAAiBrN,EAAU3F,MAAM8S,GAAehV,MAChDmV,EAAsBtN,EAAU3F,MAAM+S,GAAoBjV,MAChEiD,EAASxD,IAAT,oBAA4BC,EAAK,GAAGM,MAApC,iBAAkDkV,EAAlD,eAAuEC,OAEpE,CAEH,IAAMlT,EAAO4F,EAAU3F,MAAMsH,OAAOuL,EAAOlE,MAAO,GAClDhJ,EAAU3F,MAAMsH,OAAOsL,EAAYjE,MAAO,EAAG5O,EAAK,IAElDgB,EAASxD,IAAT,yBAAiCwC,EAAK,GAAGjC,OAK7C,EAAKrD,MAAMgM,YAAYd,EAAW5E,KA9F1C,uDAmGc,IAAD,SAC2CvG,KAAKC,MAA7CmF,EADH,EACGA,MAAO+K,EADV,EACUA,YAAauI,EADvB,EACuBA,gBACpBlT,EAAUJ,EAAVI,MACFmT,EAAiC,aAAhBxI,EAHlB,EAI8BnQ,KAAKN,MAAhCqY,EAJH,EAIGA,UAAW1E,EAJd,EAIcA,YACnB,OAAKjO,EAED,qBAAK9E,UAAS,6BAAwBoY,GAAmB,mBAAqB5S,MAAO,CAAE8B,OAAQ,QAA/F,SAEI,cAAC,KAAD,CAAiBuQ,UAAWnY,KAAKmY,UAAjC,SACI,cAAC,KAAD,CACIV,YAAY,cACZmB,UAAU,aACVpZ,KAAK,OAHT,SAKK,SAAA6U,GAAQ,OACL,+CACI/T,UAAU,iCACN+T,EAASqD,gBAFjB,IAGIrJ,IAAKgG,EAASI,SAHlB,UAKKjP,EAAMmB,KAAI,SAACpB,EAAMsS,GAAP,OACP,cAAC,GAAD,cACI5D,aAAc,EAAKA,aACnBZ,YAAaA,EACC9N,KAAMA,EAAMG,QAASmS,EACnCvU,MAAOiC,EAAKjC,OAAW,EAAKrD,OADvBsF,EAAKtC,OAIjBoR,EAASvK,YAGV,oBAAIxJ,UAAU,2CAAd,SAEI,mDAAU,EAAK0X,iBAAf,IAAgC1X,UAAS,qCAAgCqY,GAAiB,QAA1F,UACI,sBAAKrY,UAAU,kCAAf,WACMqY,GAAiB,cAAC,KAAD,IACnB,uBAAOnZ,KAAK,OAAOtD,MAAO6b,EAAUzU,MAAOhD,UAAU,iBAAiBwJ,YAAY,eAAeb,KAAK,QAAQsC,aAAa,MAAM8C,IAAK,EAAKgI,eAAgBtM,SAAU,EAAKiD,kBAG9K,wBAAQxN,KAAK,SAASc,UAAS,mCAA8BqY,GAAiB,QAA9E,uCAnCb,cAACjR,GAAD,QAxG3B,GAA4B/G,aAkKtBC,GAAqB,CACvBqL,gBAGS4M,GAAQ/X,aAVG,SAAApB,GACpB,MAAO,CACHyQ,YAAazQ,EAAMoZ,eAAe3I,eAQIvP,GAAzBE,CAA6CgX,I,qBC7K5DiB,G,4MAEFrZ,MAAQ,CACJsZ,QAAQ,G,EAGZ9R,mBAAqB,WACjB,EAAKnH,SAAS,CAAEiZ,QAAQ,K,EAG5BC,aAAe,WAAqB,IAApBzB,IAAmB,yDAC/B,EAAKzX,SAAS,CAAEiZ,OAAQxB,K,uDAGlB,IACCwB,EAAUhZ,KAAKN,MAAfsZ,OACP,OACI,sBAAK1Y,UAAS,yCAAoC0Y,GAAU,QAA5D,UACI,uBAAOxZ,KAAK,OAAOyJ,KAAK,MAAM3I,UAAU,gBAAgBuU,UAAWmE,EAAQzN,aAAa,QACxF,cAAC,KAAD,CAAY7K,QAASV,KAAKiZ,aAAc3Y,UAAU,uB,GAnBvCK,aAyBduY,GAAczR,aAAesR,ICzB7BI,GAAb,4MACIzZ,MAAQ,CACJyG,cAAe,IAFvB,EAUIiT,mBAAqB,SAACC,GAAoB,IAC9BlT,EAAkB,EAAKzG,MAAvByG,cACFmT,EAAkBnT,EAAclB,WAAU,SAAAsU,GAAY,OAAIA,EAAatW,KAAOoW,KACpFlT,EAAc2G,OAAOwM,EAAiB,GACtC,EAAKvZ,SAAS,CAACoG,mBAdvB,kEAMQ,IAAMA,EAAgB7B,EAAa0B,mBACnChG,KAAKD,SAAS,CAAEoG,oBAPxB,+BAgBc,IAAD,OACGA,EAAkBnG,KAAKN,MAAvByG,cADH,EAE6BnG,KAAKC,MAA/BmF,EAFH,EAEGA,MAAO4B,EAFV,EAEUA,eAEf,OAAKb,EAED,sBAAK7F,UAAU,mCAAmCI,QAAS,SAAAyG,GAAE,OAAIA,EAAGI,mBAApE,UACI,cAACR,GAAD,CAAezD,MAAM,gBAAgB0D,eAAgBA,IACrD,sBAAK1G,UAAU,0CAAf,UACI,sBAAMA,UAAU,WAAhB,sBACA,sBAAMA,UAAU,mBAAhB,iCAEJ,yBAASA,UAAU,8BAAnB,SACI,qBAAIA,UAAU,kCAAd,UACI,oBAAIA,UAAU,yBAAd,gCACC6F,EAAcQ,KAAI,SAAA4S,GACf,OAAO,qBAA0BjZ,UAAU,iCAApC,UACH,qBAAKA,UAAU,sBAAsBgD,MAAM,YAA3C,SACI,uBAAO9D,KAAK,WAAWc,UAAS,6BAAgCyJ,SAAU,WAAQ,EAAKqP,mBAAmBG,EAAatW,SAE3H,sBAAK3C,UAAU,uBAAf,UACI,sBAAKA,UAAU,qEAAf,UACI,sBAAMA,UAAU,yCAAhB,SAA0DiZ,EAAaxW,MACvE,qBAAKzC,UAAU,0CAAf,SACI,+BAAO8E,EAAM9B,aAGrB,qBAAKhD,UAAU,4BAAf,oLAXQiZ,EAAatW,eAZtB,gDApBnC,GAAyCtC,a,8FCJlC,SAAS6Y,GAAT,GAAmE,IAAzCC,EAAwC,EAAxCA,YAAaC,EAA2B,EAA3BA,gBAAiBC,EAAU,EAAVA,OAC3D,OACI,sBAAKrZ,UAAU,4BAAf,UACI,wBAAQA,UAAU,cAAcI,QAASiZ,EAAzC,qBACA,oBAAIrZ,UAAU,gDAAd,SACKmZ,EAAY9S,KAAI,SAAA6B,GACb,OAAO,qBAAc9H,QAAS,kBAAMgZ,EAAgBlR,IAAKlI,UAAU,mBAAmBwF,MAAO,CAAEyC,gBAAiBC,IAA/FA,WCG9B,IAAMoR,GAAb,4MACIla,MAAQ,CACJma,UAAW,GACXC,YAAa,WACbzP,IAAK,IAJb,EAWIK,QAXJ,sBAWc,4BAAAlN,EAAA,sEACYmL,GAAaC,eADzB,OACAyB,EADA,OAEN,EAAKtK,SAAS,CAAEsK,QAAO,WACnBlO,QAAQC,IAAI,gBAAiB,EAAKsD,MAAM2K,QAHtC,2CAXd,EAkBIqP,gBAAkB,SAAClR,GAAQ,IAAD,kBACc,EAAKvI,OAAjCmF,EADc,EACdA,MAAO6G,EADO,EACPA,YACf7G,EAAMU,MAAM0C,GAAKA,EACjByD,EAAY7G,IArBpB,EAuBI2U,WAAa,SAACzU,GACV,IAAMC,EAAOjB,EAAa8B,gBAAgB,EAAKnG,MAAMmF,MAAOE,GAC5D,EAAKrF,MAAMG,QAAQ0G,KAAnB,iBAAkC,EAAK7G,MAAMmF,MAAMoB,IAAnD,YAA0DjB,EAAKtC,GAA/D,YAAqEqC,KAzB7E,EA4BI0U,gBAAkB,SAACC,GACf,EAAKla,SAAS,CAAE+Z,YAAaG,KA7BrC,kEAQQja,KAAK0K,YARb,+BAgCc,IAAD,OACG1D,EAAmBhH,KAAKC,MAAxB+G,eAEFkT,EAHD,gBAEkBla,KAAKC,OAApBmF,MACF8U,WACAvB,EAA2C,kBAA3B3Y,KAAKC,MAAMkQ,YAJ5B,EAKwBnQ,KAAKN,MAA1Boa,EALH,EAKGA,YAAazP,EALhB,EAKgBA,IACrB,OACI,sBAAK/J,UAAS,wBAAmBqY,GAAiB,QAAUjY,QAAS,SAAAyG,GAAQA,EAAGI,mBAAhF,UACI,cAACR,GAAD,CAAezD,MAAM,OAAO0D,eAAgBA,IAGvB,aAAhB8S,GAA8B,0BAASxZ,UAAU,kDAAnB,UAC3B,wBAAQA,UAAU,8BAA8BI,QAAS,WAAQ,EAAKsZ,gBAAgB,eAAtF,+BACA,oBAAI1Z,UAAU,kCAAd,SACK4Z,EAAWvT,KAAI,SAAAJ,GACZ,OAAO,qBAAsBjG,UAAU,4BAAhC,UACH,cAACuI,GAAD,CAAgBC,OAAQvC,EAASnD,WACjC,sBAAK9C,UAAU,eAAf,UACI,uBAAMA,UAAU,cAAhB,UAA+BiG,EAASnD,SAAS/D,SAAjD,OACA,uBAAMiB,UAAU,MAAhB,UACKiG,EAASxD,IADd,IACoBwD,EAASvD,MAAQ,sBAAM1C,UAAU,aAAaI,QAAS,WAAQ,EAAKqZ,WAAWxT,EAASvD,KAAKC,KAA5E,SAAoFsD,EAASvD,KAAKM,WACvI,qBAAKhD,UAAU,cAAf,SACK6Z,aAAoB,IAAI1X,KAAK8D,EAASrD,WAAY,CAAEkX,WAAW,WAP5D7T,EAAStD,YAiBpB,eAAhB6W,GAAgC,cAACN,GAAD,CAAgBG,OAAQ,WAAK,EAAKK,gBAAgB,aAAcP,YAAapP,EAAKqP,gBAAiB1Z,KAAK0Z,yBAhE7J,GAA8B/Y,aCEjB0Z,GAAb,4MAEI3a,MAAQ,CACJ4a,eAAgB,GAHxB,EAOIC,qBAAuB,SAAChB,GACpB,EAAKxZ,SAAS,CAAEua,eAAgB,EAAK5a,MAAM4a,eAAiB,IAAK,gBARzE,uDAWc,IAAD,SACyFta,KAAKC,MAA3FmF,EADH,EACGA,MAAO4B,EADV,EACUA,eAAgBmJ,EAD1B,EAC0BA,YAAaqK,EADvC,EACuCA,kBAAmBla,EAD1D,EAC0DA,UAAWoY,EADrE,EACqEA,gBAClEtO,EAAYhF,EAAZgF,QACAkQ,EAAmBta,KAAKN,MAAxB4a,eACF3B,EAAgC,yBAAhBxI,EAEtB,OACI,qCACI,yBAAQ7P,UAAS,qCAAgCA,GAAjD,UACKoY,GAAmB,cAAC,KAAD,CAAepY,UAAU,eAAeI,QAAS,kBAAM8Z,OAC3E,qBAAKla,UAAU,cAAf,SAA8B8E,EAAM9B,QACpC,qBAAKhD,UAAU,2BAAf,SACK8J,EAAQzD,KAAI,SAAAmC,GACT,OAAO,qBAAsBxI,UAAU,2BAAhC,SAEH,cAACuI,GAAD,CAAgBC,OAAQA,KAFXA,EAAOtC,UAOhC,qBAAIlG,UAAU,4BAAd,UACI,oBAAIA,UAAU,yBAAd,SAAuC,cAAC4Y,GAAD,MACvC,oBAAI5Y,UAAS,sCAAiCga,GAAkB,UAAhE,SACI,cAAC,KAAD,CAAmB5Z,QAAS,SAAAyG,GACxBA,EAAGI,kBACH,EAAKxH,SAAS,CAAEua,eAAgB,IAChCtT,EAAe,6BAGvB,oBAAI1D,MAAM,YAAV,SACI,cAAC,KAAD,CACIhD,UAAU,iBACVI,QAAS,kBAAM8Z,SAGvB,oBAAIlX,MAAM,WAAV,SAAqB,cAAC,KAAD,CAAuBhD,UAAU,qBAAqBI,QAAS,SAAAyG,GAChFA,EAAGI,kBACHP,EAAe,4BAI1B2R,GAEG,cAAC,GAAD,gBAAyB3Y,KAAKC,QAClC,cAAC,GAAD,gBAAcD,KAAKC,eAvDnC,GAAiCU,a,UCApB8Z,GAAb,4MACI/a,MAAQ,CACJgb,mBAAmB,GAF3B,EAMIC,qBAAuB,WACnB,EAAK5a,SAAS,CAAE2a,mBAAoB,EAAKhb,MAAMgb,qBAPvD,EAUIE,kBAAoB,SAAClV,EAASC,EAASwB,GAAQ,IAAD,EACK,EAAKlH,MAA5C6L,EADkC,EAClCA,UAAWG,EADuB,EACvBA,YAAatN,EADU,EACVA,KAAMqE,EADI,EACJA,KAChCmI,EAAY+B,qBAAUpB,GACtB+O,EAAc1P,EAAU3F,MAAME,GAASG,MAAMF,GAAS4M,QAC5DsI,EAAYrI,OAASrL,EAAGsC,OAAOqR,QAY/B7O,EAAYd,EALK,CACbxM,OACAoE,IAPA8X,EAAYrI,OACN,kCAEA,oCAKNxP,UAxBZ,uDA8Bc,IAAD,iBAC4ChD,KAAKC,MAA9C6L,EADH,EACGA,UAAWiP,EADd,EACcA,WAAYC,EAD1B,EAC0BA,cAD1B,EAEsBhb,KAAKC,MAAM6R,MAAMC,OAApC1M,EAFH,EAEGA,OAAQC,EAFX,EAEWA,OAFX,EAGwBhB,EAAaa,sBAAsB2G,EAAWzG,EAAQC,GAA3EI,EAHH,EAGGA,QAASC,EAHZ,EAGYA,QACXJ,EAAOuG,EAAUtG,MAAME,GACvB1C,EAAO8I,EAAUtG,MAAME,GAASG,MAAMF,GACpC+U,EAAsB1a,KAAKN,MAA3Bgb,kBACR,OACI,qBAAKpa,UAAU,eAAf,SACI,sBAAKA,UAAU,OAAOwF,MAAO,CAAE6K,SAAU,QAAzC,WAES,OAAJ3N,QAAI,IAAJA,GAAA,UAAAA,EAAMoH,eAAN,eAAejG,SAAU,sBAAK7D,UAAU,cAAf,UACtB,yCACA,sBAAKA,UAAU,gCAAf,UAEK0C,EAAKoH,QAAQzD,KAAI,SAAAmC,GACd,OAAO,qBAAsBxI,UAAU,kBAAhC,SAEH,cAACuI,GAAD,CAAgBC,OAAQA,KAFXA,EAAOtC,QAK5B,sBAAKlG,UAAU,gCAAgCgD,MAAM,aAArD,UACK,cAAC,KAAD,CAAS5C,QAASV,KAAK2a,qBAAsB7U,MAAO,CAAE8B,OAAQ,UAC9D8S,GAAqB,cAAC,GAAD,CAAsBtV,MAAO0G,EAAWvG,KAAMA,EAAMvC,KAAMA,EAAMgE,eAAgBhH,KAAK2a,qBAAsBM,YAAajb,KAAKC,MAAMgb,YACrJC,YAAalb,KAAKC,MAAMib,YACxBjP,YAAajM,KAAKC,MAAMgM,wBAKvC,UAACjJ,EAAKgC,cAAN,aAAC,EAAab,QAAU,sBAAK7D,UAAU,4BAAf,UACrB,wCACA,sBAAKA,UAAU,mBAAf,UACK0C,EAAKgC,OAAO2B,KAAI,SAAAzB,GACb,OAAO,sBAAMxE,QAAS,kBAAMsa,EAAc,WAA0B1a,UAAU,sDAAsDwF,MAAO,CAAEwI,gBAAiBpJ,EAAMtC,OAA7J,SACH,sBAAMtC,UAAU,cAAhB,gBAA+B4E,QAA/B,IAA+BA,OAA/B,EAA+BA,EAAO5B,SADgB4B,EAAMjC,OAIpE,sBAAK3C,UAAU,+BAA+BgD,MAAM,YAApD,UACK,cAAC,KAAD,CAAS5C,QAAS,kBAAMsa,EAAc,WAAWlV,MAAO,CAAE8B,OAAQ,UACnD,WAAfmT,GAA2B,cAACxM,GAAD,cAAevH,eAAgB,kBAAMgU,EAAc,MAAShb,KAAKC,iBAGhG,IACR,UAAA+C,EAAKuP,eAAL,eAAc/P,YAAa,sBAAKlC,UAAU,cAAf,UACxB,0CACA,sBAAKA,UAAU,iDAAf,UACI,uBAAMwF,MAAO,CAAE+K,WAAY,OAA3B,UACI,sBAAMvQ,UAAU,gBAAhB,SACI,uBAAOwa,QAAS9X,EAAKuP,QAAQC,OAAQzI,SAAU,SAAC5C,GAAD,OAAQ,EAAKyT,kBAAkBlV,EAASC,EAASwB,IAAK3H,KAAK,eAE7G2b,aAAc,OAACnY,QAAD,IAACA,GAAD,UAACA,EAAMuP,eAAP,aAAC,EAAe/P,UAAWC,KAAKU,UACnD,sBAAM7C,UAAS,yBAAoB0C,EAAKuP,QAAQC,QAAU,UAA1D,qCAlF5B,GAAsC7R,aAqGhCC,GAAqB,CACvBqL,gBAGSmP,GAAkBta,aAbP,SAAApB,GACpB,MAAO,CACHoM,UAAWpM,EAAMsB,aAAa8K,UAC9BmP,YAAavb,EAAMsB,aAAaia,YAChCC,YAAaxb,EAAMsB,aAAaka,eASgBta,GAAzBE,CAA6C2Z,IC3G/DY,GAAb,4MACI3b,MAAQ,CACJ+O,SAAU,GACV6M,eAAe,GAHvB,EAaI3Q,YAAc,YAAiB,IAAdlB,EAAa,EAAbA,OACPmB,EAAQnB,EAAOR,KACf/M,EAAQuN,EAAOvN,MACrB,EAAK6D,UAAS,SAAA8K,GACV,MAAO,CACH4D,SAAS,6BACF5D,EAAU4D,UADT,mBAEH7D,EAAQ1O,SApB7B,EA0BIqf,eAAiB,SAAC/D,GACd,EAAKzX,SAAS,CAAEub,cAAe9D,KA3BvC,EA8BIgE,WAAa,WACT,EAAKzb,SAAS,CAAE0O,SAAU,EAAKxO,MAAM+C,OAAQ,kBAAM,EAAKuY,gBAAe,OA/B/E,EAkCIE,gBAAkB,SAACtU,GAAQ,IAAD,EACE,EAAKlH,MAArBmF,EADc,EACdA,MAAOzG,EADO,EACPA,KADO,EAEK,EAAKsB,MAAM6R,MAAMC,OAApC1M,EAFc,EAEdA,OAAQC,EAFM,EAENA,OAFM,EAGOhB,EAAaa,sBAAsBC,EAAOC,EAAQC,GAAvEI,EAHc,EAGdA,QAASC,EAHK,EAGLA,QACb3C,EAAOkK,qBAAU,EAAKjN,MAAM+C,MAEhCA,EADiBkK,qBAAU,EAAKxN,MAAM+O,UAEtC,IAAMnB,EAAYJ,qBAAU9H,GAC5BkI,EAAU9H,MAAME,GAASG,MAAMF,GAAW3C,EAC1C,IAAMuD,EAAW,CACb5H,OACAoE,IAAI,8BACJC,QAEJ,EAAK/C,MAAMgM,YAAYqB,EAAW/G,GAClC,EAAKgV,gBAAe,IAjD5B,kEAOyB,IACTvY,EAAShD,KAAKC,MAAd+C,KACRhD,KAAKD,SAAS,CAAE0O,SAAUzL,MATlC,+BAoDc,IAAD,SACyBhD,KAAKC,MAAd+C,GADhB,EACGoC,MADH,EACUG,KADV,EACgBvC,MADhB,EAE+BhD,KAAKN,MAAjC+O,EAFH,EAEGA,SAAU6M,EAFb,EAEaA,cAClB,OACI,qBAAKhb,UAAU,sBAAf,SACI,sBAAKA,UAAU,sBAAf,UACI,cAAC,KAAD,CAAmBwF,MAAO,CAAE+B,SAAU,WAAY6T,KAAM,QAASC,IAAK,SACtE,oBAAIrb,UAAU,uBAAd,yBACE0C,EAAK+R,YACD,0BAAUzU,UAAU,gBAAgBwF,MAAO,CAAE8V,SAAU,OAAQC,WAAY,QAASjU,OAAQ,QAC1F1L,MAAOuS,EAASsG,YAChB9L,KAAK,cACL6S,WAAW,QACX/R,SAAU/J,KAAK2K,YACfoR,KAAK,IACLvF,QAAS,kBAAM,EAAK+E,gBAAe,IACnChF,OAAQ,kBAAM,EAAKkF,qBAErB,0BAAUnb,UAAU,gBAAgBwF,MAAO,CAAE8V,SAAU,OAAQC,WAAY,QAASjU,OAAQ,OAAQ0G,gBAAiB,qBACnHpS,MAAOuS,EAASsG,YAChBjL,YAAY,qCACZb,KAAK,cACL6S,WAAW,QACX/R,SAAU/J,KAAK2K,YACfoR,KAAK,IACLvF,QAAS,kBAAM,EAAK+E,gBAAe,IACnChF,OAAQ,kBAAM,EAAKkF,qBAG3B,sBAAKnb,UAAS,+CAA0Cgb,GAAiB,UAAzE,UACI,wBAAQ5a,QAASV,KAAKyb,gBAAiBnb,UAAU,cAAjD,kBACA,cAAC,KAAD,CAAWI,QAAS,kBAAM,EAAK8a,4BAnFvD,GAAsC7a,aAqGhCC,GAAqB,CACvBqL,gBAGS+P,GAAkBlb,aAbP,SAAApB,GACpB,MAAO,CACH0F,MAAO1F,EAAMsB,aAAa8K,UAC1BmP,YAAavb,EAAMsB,aAAaia,YAChCC,YAAaxb,EAAMsB,aAAaka,eASgBta,GAAzBE,CAA6CI,YAAWma,K,2DCnG1EY,GAAb,4MAEIvc,MAAQ,CACJsV,WAAY,GACZkH,QAAS,CACLnZ,IAAK,IAEToZ,SAAU,IAPlB,EAYIC,WAAanO,IAAMC,YAZvB,EAqCIvD,YAAc,SAACkN,EAAD,GAAsB,IAAdpO,EAAa,EAAbA,OACZmB,EAAQnB,EAAOR,KACf/M,EAAQuN,EAAOvN,MACfmgB,EAAoBnP,qBAAU,EAAKxN,MAAMsV,WAAW6C,IACpDyE,EAAiBpP,qBAAU,EAAKxN,MAAMsV,YAC5CqH,EAAkBzR,GAAS1O,EAC3BogB,EAAezE,GAAOwE,EACtB,EAAKtc,SAAS,CAAEiV,WAAYsH,KA5CpC,EAgDIC,eAAiB,SAACC,EAAS9W,EAASyB,GAChC,IAAMsV,EAAiBvP,qBAAU,EAAKxN,MAAMsV,YACtCU,EAAO+G,EAAe/W,GAAS6P,MAAMiH,GAC3C9G,EAAKlD,OAASrL,EAAGsC,OAAOqR,QACxB,EAAK/a,SAAS,CAAEiV,WAAYyH,IAAkB,WACtC/G,EAAKlD,OACL,EAAKkK,cAAc,YAAahH,EAAKpS,OAErC,EAAKoZ,cAAc,YAAahH,EAAKpS,WAxDrD,EA6DIqZ,iBAAmB,SAACH,EAAS9W,EAASyB,GAClC,IAAMsV,EAAiBvP,qBAAU,EAAKxN,MAAMsV,YAC5CyH,EAAe/W,GAAS6P,MAAMiH,GAASlZ,MAAQ6D,EAAGsC,OAAOvN,MACzD,EAAK6D,SAAS,CAAEiV,WAAYyH,KAhEpC,EAmEIG,YAAc,SAACtH,GACX,IAAME,EAAYF,EAAUC,MAAMpW,QAAO,SAAAuW,GAAI,OAAIA,EAAKlD,UAEtD,OADgB9O,SAAU8R,EAAUrR,OAASmR,EAAUC,MAAMpR,OAAU,MArE/E,EAyEI0Y,cAAgB,SAAC1V,GACb,IAAM2V,EAAe3V,EAAGsC,OAAOR,KACzB/M,EAAQiL,EAAGsC,OAAOvN,MAClBigB,EAAQ,YAAO,EAAKzc,MAAMyc,UAChCA,EAASW,GAAgB5gB,EACzB,EAAK6D,SAAS,CAAEoc,cA9ExB,EAiFIhP,aAAe,SAAAhG,GACNA,EAAGsC,OAAOvN,OACI,KAAfiL,EAAGiG,UAAkC,IAAhBjG,EAAGkG,WACxBlG,EAAGsD,iBACoB,UAAnBtD,EAAGsC,OAAOR,KACV,EAAKyT,cAAc,eAEnB,EAAKA,cAAc,eAxFnC,EA8FIA,cA9FJ,uCA8FoB,WAAOK,EAAczZ,GAArB,qCAAA9F,EAAA,+DACkB,EAAKyC,MAA3BmF,EADI,EACJA,MAAOG,EADH,EACGA,KAAMvC,EADT,EACSA,KACbgS,EAAe,EAAKtV,MAApBsV,WACF1H,EAAYJ,qBAAU9H,GACtBM,EAAUpB,EAAaM,eAAeQ,EAAOG,EAAKtC,IAClD0C,EAAUrB,EAAaO,eAAeU,EAAMvC,EAAKC,IACvDqK,EAAU9H,MAAME,GAASG,MAAMF,GAASqP,WAAaA,EAC7CrW,EAAS,EAAKsB,MAAdtB,KAGJoE,EADiB,cAAjBga,EACG,qBAAiBzZ,EAAjB,cACqB,cAAjByZ,EACD,yBACkB,cAAjBA,EACJ,qBAAiBzZ,EAAjB,aACqB,WAAjByZ,EACJ,mBAAezZ,EAAf,eACqB,YAAjByZ,EACJ,yBAAqBzZ,EAArB,aAEG,6BAEJiD,EAAW,CACb5H,OACAoE,MACAC,QAzBQ,UA2BN,EAAK/C,MAAMgM,YAAYqB,EAAW/G,GA3B5B,QA4BZ,YAAK6V,WAAW3O,eAAhB,SAAyBmJ,OA5Bb,4CA9FpB,0DA6HIoG,aAAe,SAACR,EAAS9W,EAASyB,GAC9B,IAAIsV,EAAiBvP,qBAAU,EAAKxN,MAAMsV,YACpCiI,EAAeR,EAAe/W,GAAS6P,MAAMiH,GACnDC,EAAe/W,GAAS6P,MAAMzI,OAAO0P,EAAS,GACzCC,EAAe/W,GAAS6P,MAAMpR,QAC/BsY,EAAe3P,OAAOpH,EAAS,GAEnC,EAAK3F,SAAS,CAAEiV,WAAYyH,IAAkB,kBAAM,EAAKC,cAAc,SAAUO,EAAa3Z,WApItG,EAwII4Z,UAAY,SAACxX,EAASyB,GAClB,GAAKA,EAAGsC,OAAOvN,OACI,KAAfiL,EAAGiG,UAAkC,IAAhBjG,EAAGkG,SAAoB,CAC5C,IAAM8P,EAAY,CACdla,GAAIxB,EAAYa,SAChBgB,MAAO,EAAK5D,MAAMyc,SAASzW,GAC3B8M,QAAQ,GAENiK,EAAiBvP,qBAAU,EAAKxN,MAAMsV,YAC5CyH,EAAe/W,GAAS6P,MAAMzO,KAAKqW,GACnC,EAAKpd,SAAS,CAAEiV,WAAYyH,IAAkB,WAC1C,EAAKC,cAAc,UAAWS,EAAU7Z,OACxC,IAAM6Y,EAAQ,YAAO,EAAKzc,MAAMyc,UAChCA,EAASzW,GAAW,GACpB,EAAK3F,SAAS,CAAEoc,kBAtJhC,EA2JIiB,kBAAoB,SAACN,GACjB,IAAMxP,EAAYJ,qBAAU,EAAKjN,MAAMmF,OADL,EAEE,EAAKnF,MAAjCsF,EAF0B,EAE1BA,KAAMvC,EAFoB,EAEpBA,KAAMiJ,EAFc,EAEdA,YAFc,EAGL3H,EAAaa,sBAAsBmI,EAAW/H,EAAKtC,GAAID,EAAKC,IAAjFyC,EAH0B,EAG1BA,QAASC,EAHiB,EAGjBA,QACjB2H,EAAU9H,MAAME,GAASG,MAAMF,GAASqP,WAAWlI,OAAOgQ,EAAc,GACxE7Q,EAAYqB,IAhKpB,kEAeyB,IACT0H,EAAehV,KAAKC,MAAM+C,KAA1BgS,WACR,GAAIA,EAAY,CAEZ,IAAMyH,EAAiBvP,qBAAU8H,GACjChV,KAAKD,SAAS,CAAEiV,WAAYyH,SAE5Bzc,KAAKD,SAAS,CAAEiV,WAAY,OAtBxC,yCA0BuB5J,GAAY,IACnB4J,EAAehV,KAAKC,MAAM+C,KAA1BgS,WACR,GAAI5J,EAAUpI,KAAKgS,aAAeA,EAAY,CAE1C,IAAMyH,EAAiBvP,qBAAU8H,GACjChV,KAAKD,SAAS,CAAEiV,WAAYyH,OA/BxC,+BAmKc,IAAD,SAC4Bzc,KAAKN,MAA9BsV,EADH,EACGA,WAAYmH,EADf,EACeA,SACZS,EAAgB5c,KAAhB4c,YACR,OAAK5H,EAED,qBAAK1U,UAAU,iBAAf,gBACM0U,QADN,IACMA,OADN,EACMA,EAAYrO,KAAI,SAAC2O,EAAW5P,GAC1B,OAAO,sBAAKpF,UAAU,mBAAf,UACH,cAAC,KAAD,CAAsBwF,MAAO,CAAE+B,SAAU,WAAY6T,KAAM,QAASC,IAAK,SACzE,sBAAKrb,UAAU,kCAAf,UAEI,0BAAUwF,MAAO,CAAE6B,MAAO,OACtBrH,UAAU,gBACVpE,MAAOoZ,EAAUhS,MACjB2F,KAAK,QACLc,SAAU,SAAC5C,GAAD,OAAQ,EAAKwD,YAAYjF,EAASyB,IAC5C2U,WAAW,QACX1N,UAAW,EAAKjB,aAChBkB,IAAK,EAAK+N,aAEd,sBAAM1b,QAAS,kBAAM,EAAK0c,kBAAkB1X,IAA5C,SAAsD,wBAAQpF,UAAU,gBAAgBwF,MAAO,CAAEuX,QAAS,WAApD,0BAEhD,OAAT/H,QAAS,IAATA,OAAA,EAAAA,EAAWC,MAAMpR,QAAS,cAACmZ,GAAD,CAAyBphB,MAAO0gB,EAAYtH,KAAiB,IAE9E,OAATA,QAAS,IAATA,OAAA,EAAAA,EAAWC,QACRD,EAAUC,MAAM5O,KAAI,SAAC+O,EAAM8G,GACvB,OAAO,sBAAKlc,UAAU,uDAAf,UACH,uBACId,KAAK,WACLyJ,KAAK,WACLc,SAAU,SAAC5C,GAAD,OAAQ,EAAKoV,eAAeC,EAAS9W,EAASyB,IACxD2T,QAASpF,EAAKlD,SAElB,uBACIhT,KAAK,OACLc,UAAS,UAAKoV,EAAKlD,QAAU,UAApB,+BACTtW,MAAOwZ,EAAKpS,MACZyG,SAAU,SAAC5C,GAAD,OAAQ,EAAKwV,iBAAiBH,EAAS9W,EAASyB,IAC1DiH,UAAW,EAAKjB,aAChB5B,aAAa,QACbgL,OAAQ,EAAKmG,gBAEjB,cAAC,KAAD,CAAoBpc,UAAU,kBAAkBI,QAAS,SAACyG,GAAD,OAAQ,EAAK6V,aAAaR,EAAS9W,EAASyB,YAMjH,uBACI3H,KAAK,OACL+L,aAAa,QACbtC,KAAMvD,EACNoE,YAAY,cACZxJ,UAAU,kBACVpE,MAAOigB,EAASzW,GAChBqE,SAAU,EAAK8S,cACfzO,UAAW,SAACjH,GAAD,OAAQ,EAAK+V,UAAUxX,EAASyB,IAC3CoP,OAAQ,WAEJ,EAAKxW,SAAS,CAAEmc,QADA,CAAEnZ,IAAK,iBAvDvB,cAAC2E,GAAD,QAtKhC,GAA2C/G,aA2OrCC,GAAqB,CACvBqL,gBASSsR,GAAuBzc,aANZ,SAAApB,GACpB,MAAO,CACHub,YAAavb,EAAMsB,aAAaia,eAIqBra,GAAzBE,CAA6Cmb,IAGjF,SAASqB,GAAwBrd,GAC7B,OACI,eAACud,GAAA,EAAD,CAAK9M,QAAQ,OAAO+M,WAAW,SAA/B,UACI,cAACD,GAAA,EAAD,CAAK7V,MAAM,OAAO+V,GAAI,EAAtB,SACI,cAACC,GAAA,EAAD,cAAgBC,QAAQ,eAAkB3d,MAE9C,cAACud,GAAA,EAAD,CAAK3N,SAAU,GAAf,SACI,cAACgO,GAAA,EAAD,CAAYD,QAAQ,QAAQhb,MAAM,gBAAlC,mBAAsDV,KAAK2B,MACvD5D,EAAM/D,OADV,YAaEqU,aAAW,CACzBuN,KAAM,CACFnW,MAAO,U,cChRFoW,GAAb,4MACIre,MAAQ,CACJse,gBAAgB,EAChBC,QAAS,CACLlb,IAAK,KAJjB,EAQImb,gBAAkB,WACd,EAAKne,SAAS,CAAEie,gBAAiB,EAAKte,MAAMse,kBATpD,EAYIG,cAAgB,YAAiB,IAAd1U,EAAa,EAAbA,OACTmB,EAAQnB,EAAOR,KACf/M,EAAQuN,EAAOvN,MACrB,EAAK6D,UAAS,SAAA8K,GACV,MAAO,CACHoT,QAAQ,6BACDpT,EAAUoT,SADV,mBAEFrT,EAAQ1O,SAnB7B,EAyBIiR,aAAe,SAAAhG,GACQ,KAAfA,EAAGiG,UAAkC,IAAhBjG,EAAGkG,WACxBlG,EAAGsD,iBACH,EAAK2T,YAAYjX,KA5B7B,EAgCIiX,YAhCJ,uCAgCkB,WAAOjX,GAAP,2CAAA3J,EAAA,6DACV2J,EAAGsD,iBACK1H,EAAQ,EAAKrD,MAAMue,QAAnBlb,IACApE,EAAS,EAAKsB,MAAdtB,KACF0f,EAAe,CACjBpb,GAAIxB,EAAYa,SAChBY,UAAWT,KAAKU,MAChBJ,OAMAK,EAHCzE,EAGU,CAAE6H,IAAK7H,EAAK6H,IAAKnH,SAAUV,EAAKU,SAAUgE,OAAQ1E,EAAK0E,QAFvD,CAAEmD,IAAK,QAASnH,SAAU,QAASgE,OAAQ,sFAI1Dgb,EAAajb,SAAWA,EAfd,EAgBwB,EAAKnD,MAA/B6L,EAhBE,EAgBFA,UAAWvG,EAhBT,EAgBSA,KAAMvC,EAhBf,EAgBeA,KACnB0M,EAAWxC,qBAAUlK,GACrBmI,EAAY+B,qBAAUpB,GACxB4D,EAASyF,WAGTzF,EAASyF,SAAW,IAFpBzF,EAASyF,SAASjK,QAAQmT,GApBpB,EA0BmB/Z,EAAaa,sBAAsB2G,EAAWvG,EAAKtC,GAAID,EAAKC,IAAjF0C,EA1BE,EA0BFA,QAASD,EA1BP,EA0BOA,QACjByF,EAAU3F,MAAME,GAASG,MAAMF,GAAW+J,EACpCnJ,EAAW,CACb5H,OACAoE,IAAI,eAAD,OAAiBA,EAAjB,QACHC,QA/BM,UAiCJ,EAAK/C,MAAMgM,YAAYd,EAAW5E,GAjC9B,QAkCJ0X,EAAU,CAAElb,IAAK,IACvB,EAAKhD,SAAS,CAAEke,YAnCN,4CAhClB,wDAuEIK,gBAvEJ,uCAuEsB,WAAO5Y,EAASC,EAAS4Y,GAAzB,uBAAA/gB,EAAA,6DACR2N,EAAY+B,qBAAU,EAAKjN,MAAM6L,YAC7BtG,MAAME,GAASG,MAAMF,GAASwP,SAASrI,OAAOyR,EAAY,GAFtD,EAGS,EAAKte,MAApBtB,EAHM,EAGNA,KAAMqE,EAHA,EAGAA,KACRuD,EAAW,CACb5H,OACAoE,IAAI,yBACJC,QAPU,SASR,EAAK/C,MAAMgM,YAAYd,EAAW5E,GAT1B,2CAvEtB,iHAmFc,IAAD,SACuBvG,KAAKC,MAAzB6L,EADH,EACGA,UAAWnN,EADd,EACcA,KADd,EAEsBqB,KAAKC,MAAM6R,MAAMC,OAApC1M,EAFH,EAEGA,OAAQC,EAFX,EAEWA,OAFX,EAGwBhB,EAAaa,sBAAsB2G,EAAWzG,EAAQC,GAA3EI,EAHH,EAGGA,QAASC,EAHZ,EAGYA,QACX3C,EAAO8I,EAAUtG,MAAME,GAASG,MAAMF,GACtC6Y,EAAY,OAAGxb,QAAH,IAAGA,OAAH,EAAGA,EAAMmS,SACrBsJ,EAAiB3S,EAAUoO,WAAW/a,QAAO,SAAAoH,GAC/C,GAAIA,EAASvD,KACT,OAAOuD,EAASvD,KAAKC,KAAOD,EAAKC,MARpC,EAW+BjD,KAAKN,MAAjCse,EAXH,EAWGA,eAAgBC,EAXnB,EAWmBA,QACxB,OAAKQ,EAED,sBAAKne,UAAU,gBAAf,UACI,sBAAKA,UAAU,uBAAf,UACI,cAAC,KAAD,CAAqBwF,MAAO,CAAE+B,SAAU,WAAY6T,KAAM,QAASC,IAAK,SACxE,oBAAIrb,UAAU,uBAAuBwF,MAAO,CAAEuX,QAAS,WAAvD,sBACA,wBAAQ3c,QAASV,KAAKke,gBAAiB5d,UAAU,gBAAjD,SAAmE0d,EAAkB,gBAAkB,qBAE3G,sBAAK1d,UAAU,gBAAf,UACI,sBAAKA,UAAU,gCAAf,UACI,qBAAKA,UAAU,kBAAf,SAAmC3B,EAAQ,qBAAK0K,IAAK1K,EAAK0E,SAAa,qBAAKgG,IAAI,yFAChF,+BACI,qBAAK/I,UAAU,cAAf,SACI,0BACIA,UAAU,mBACVwJ,YAAY,qBACZ5N,MAAO+hB,EAAQlb,IACfkG,KAAK,MACLc,SAAU/J,KAAKme,cACf/P,UAAWpO,KAAKmN,sBAM/BqR,EACGA,EAAa7X,KAAI,SAACsX,EAASM,GACvB,OAAO,sBAAsBje,UAAU,yBAAhC,UACH,qBAAKA,UAAU,kBAAf,SAAiC,qBAAK+I,IAAK4U,EAAQ7a,SAASC,WAC5D,sBAAK/C,UAAU,2CAAf,UACI,oBAAGA,UAAU,eAAb,UACI,uBAAMA,UAAU,uBAAhB,UAAwC2d,EAAQ7a,SAAS/D,SAAzD,OACA,qBAAKiB,UAAU,gBAAgBwF,MAAO,CAAE4K,QAAS,gBAAjD,SAAmE,+BAAOgO,aAAeT,EAAQ/a,UAAWT,KAAKU,cAErH,qBAAK7C,UAAU,cAAf,SACI,+BAAO2d,EAAQlb,WAGrBkb,EAAQ7a,SAASoD,OAAjB,OAAyB7H,QAAzB,IAAyBA,OAAzB,EAAyBA,EAAM6H,KAAO,sBAAM9F,QAAS,kBAAM,EAAK4d,gBAAgB5Y,EAASC,EAAS4Y,IAAaje,UAAU,wBAAnF,SAA4G,cAAC,KAAD,CAAoBA,UAAU,sBAA8B,KAXnM2d,EAAQhb,OAc3B,MAEV,qBAAK3C,UAAS,8BAAyB0d,GAAkB,UAAzD,SACKS,GACGA,EAAe9X,KAAI,SAAAJ,GACf,OAAO,sBAAuBjG,UAAU,0BAAjC,UACH,qBAAKA,UAAU,kBAAf,SAAiC,qBAAK+I,IAAK9C,EAASnD,SAASC,WAC7D,sBAAK/C,UAAU,2CAAf,UACI,oBAAGA,UAAU,eAAb,UACI,uBAAMA,UAAU,uBAAhB,UAAwCiG,EAASnD,SAAS/D,SAA1D,OACA,iCAAOkH,EAASxD,IAAhB,OACA,sBAAMzC,UAAU,sBAAhB,SAAuCiG,EAASvD,KAAKM,WAEzD,qBAAKhD,UAAU,gBAAf,SACI,+BAAOoe,aAAenY,EAASrD,UAAWT,KAAKU,gBAT1CoD,EAAStD,YA9ClB,cAACyE,GAAD,QA/FpC,GAA0C/G,aA0KpCC,GAAqB,CACvBqL,gBAGS0S,GAAsB7d,aAXX,SAAApB,GACpB,MAAO,CACHoM,UAAWpM,EAAMsB,aAAa8K,UAC9BnN,KAAMe,EAAMuB,YAAYtC,QAQ4BiC,GAAzBE,CAA6Cid,I,qBCnLnEa,GAAb,4MAEIC,YAAc,SAACC,GAAY,IAAD,EAC2B,EAAK7e,MAA9CmF,EADc,EACdA,MAAOG,EADO,EACPA,KAAMvC,EADC,EACDA,KAAMiJ,EADL,EACKA,YAAatN,EADlB,EACkBA,KADlB,EAEO2F,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAFc,EAEdA,QAASC,EAFK,EAELA,QACX2H,EAAYJ,qBAAU9H,GAC5BkI,EAAU9H,MAAME,GAASG,MAAMF,GAASgP,YAAY7H,OAAOgS,EAAQ,GAMnE7S,EAAYqB,EALK,CACb3O,OACAoE,IAAI,wBACJC,UAVZ,uDAec,IAAD,SACyBhD,KAAKC,MAC7B8e,GAFD,EACG3Z,MADH,EACUG,KADV,EACgBvC,KACG2R,aACxB,OACI,yBAASrU,UAAU,cAAnB,SACI,sBAAKA,UAAU,iBAAf,UACI,cAAC,KAAD,CAAmBwF,MAAO,CAAE+B,SAAU,WAAY6T,KAAM,QAASC,IAAK,SACtE,oBAAIrb,UAAU,uBAAd,oBACEye,EAAa,qBAAKze,UAAU,WAAf,SACVye,EAAWpY,KAAI,SAACqY,EAAKF,GAClB,OAAO,qBAAKxe,UAAU,mBAAmBwF,MAAO,CAAEyC,gBAAgB,QAAD,OAAUyW,EAAV,OAA1D,SACH,cAAC,KAAD,CAAoBte,QAAS,kBAAM,EAAKme,YAAYC,IAASxe,UAAU,kBAAkBwF,MAAO,CAAE+B,SAAU,WAAYoX,MAAO,cAKrI,YA/B1B,GAA4Cte,a,0CCL/Bue,GAAoB,CAC/BC,U,4FAIF,WAAyBC,GAAzB,mBAAA5hB,EAAA,6DAEErB,QAAQC,IAAI,iBAEO,QAJrB,sDAOQijB,EAAW,IAAIC,UACZC,OAAO,OAAQH,GACxBC,EAASE,OAAO,gBAAiB,YATnC,kBAWsBviB,IAXtB,qDAWwC,CAClCS,OAAQ,OACRH,KAAM+hB,IAbZ,cAWU1hB,EAXV,OAeUL,EAAOK,EAAIL,KACjBnB,QAAQC,IAAI,QAASkB,GAhBzB,kBAiBWA,GAjBX,kCAoBInB,QAAQC,IAAR,MApBJ,2D,sBCcO,IAAMojB,GAAb,4MAEI9f,MAAQ,CACJ6S,QAAS,CACL/P,UAAW,GACXgQ,QAAQ,GAEZiN,WAAY,IAPpB,EAUIC,aAAe,WAAO,IAAD,EACgC,EAAKzf,MAA9CmF,EADS,EACTA,MAAOG,EADE,EACFA,KAAMvC,EADJ,EACIA,KAAMiJ,EADV,EACUA,YAAatN,EADvB,EACuBA,KADvB,EAEY2F,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAFS,EAETA,QAASC,EAFA,EAEAA,QACXwF,EAAY+B,qBAAU9H,GACtBua,EAAe,CACjB,GAAMle,EAAYa,SAClB,MAAS,YACT,MAAS,IAER6I,EAAU3F,MAAME,GAASG,MAAMF,GAASqP,aACzC7J,EAAU3F,MAAME,GAASG,MAAMF,GAASqP,WAAa,IAEzD7J,EAAU3F,MAAME,GAASG,MAAMF,GAASqP,WAAWlO,KAAK6Y,GAMxD1T,EAAYd,EALK,CACbxM,OACAoE,IAAI,SAAD,OAAW4c,EAAarc,MAAxB,OACHN,SAGJ7G,QAAQC,IAAI,iBA7BpB,EAgCIyW,aAhCJ,sBAgCmB,gDAAArV,EAAA,+DACsC,EAAKyC,MAA9CmF,EADG,EACHA,MAAOG,EADJ,EACIA,KAAMvC,EADV,EACUA,KAAMiJ,EADhB,EACgBA,YAAatN,EAD7B,EAC6BA,KAD7B,EAEkB2F,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAFG,EAEHA,QAASC,EAFN,EAEMA,SACXwF,EAAY+B,qBAAU9H,IAClBI,MAAME,GAASG,MAAMiH,OAAOnH,EAAS,GACzCY,EAAW,CACb5H,OACAoE,IAAI,eACJC,QAEJ,EAAK/C,MAAMG,QAAQ0G,KAAnB,iBAAkC1B,EAAMoB,MAV7B,SAWLyF,EAAYd,EAAW5E,GAXlB,2CAhCnB,EA8CIkL,aAAe,SAACtK,GACZ,IAAIuL,EAAeC,aAASxL,EAAGsC,OAAOvN,OAEhCqW,EAAU,CACZ/P,UAFYoQ,aAAQF,GAGpBF,QAAQ,GAEZ,EAAKzS,SAAS,CAAEwS,aArDxB,EAwDIb,WAAa,WAAO,IAAD,EAEkC,EAAKzR,MAA9CmF,EAFO,EAEPA,MAAOG,EAFA,EAEAA,KAAMvC,EAFN,EAEMA,KAAMiJ,EAFZ,EAEYA,YAAatN,EAFzB,EAEyBA,KAFzB,EAGc2F,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAHO,EAGPA,QAASC,EAHF,EAGEA,QACXwF,EAAY+B,qBAAU9H,GACvB,EAAK1F,MAAM6S,QAAQ/P,YACxB2I,EAAU3F,MAAME,GAASG,MAAMF,GAAS4M,QAAU,EAAK7S,MAAM6S,QAM7DtG,EAAYd,EALK,CACbxM,OACAoE,IAAI,qBAAD,OAAuBoY,aAAe,EAAKzb,MAAM6S,QAAQ/P,UAAWC,KAAKU,OAAzE,OACHH,SAGJ,EAAK/C,MAAM+a,cAAc,MArEjC,EAwEI4E,YAxEJ,uCAwEkB,WAAMzY,GAAN,iBAAA3J,EAAA,+EAEuB0hB,GAAkBC,UAAUhY,EAAGsC,OAAOoW,MAAM,IAFnE,gBAEEC,EAFF,EAEEA,WACR,EAAK/f,SAAS,CAAE0f,WAAYK,GAA5B,sBAA0C,oDAAAtiB,EAAA,+DACW,EAAKyC,MAA9CmF,EAD8B,EAC9BA,MAAOG,EADuB,EACvBA,KAAMvC,EADiB,EACjBA,KAAMiJ,EADW,EACXA,YAAatN,EADF,EACEA,KADF,EAET2F,EAAaa,sBAAsBC,EAAOG,EAAKtC,GAAID,EAAKC,IAA7EyC,EAF8B,EAE9BA,QAASC,EAFqB,EAErBA,QACXwF,EAAY+B,qBAAU9H,GACxBqJ,EAAWtD,EAAU3F,MAAME,GAASG,MAAMF,IAC9C,UAAI8I,EAASkG,mBAAb,aAAI,EAAsBxQ,QACtBsK,EAASkG,YAAT,sBACOxJ,EAAU3F,MAAME,GAASG,MAAMF,GAASgP,aAD/C,CAEI,EAAKjV,MAAM+f,cAGfhR,EAASkG,YAAc,GACvBlG,EAASkG,YAAY7N,KAAK,EAAKpH,MAAM+f,aAEnClZ,EAAW,CACb5H,OACAoE,IAAI,uBACJC,QAjBkC,SAmBhCiJ,EAAYd,EAAW5E,GAnBS,4CAHpC,gDA0BN,EAAKxG,SAAS,CAAEggB,IAAK,wCACrB5jB,QAAQC,IAAI,2BAAZ,MA3BM,yDAxElB,6GAuGc,IAAD,EACkC4D,KAAKC,MAApCkQ,EADH,EACGA,YAAa6K,EADhB,EACgBA,cACrB,OACI,wBAAO1a,UAAU,sBAAjB,UACI,oBAAIA,UAAU,kBAAd,qBACA,sBAAKA,UAAU,8BAAf,UACI,sBAAKA,UAAU,qCAAqCI,QAAS,kBAAMsa,EAAc,WAAjF,UACI,sBAAM1a,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,oBACiB,WAAhB6P,GAA4B,cAAC5B,GAAD,cAAevH,eAAgB,kBAAMgU,EAAc,MAAShb,KAAKC,WAGlG,sBAAKK,UAAU,qCAAqCI,QAAS,kBAAMsa,EAAc,YAAjF,UACI,sBAAM1a,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,qBACiB,YAAhB6P,GAA6B,cAAC,GAAD,cAAsBnJ,eAAgB,kBAAMgU,EAAc,MAAShb,KAAKC,WAE1G,sBAAKK,UAAU,qCAAqCI,QAAS,kBAAMsa,EAAc,SAAjF,UACI,sBAAM1a,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,sBACiB,SAAhB6P,GAA0B,cAAC,GAAD,cACvBzP,QAAS,SAACyG,GAAD,OAAQA,EAAGI,mBACpBP,eAAgB,kBAAMgU,EAAc,KACpCvJ,aAAczR,KAAKyR,aACnBC,WAAY1R,KAAK0R,YACb1R,KAAKC,WAGjB,sBAAKK,UAAU,qCAAqCI,QAASV,KAAK0f,aAAlE,UACI,sBAAMpf,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,0BAEJ,qBAAKA,UAAU,qCAAf,SACI,wBAAOA,UAAU,cAAcwF,MAAO,CAAE6B,MAAO,OAAQqY,OAAQ,WAA/D,eAA8E,cAAC,KAAD,CAAmB1f,UAAU,iBACvG,uBAAOyJ,SAAU/J,KAAK4f,YAAapgB,KAAK,OAAOygB,QAAM,IACrD,sBAAM3f,UAAU,aAAhB,wBAGR,sBAAKA,UAAU,qCAAqCI,QAAS,kBAAMsa,EAAc,SAAjF,UACI,sBAAM1a,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,kBACiB,SAAhB6P,GAA0B,cAAC,GAAD,cAAiBnJ,eAAgB,kBAAMgU,EAAc,MAAShb,KAAKC,WAElG,sBAAKK,UAAU,qCAAqCI,QAAS,kBAAMsa,EAAc,SAAjF,UACI,sBAAM1a,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,kBACiB,SAAhB6P,GAA0B,cAAC,GAAD,cAAiBnJ,eAAgB,kBAAMgU,EAAc,MAAShb,KAAKC,WAElG,sBAAKK,UAAU,qCAAqCI,QAASV,KAAK6S,aAAlE,UACI,sBAAMvS,UAAU,cAAhB,SAA8B,cAAC,KAAD,MAC9B,sBAAMA,UAAU,aAAhB,iCAzJxB,GAAiCK,a,qBCRpBuf,GAAb,4MACIxgB,MAAQ,CACJygB,eAAe,EACfhQ,YAAa,GACb/K,MAAO,GACPG,KAAM,GACNvC,KAAM,IANd,EAUIoZ,WAAanO,IAAMC,YAVvB,EA+CIkS,WAAa,WAAO,IAAD,EACY,EAAKngB,MAAM6R,MAAMC,OAApC1M,EADO,EACPA,OAAQC,EADD,EACCA,OAChB,GAAID,GAAUC,EAAQ,CAAC,IACXF,EADU,gBACK,EAAKnF,OAApBmF,MADU,EAEWd,EAAaa,sBAAsBC,EAAOC,EAAQC,GAAvEI,EAFU,EAEVA,QAASC,EAFC,EAEDA,QACXJ,EAAOH,EAAMI,MAAME,GAEzB,MAAO,CAAEN,QAAOG,OAAMvC,KADTuC,EAAKM,MAAMF,MArDpC,EA0DI0a,YAAc,YAAiB,IAAd5W,EAAa,EAAbA,OAEPvN,GADQuN,EAAOR,KACPQ,EAAOvN,OACfwT,EAAWxC,qBAAU,EAAKxN,MAAMsD,MACtC0M,EAASpM,MAAQpH,EACjB,EAAK6D,SAAS,CAAEiD,KAAM0M,KA/D9B,EAkEIvC,aAAe,SAAAhG,GACQ,KAAfA,EAAGiG,UAAkC,IAAhBjG,EAAGkG,WACxBlG,EAAGsD,iBACH,EAAK6V,aAAanZ,KArE9B,EAyEImZ,aAzEJ,uCAyEmB,WAAOnZ,GAAP,+BAAA3J,EAAA,yDACX2J,EAAGsD,iBADQ,EAEmB,EAAK/K,MAA3B0F,EAFG,EAEHA,MAAOG,EAFJ,EAEIA,MAAMvC,EAFV,EAEUA,MACXM,MAHC,wDAILgK,EAJK,gBAIY,EAAK5N,MAAM0F,OAC5B6V,EAAc3W,EAAaM,eAAeQ,EAAOG,EAAKtC,IACtD0C,EAAU2H,EAAU9H,MAAMyV,GAAapV,MAAMZ,WAAU,SAAAwJ,GAAQ,OAAIA,EAASxL,KAAOD,EAAKC,MAC9FqK,EAAU9H,MAAMyV,GAAapV,MAAMF,GAAW3C,EACtCrE,EAAS,EAAKsB,MAAdtB,KACF4H,EAAW,CACb5H,OACAoE,IAAI,qBAAD,OAAuBC,EAAKM,MAA5B,WACHN,QAEJ,EAAKoZ,WAAW3O,QAAQmJ,OAdb,UAeL,EAAK3W,MAAMgM,YAAYqB,EAAW/G,GAf7B,4CAzEnB,wDA2FIga,YA3FJ,uCA2FkB,WAAO7Z,EAASpB,GAAhB,eAAA9H,EAAA,sEACS8G,EAAaK,YAAY+B,EAASpB,GAD3C,OACJtC,EADI,OAEV,EAAKjD,SAAS,CAAEiD,SAFN,2CA3FlB,0DAgGIwd,aAAe,SAACrZ,GACZA,EAAGsD,iBACHtD,EAAGI,kBAFgB,IAGXnC,EAAU,EAAK1F,MAAf0F,MACR,EAAKrF,SAAS,CAAEogB,eAAe,GAA/B,sBAAwC,sBAAA3iB,EAAA,sDACpC,EAAKyC,MAAMG,QAAQ0G,KAAnB,iBAAkC1B,EAAMoB,MADJ,6CApGhD,EAyGIwU,cAAgB,SAAC/R,GACW,EAAKvJ,MAArByQ,cACYlH,EAChB,EAAKlJ,SAAS,CAAEoQ,YAAa,KAE7B,EAAKpQ,SAAS,CAAEoQ,YAAalH,KA9GzC,EAmHIwX,eAAiB,WAAO,IACZrb,EAAU,EAAKnF,MAAfmF,MACR,EAAKnF,MAAMG,QAAQ0G,KAAnB,iBAAkC1B,EAAMoB,OArHhD,kEAYyB,IAAD,EACWxG,KAAKC,MAAM6R,MAAMC,OAA5BzM,GADA,EACRD,OADQ,EACAC,QACVob,EAAU1gB,KAAKogB,aACrB,GAAIM,EAAS,CAAC,IAEFtb,EAAsBsb,EAAtBtb,MAAOG,EAAemb,EAAfnb,KAAMvC,EAAS0d,EAAT1d,KACrBhD,KAAKugB,YAAYnb,EAAMoB,IAAKlB,GAC5BtF,KAAKD,SAAS,CAAEqF,QAAOG,OAAMvC,YAnBzC,2CAwB0B,IAAD,SACUhD,KAAKC,MAAM6R,MAAMC,OAApC1M,EADS,EACTA,OAAQC,EADC,EACDA,OACVob,EAAU1gB,KAAKogB,aACrB,GAAIM,EAAS,CAAC,IAEFtb,EAAsBsb,EAAtBtb,MAAOG,EAAemb,EAAfnb,KAAMvC,EAAS0d,EAAT1d,KACjBsC,GAAUD,IAAWrF,KAAKN,MAAMygB,eAChCngB,KAAKD,SAAS,CAAEogB,eAAe,EAAM/a,QAAOG,OAAMvC,QAAlD,sBAA0D,sBAAAxF,EAAA,yDACtD,EAAK+iB,YAAYnb,EAAMoB,IAAKlB,GACvB,EAAKrF,MAAMc,cAFsC,gCAG5C,EAAKd,MAAMqM,gBAHiC,+CA/B1E,6CA2CQtM,KAAKC,MAAMqM,kBA3CnB,+BAyHc,IAAD,aACkCtM,KAAKN,MAApCygB,EADH,EACGA,cAAehQ,EADlB,EACkBA,YADlB,EAEmBnQ,KAAKC,MAArBmF,EAFH,EAEGA,MAAOzG,EAFV,EAEUA,KAFV,EAGsBqB,KAAKC,MAAM6R,MAAMC,OAApC1M,EAHH,EAGGA,OAAQC,EAHX,EAGWA,OAHX,EAIwBhB,EAAaa,sBAAsBC,EAAOC,EAAQC,GAAvEI,EAJH,EAIGA,QAASC,EAJZ,EAIYA,QACXgb,EAAWvb,EAAMI,MAAME,GACvB+I,EAAWrJ,EAAMI,MAAME,GAASG,MAAMF,GAG5C,OAAK8I,EAED,yBAAS/N,QAAS,kBAAMyP,EAAc,EAAK6K,cAAc,IAAM,IAAI1a,UAAU,eAA7E,SACKN,KAAKN,MAAMygB,eACR,qBAAK7f,UAAS,UAAKN,KAAKC,MAAMc,eAAiB,eAAjC,aAAoDof,GAAiB,UAAYzf,QAASV,KAAKygB,eAA7G,SACI,sBAAKngB,UAAU,qBAAqBI,QAAS,SAACyG,GAC1CA,EAAGI,kBACC4I,GAAa,EAAK6K,cAAc,KAFxC,UAII,sBAAK1a,UAAU,2BAAf,UAEI,sBAAKA,UAAU,6BAAf,UACI,uBAAMA,UAAU,OAAhB,UACI,cAAC,KAAD,CAAiBwF,MAAO,CAAE+B,SAAU,WAAY6T,KAAM,QAASC,IAAK,SACpE,0BAAUvN,UAAWpO,KAAKmN,aAAckB,IAAKrO,KAAKoc,WAAY9b,UAAU,gBACpE2I,KAAK,QACLc,SAAU/J,KAAKqgB,YACfnkB,MAAK,UAAE8D,KAAKN,MAAMsD,YAAb,aAAE,EAAiBM,MACxBwY,WAAW,QACXvF,OAAQvW,KAAKsgB,eAEjB,qBAAKhgB,UAAU,oEAAf,SACI,cAAC,KAAD,CAAWI,QAASV,KAAKwgB,oBAGjC,yCAAW,sBAAMlgB,UAAU,oBAAhB,gBAAqCqgB,QAArC,IAAqCA,OAArC,EAAqCA,EAAUrd,cAE9D,qBAAKhD,UAAU,eAAf,SACI,cAAC8a,GAAD,cAAiBhW,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,EAAUuM,cAAehb,KAAKgb,cAAe7K,YAAanQ,KAAKN,MAAMyQ,aAAkBnQ,KAAKC,UAErJ,qBAAKK,UAAU,sBAAf,SACI,cAAC0b,GAAD,CAAiB5W,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,EAAU9P,KAAMA,OAExE,UAAA8P,EAASkG,mBAAT,eAAsBxQ,QACnB,qBAAK7D,UAAU,sBAAf,SACI,cAAC,GAAD,cAAwB8E,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,GAAczO,KAAKC,UAEjF,GAEN,qBAAKK,UAAU,oBAAf,SACI,cAACid,GAAD,CAAsBnY,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,EAAU9P,KAAMA,MAE9E,qBAAK2B,UAAU,mBAAf,SACI,cAACqe,GAAD,cAAqBvZ,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,GAAczO,KAAKC,aAGpF,qBAAKK,UAAU,kBAAf,SAGI,qBAAKA,UAAU,eAAf,SACI,cAAC,GAAD,cAAa8E,MAAOA,EAAOG,KAAMob,EAAU3d,KAAMyL,EAAUuM,cAAehb,KAAKgb,cAAe7K,YAAanQ,KAAKN,MAAMyQ,aAAiBnQ,KAAKC,mBAlDlJ,yDAlI9B,GAAkCU,aAgM5BC,GAAqB,CACvBqL,eACAG,cACAE,kBAcSsU,GAAc9f,aAXH,SAAApB,GACpB,MAAO,CACHkW,WAAYlW,EAAMsB,aAAa4U,WAC/BxQ,MAAO1F,EAAMsB,aAAa8K,UAC1BmP,YAAavb,EAAMsB,aAAaia,YAChCC,YAAaxb,EAAMsB,aAAaka,YAChCna,cAAerB,EAAMsB,aAAaD,cAClCpC,KAAMe,EAAMuB,YAAYtC,QAIoBiC,GAAzBE,CAA6CI,YAAWgf,K,qBC3NtEW,GAOb,WACI,IAAIC,EA6BJ,MA3BsB,CAClBC,MADkB,WAEdD,EAASE,KAbqC,GAazB,CACjB7jB,iBAAiB,KAGzB8jB,GANkB,SAMfC,EAAWC,GACVL,EAAOG,GAAGC,EAAWC,IAEzBC,IATkB,SASdF,EAAWC,GACXL,EAAOM,IAAIF,EAAWC,IAE1BE,KAZkB,SAYbH,EAAW5jB,GACZwjB,EAAOO,KAAKH,EAAW5jB,IAE3BgkB,UAfkB,WAgBdR,EAAS,MAEbS,kBAlBkB,SAkBAC,GACdngB,EAAerF,MAAMylB,GAAiBD,IAE1CE,mBArBkB,WAsBd,OAAOrgB,EAAe3E,KAAK+kB,MAhCVE,GAI7B5jB,OAAO8iB,cAAgBA,GACvB,IAAMY,GAAkB,Q,iCCPXG,GAAmB,CAC5BC,sBAMJ,SAA+Bzc,GAC3B,IAAMJ,EAASI,EAAMgF,QAAQzD,KAAI,SAAAmC,GAAM,OAAIA,EAAOzJ,YAC9CyiB,EAAa,GACjB1c,EAAMI,MAAMqB,SAAQ,SAAAtB,GAChBuc,EAAU,sBAAOA,GAAP,YAAsBvc,EAAKM,WAEzC,IAAMkc,EAAiBD,EAAW1M,QAAO,SAACC,EAAKrS,GAAU,IAAD,EAMpD,OALA,UAAAA,EAAKoH,eAAL,eAAcjG,SAAUnB,EAAKoH,QAAQvD,SAAQ,SAAAiC,GACzC,IAAMkZ,EAAUhd,EAAOvE,QAAQqI,EAAOzJ,UACtCgW,EAAI2M,GAAW3M,EAAI2M,GAAW3M,EAAI2M,GAAW,EAAI,KAG9C3M,IACR,IACH,MAAO,CACHrQ,SAAQ+c,iBAAgBzkB,KAAM,CAC1B0H,SACAid,SAAU,CAAC,CACP3kB,KAAMykB,EACNzT,gBAAiB,CACb,UACA,UACA,WAEJ4T,qBAAsB,CAClB,UACA,UACA,gBAhChBC,sBAuCJ,SAA+B/c,GAO3B,IANA,IAAIJ,EAAS,GAEPod,EAAWC,KAAKC,iBAAiBC,kBAAkBH,SACnDI,EAAO,IAAI/f,KACXggB,EAAYC,aAAeF,EAAMJ,GAE9Bvf,EAAI,EAAGA,EAAI,EAAGA,IACnBmC,EAAOnC,GAAKuO,aAAOqR,EAAW,OAAS,KAAOA,EAAUE,UAAY9f,GAGxE,IAAM+f,EAAiBxd,EAAM8U,WAAW9E,QAAO,SAACC,EAAK9O,GACjD,IAAMsc,EAAiBH,aAAe,IAAIjgB,KAAK8D,EAASrD,WAAYkf,GAC9DU,EAAgB1R,aAAOyR,EAAgB,OAAS,IAAOA,EAAeF,UACtEX,EAAUhd,EAAOvE,QAAQqiB,GAE/B,OADiB,IAAbd,IAAgB3M,EAAI2M,GAAW3M,EAAI2M,GAAW3M,EAAI2M,GAAW,EAAI,GAC9D3M,IACR,IAEH,MAAO,CACHrQ,SACAid,SAAU,CACN,CACI/c,MAAO,WACP5H,KAAMslB,EACNG,cAAe,GACfC,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,YAAa,EACb3U,gBAAiB,CACb,YACA,YACA,YACA,YACA,UACA,UACA,WAEJ4T,qBAAsB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,eA1FhBgB,mBAiGJ,SAA4B9d,GAOxB,IANA,IAAIJ,EAAS,GAEPod,EAAWC,KAAKC,iBAAiBC,kBAAkBH,SACnDI,EAAO,IAAI/f,KACXggB,EAAYC,aAAeF,EAAMJ,GAE9Bvf,EAAI,EAAGA,EAAI,EAAGA,IACnBmC,EAAOnC,GAAKuO,aAAOqR,EAAW,OAAS,KAAOA,EAAUE,UAAY9f,GAGxE,IAAIif,EAAa,GACjB1c,EAAMI,MAAMqB,SAAQ,SAAAtB,GAChBuc,EAAU,sBAAOA,GAAP,YAAsBvc,EAAKM,WAGzC,IAAMsd,EAAcrB,EAAW1M,QAAO,SAACC,EAAKrS,GACxC,IAAM6f,EAAiBH,aAAe,IAAIjgB,KAAKO,EAAKE,WAAYkf,GAC1DU,EAAgB1R,aAAOyR,EAAgB,OAAS,IAAOA,EAAeF,UACtEX,EAAUhd,EAAOvE,QAAQqiB,GAE/B,OADiB,IAAbd,IAAgB3M,EAAI2M,GAAW3M,EAAI2M,GAAW3M,EAAI2M,GAAW,EAAI,GAC9D3M,IACR,IAEH,MAAO,CACHrQ,SACAid,SAAU,CACN,CACI/c,MAAO,QACP5H,KAAM6lB,EACNJ,cAAe,GACfC,YAAa,CACT,UACA,UACA,UACA,UACA,UACA,UACA,WAEJC,YAAa,EACb3U,gBAAiB,CACb,YACA,YACA,UACA,UACA,UACA,UACA,WAEJ4T,qBAAsB,CAClB,UACA,UACA,UACA,UACA,UACA,UACA,eAzJhBkB,sBAgKJ,SAA+Bhe,GAE3B,IAAMie,EAAW5gB,KAAKU,MAChBmgB,EAAY,OAEZC,EAAgBne,EAAM8U,WACxBsJ,EAAgBD,EAAcpf,OAI9Bsf,EAHcF,EAAcpkB,QAAO,SAAAoH,GAC/B,OAAOA,EAASrD,WAAamgB,EAAWC,KAEbnf,OAG7B2d,EA2BV,SAAsB1c,GAClB,OAAOA,EAAMI,MAAM4P,QAAO,SAACC,EAAK9P,GAE5B,OADA8P,EAAG,sBAAOA,GAAP,YAAe9P,EAAKM,UAExB,IA/BgB6d,CAAate,GAC5Bue,EAAa7B,EAAW3d,OAIxByf,EAHW9B,EAAW3iB,QAAO,SAAA6D,GACzB,OAAOA,EAAKE,WAAamgB,EAAWC,KAEfnf,OAEzB0f,EAAe/B,EAAW3iB,QAAO,SAAA6D,GAC7B,OAAOA,EAAKuP,QAAU8Q,KAE1BS,EAAoBD,EAAa1f,OAKjC4f,EAHkBF,EAAa1kB,QAAO,SAAA6D,GAClC,OAAOA,EAAKE,WAAamgB,EAAWC,KAEDnf,OAG3C,MAAO,CAEH,CAAEb,MAAO,QAAS0gB,MAAOL,EAAYM,IAAKL,EAAc7d,QAAQ,WAChE,CAAEzC,MAAO,WAAY0gB,MAAOR,EAAeS,IAAKR,EAAkB1d,QAAS,WAC3E,CAAEzC,MAAO,UAAW0gB,MAAOF,EAAmBG,IAAKF,EAAqBhe,QAAQ,c,ICrMnEme,G,4MACjBxkB,MAAQ,CACJpC,KAAM,CACF0H,OAAQ,CACJ,aACA,WACA,UAEJid,SAAU,CAAC,CACP3kB,KAAM,CAAC,IAAK,GAAI,KAChBgR,gBAAiB,CACb,UACA,UACA,WAEJ4T,qBAAsB,CAClB,UACA,UACA,e,uDAMN,IAAD,EACuBliB,KAAKC,MAAzBmF,EADH,EACGA,MAAM9E,EADT,EACSA,UACZhD,EAASskB,GAAiBC,sBAAsBzc,GAAhD9H,KAEF,OACI,sBAAKgD,UAAS,2BAAsBA,GAApC,UACI,kDACA,cAAC,YAAD,CAAUhD,KAAMA,EAAMsK,OAAQ,IAAKD,MAAQ,a,GA/BtBhH,aCChBwjB,G,4MACjBzkB,MAAQ,CACJpC,KAAM,I,oGAWA,IAAD,EACuB0C,KAAKC,MAAzBmF,EADH,EACGA,MAAM9E,EADT,EACSA,UACVhD,EAAOskB,GAAiBO,sBAAsB/c,GAElD,OAAK9H,EAED,sBAAKgD,UAAS,2BAAsBA,GAApC,UACI,kDACA,cAAC,OAAD,CAAKhD,KAAMA,EAAMqK,MAAO,IAAKC,OAAQ,SAJ3B,6C,GAjBkBjH,aCAvBujB,G,4MACjBxkB,MAAQ,CACJpC,KAAM,I,oGASA,IAAD,EACuB0C,KAAKC,MAAzBmF,EADH,EACGA,MAAM9E,EADT,EACSA,UACdhD,EAAOskB,GAAiBsB,mBAAmB9d,GAE3C,OACI,sBAAK9E,UAAS,2BAAsBA,GAApC,UACI,mDACA,cAAC,QAAD,CAAMhD,KAAMA,EAAMsK,OAAQ,IAAKD,MAAO,a,GAlBjBhH,aCH9B,SAASyjB,GAAT,GAAyC,IAAT9mB,EAAQ,EAARA,KAEnC,OACI,0BAASwI,MAAO,CAAEwI,gBAAiBhR,EAAKyI,SAAWzF,UAAU,yBAA7D,UACI,oBAAIA,UAAU,aAAd,SAA4BhD,EAAKgG,QACjC,qBAAIhD,UAAU,aAAd,oBAAmChD,EAAK0mB,SACxC,uBAAM1jB,UAAU,cAAhB,wBAA0ChD,EAAK2mB,UCApD,IAAMI,GAAb,4MAEI3kB,MAAQ,GAFZ,EAUIwH,mBAAqB,SAAAC,GACjB,EAAKlH,MAAMqkB,iBAAgB,IAXnC,kEAKyB,IACTlf,EAAUpF,KAAKC,MAAfmF,MACRwc,GAAiBwB,sBAAsBhe,KAP/C,+BAcc,IACEA,EAAUpF,KAAKC,MAAfmF,MACFmf,EAAY3C,GAAiBwB,sBAAsBhe,GACnDof,EAAS,CACX,CAAEC,MAAOC,GAAgBzkB,MAAM,6BAAMD,KAAKC,OAAZ,IAAmBK,UAAW,gBAC5D,CAAEmkB,MAAON,GAAgBlkB,MAAM,6BAAMD,KAAKC,OAAZ,IAAmBK,UAAW,gBAC5D,CAAEmkB,MAAOE,GAAa1kB,MAAM,6BAAMD,KAAKC,OAAZ,IAAmBK,UAAW,iBAG7D,OACI,qBAAKA,UAAU,0BAAf,SACKikB,EAAU5d,KAAI,SAACrJ,EAAMua,GAAS,IAAD,EACD2M,EAAO3M,GAAxB4M,EADkB,EAClBA,MAAOxkB,EADW,EACXA,MACf,OACI,0BAA0BK,UAAU,yBAApC,UACI,cAAC8jB,GAAD,CAAsB9mB,KAAMA,IAC5B,cAACmnB,EAAD,gBAAWxkB,MAFD3C,EAAKgG,gBA5B3C,GAA+B3C,aCIzBikB,G,4MAEFllB,MAAQ,CACJgZ,iBAAiB,EACjBmM,eAAe,G,EAInBC,kB,sBAAoB,4BAAAtnB,EAAA,6DACRkJ,EAAY,EAAKzG,MAAM6R,MAAMC,OAA7BrL,QACRma,GAAcE,QACdF,GAAcQ,KAAK,mBAAoB,CAAE0D,OAAQ,MAAOre,YACxDma,GAAcI,GAAG,mBAAoB,EAAK+D,gBAJ1B,SAKV,EAAK/kB,MAAMglB,SAASve,GALV,2C,EAQpB4d,gBAAkB,WAA4C,IAA3C9M,EAA0C,wDAA/B,EAAK9X,MAAMgZ,gBACrC,EAAK3Y,SAAS,CAAE2Y,gBAAiBlB,IAAW,WACxC,EAAK9X,MAAMmlB,cAAgB,EAAK9kB,SAAS,CAAE8kB,eAAe,IACtD/iB,YAAW,WACP,EAAK/B,SAAS,CAAE8kB,eAAe,MAChC,S,EAkBfG,e,uCAAiB,+BAAAxnB,EAAA,6DAAS2O,EAAT,EAASA,aAAT,EAAuB5F,SAC9BnB,EADO,gBACM+G,GADN,SAEP,EAAKlM,MAAMgM,YAAY7G,EAAO,MAAM,GAF7B,2C,kPAbbyb,GAAcO,IAAI,mBAAoBphB,KAAKglB,gBAC3CnE,GAAcS,YACN2D,EAAajlB,KAAKC,MAAlBglB,S,SACFA,EAAS,M,+IAGA7Z,GAAY,IACnB1E,EAAY1G,KAAKC,MAAM6R,MAAMC,OAA7BrL,QACJ0E,EAAU0G,MAAMC,OAAOrL,UAAYA,GACnC1G,KAAKC,MAAMglB,SAASve,K,+BASlB,IAAD,EAC6B1G,KAAKC,MAA/BmF,EADH,EACGA,MAAO4B,EADV,EACUA,eADV,EAEsChH,KAAKN,MAAxCgZ,EAFH,EAEGA,gBAAiBmM,EAFpB,EAEoBA,cACzB,OAAKzf,EAED,sBAAK1E,QAAS,WACVsG,KAEDlB,MAAO,CAAEof,WAAY,QAHxB,UAII,qBAAK5kB,UAAU,UAAUwF,MAAO,CAAEyC,gBAAiBnD,EAAMU,MAAM0C,IAAM9H,QAAS,SAAAyG,GAAQA,EAAGI,qBACzF,sBAAKjH,UAAS,cAAd,UACI,cAAC,GAAD,6BAAiBN,KAAKC,OAAtB,IAA6BK,UAAWoY,GAAmB,iBAAkBA,gBAAiBA,EAAiB8B,kBAAmBxa,KAAKskB,oBACrIO,GAAiB,cAAChM,GAAD,6BAAW7Y,KAAKC,OAAhB,IAAuByY,gBAAiBA,KAC1D1Y,KAAKC,MAAM6R,MAAMC,OAAO1M,QAAU,cAACub,GAAD,OAEvC,qBACItgB,UAAS,2BAAsBoY,GAAmB,iBAAzC,aAA8DA,GAAmB,UAD9F,SAEI,cAAC,GAAD,CAAWtT,MAAOA,SAdX,cAACsC,GAAD,Q,GA/CF/G,aA6EnBC,GAAqB,CACvBqkB,SpCxFG,SAAkBve,GACrB,8CAAO,WAAMnH,GAAN,eAAA/B,EAAA,kEAGMkJ,EAHN,gBAGetB,EAAQ,KAHvB,sCAIoBd,EAAaE,QAAQkC,GAJzC,OAIMtB,EAJN,cAMC7F,EAAS,CAAEC,KAAM,YAAa4F,UAN/B,kDASCjJ,QAAQC,IAAI,oBAAZ,MATD,0DAAP,uDoCwFA6P,eACAjF,kBACAsF,kBAGS6Y,GAAYrkB,aAhBD,SAAApB,GACpB,MAAO,CACH0F,MAAO1F,EAAMsB,aAAa8K,UAC1B/K,cAAerB,EAAMsB,aAAaD,cAClCoP,YAAazQ,EAAMoZ,eAAe3I,YAClCxR,KAAMe,EAAMuB,YAAYtC,QAWkBiC,GAAzBE,CAA6C8jB,I,+BChGzDQ,GAAoB,SAACznB,GAE9B,IAAI0nB,EAA6D,KAA5C1nB,EAAI2nB,SAASC,YAAc,MAE1CC,EAAY,uCAAG,4BAAAhoB,EAAA,sEACMG,EAAI8nB,qBADV,OACbC,EADa,OAEnBL,EAA2D,KAA1CK,EAAWH,YAAc,MAC1CppB,QAAQC,IAAI,cAAespB,GAE3BnkB,aAAa9E,QAAQ,YAAaipB,EAAWC,UAG7C7jB,WAAW0jB,EAAcH,GARN,2CAAH,qDAYlBvjB,WAAW0jB,EAAcH,ICJvBO,GAAW,2EAGXC,G,4MAEFnmB,MAAQ,CACJomB,WAAY,CACRjnB,SAAU,GACVQ,SAAU,GACVT,SAAU,GACVyE,OAAQ,IAEZ0iB,UAAW,CACPlnB,SAAU,GACVD,SAAU,IAEdonB,YAAa,GACbC,WAAW,EACXlG,IAAK,GACLmG,aAAa,EACbnnB,UAAU,G,EAMdonB,qBAAuB,SAACxoB,GACpBxB,QAAQC,IAAIuB,EAAIyoB,YAChB,IAAMznB,EAAOhB,EAAIyoB,WACjB,EAAKrmB,SAAS,CACV+lB,WAAY,CACRjnB,SAAUF,EAAK0nB,MACfhnB,SAAUV,EAAKsK,KACfrK,SAAUD,EAAK2nB,SACfjjB,OAAQ1E,EAAK4nB,UACdxnB,UAAU,IAEjBqmB,GAAkBznB,I,EAItB6oB,qBAAuB,SAAC7oB,GACpBxB,QAAQC,IAAI,qBAAsBuB,I,EAKtC0N,S,uCAAW,WAAOlE,GAAP,2BAAA3J,EAAA,yDACP2J,EAAGsD,iBACHtD,EAAGI,kBAFI,EAGgD,EAAK7H,MAApDomB,EAHD,EAGCA,WAAYC,EAHb,EAGaA,UAAWE,EAHxB,EAGwBA,UAAWlnB,EAHnC,EAGmCA,UAG3B0nB,EAAXR,EAAuBH,EACVC,GAEFnnB,UAAa6nB,EAAU5nB,SAT/B,uBAUH,EAAKkB,SAAS,CAAEggB,IAAK,oCAVlB,0CAeK2G,EAAY,EAAKzmB,MAAjBymB,QAfL,UAgBGA,EAAQD,EAAWR,EAAWlnB,GAhBjC,WAiBc,EAAKkB,MAAdtB,KAjBL,mDAmBH,EAAKoB,SAAS,CAAEggB,IAAK,KACjB,EAAK9f,MAAMtB,KAAM,EAAKsB,MAAMG,QAAQ0G,KAAnB,UAChB,EAAK7G,MAAMG,QAAQ0G,KAAnB,UArBF,kDAwBH3K,QAAQC,IAAI,6CACZD,QAAQC,IAAR,KAAiB,gBACjB,EAAK2D,SAAS,CAAEggB,IAAK,yBACrB,EAAK9f,MAAMG,QAAQ0G,KAAnB,UA3BG,0D,wDAgCX6D,YAAc,YAAiB,IAAdlB,EAAa,EAAbA,OACPvN,EAAQuN,EAAOvN,MACf0O,EAAQnB,EAAOR,KACjB0d,EAAa,EAAKjnB,MAAMumB,UAAY,aAAe,YACvD,EAAKlmB,UAAS,SAAA8K,GACV,OAAO,gBACF8b,EADL,6BAEW9b,EAAU8b,IAFrB,mBAGS/b,EAAQ1O,S,EAMzB0qB,YAAc,SAACzf,GACXA,EAAGsD,iBACH,EAAK1K,UAAS,SAAA8K,GACV,MAAO,CACHob,WAAYpb,EAAUob,UACtBlG,IAAK,Q,EAMjBH,Y,uCAAc,WAAMzY,GAAN,iBAAA3J,EAAA,6DACV,EAAKuC,SAAS,CAAEmmB,aAAa,IADnB,kBAGuBhH,GAAkBC,UAAUhY,EAAGsC,OAAOoW,MAAM,IAHnE,gBAGEC,EAHF,EAGEA,WACR3jB,QAAQC,IAAI,OAAQ0jB,GACpB,EAAK/f,SAAS,CAAE+lB,WAAW,6BAAM,EAAKpmB,MAAMomB,YAAlB,IAA8BziB,OAAQyc,IAAcoG,aAAa,GACrF/pB,QAAQC,IAAI,SAAU,EAAKsD,MAAMomB,aANjC,kDASN,EAAK/lB,SAAS,CAAEggB,IAAK,wCACrB5jB,QAAQC,IAAI,2BAAZ,MAVM,0D,wDAcdyqB,S,sBAAW,sBAAArpB,EAAA,sEACD,EAAKyC,MAAMX,YADV,OAEP,EAAKS,SAAS,CACV+lB,WAAY,CACRjnB,SAAU,GACVQ,SAAU,GACVT,SAAU,GACVyE,OAAQ,IAEZ0iB,UAAW,CACPlnB,SAAU,GACVD,SAAU,IAEdqnB,WAAW,EACXlG,IAAK,GACLmG,aAAa,EACbnnB,UAAU,IAhBP,2C,uDAwBD,IAAD,EAC0DiB,KAAKN,MAA5DomB,EADH,EACGA,WAAYC,EADf,EACeA,UAAWE,EAD1B,EAC0BA,UAAWC,EADrC,EACqCA,YAAanG,EADlD,EACkDA,IAC/CphB,EAASqB,KAAKC,MAAdtB,KACR,OAEI,eAAC,WAAD,WACI,qBAAK2B,UAAU,kBAAf,eACA,qBAAKA,UAAU,uCAAf,SAGI,sBAAKA,UAAS,qCAAgC4lB,GAAe,eAA7D,UAKKvnB,GAAQ,sBAAK2B,UAAU,cAAf,UACL,0CAAa3B,EAAKU,YAClB,qBAAKiB,UAAU,SAASwF,MAAO,CAAEyC,gBAAgB,OAAD,OAAS5J,EAAK0E,OAAd,MAAhD,eACA,yBAAQ/C,UAAU,cAAlB,cAAiC,cAAC,IAAD,CAAMC,GAAG,SAAT,yBAAjC,OACA,oBAAGG,QAASV,KAAK6mB,SAAjB,cAA4B,cAAC,gBAAD,CACxBjB,SAAUA,GACVkB,WAAW,SACXC,gBAAiB/mB,KAAK6mB,kBAQ5BloB,GAAQsnB,GAAa,gCACnB,uBAAM3lB,UAAS,aAAgB+K,SAAUrL,KAAKqL,SAA9C,UAGI,yCACA,sCAAQ,sBAAK/K,UAAU,0CAA0CwF,MAAO,CACpEyC,gBAAgB,QAAD,OAAUud,EAAWziB,OAArB,MADX,cAEJ,cAAC,KAAD,CAAeyC,MAAO,CAAElD,MAAO,YAActC,UAAWwlB,EAAWziB,QAAU,WAFzE,QAGJ,uBAAO0G,SAAU/J,KAAK4f,YAAapgB,KAAK,OAAOygB,QAAM,OAGzD,cAAC,eAAD,CACI3f,UAAU,WACVslB,SAAUA,GACVoB,aAAa,2BACbC,OAAO,EACPC,YAAaC,yCAEbL,WAAW,oBACXM,UAAWpnB,KAAKmmB,qBAChBkB,UAAWrnB,KAAKwmB,qBAChBc,aAAc,qBAEdC,YAAqB,IAAT5oB,IAKhB,uBAAOa,KAAK,OAAOtD,MAAO4pB,EAAWzmB,SAAU4J,KAAK,WAAWa,YAAY,OAAOC,SAAU/J,KAAK2K,cACjG,uBAAOnL,KAAK,OAAOtD,MAAO4pB,EAAWjnB,SAAUoK,KAAK,WAAWa,YAAY,WAAWC,SAAU/J,KAAK2K,cACrG,uBAAOnL,KAAK,WAAWc,UAAU,WAAWpE,MAAO4pB,EAAWlnB,SAAUqK,KAAK,WAAWa,YAAY,WAAWC,SAAU/J,KAAK2K,iBAIlI,sBAAM7E,MAAO,CAAE4K,QAAS,SAAxB,SAAoCqP,IACpC,wBAAQzf,UAAU,cAAcI,QAASV,KAAKqL,SAA9C,SAAwD,cAAC,KAAD,MACxD,0DAA4B,sBAAM3K,QAASV,KAAK4mB,YAApB,qBAA5B,WAIFjoB,IAASsnB,GAAa,gCACpB,uBAAO3lB,UAAS,oBAAuB+K,SAAUrL,KAAKqL,SAAtD,UAGI,wCAEA,uBAAO7L,KAAK,OAAOyJ,KAAK,WAAW/M,MAAO6pB,EAAUlnB,SAAUiL,YAAY,WAAWC,SAAU/J,KAAK2K,cACpG,uBAAOnL,KAAK,WAAWyJ,KAAK,WAAW/M,MAAO6pB,EAAUnnB,SAAUkL,YAAY,WAAWC,SAAU/J,KAAK2K,cAGxG,sBAAM7E,MAAO,CAAE4K,QAAS,SAAxB,SAAoCqP,OAExC,wBAAQvgB,KAAK,SAASc,UAAU,cAAcI,QAASV,KAAKqL,SAA5D,SAAsE,cAAC,KAAD,MACtE,uDAAyB,sBAAM3K,QAASV,KAAK4mB,YAApB,qBAAzB,UAIJ,qBAAKtmB,UAAU,oB,GAlOZK,aAkPrBC,GAAqB,CACvB8lB,QvD/PG,SAAiB/nB,EAAMsnB,EAAWlnB,GACrC,8CAAO,WAAOQ,GAAP,eAAA/B,EAAA,mEAGKyoB,EAHL,gCAGmC9nB,EAAYG,OAAOK,EAAMI,GAH5D,OAGgBD,EAHhB,8CAIyBX,EAAYE,MAAMM,GAJ3C,OAIMG,EAJN,eAWCS,EALe,CACXC,KAAM,WACNV,eARL,kDAaC3C,QAAQC,IAAI,8BAAZ,MAbD,0DAAP,uDuD+PAkD,aC9PSkoB,GAAS,CACpB,CACEC,KAAM,IACNC,UAAWvmB,GAEb,CACEsmB,KAAK,oCACLC,UAAWvC,IAEb,CACEsC,KAAM,SACNC,UAAWjc,IAEb,CACEgc,KAAM,SACNC,UDkPuB5mB,aAXH,SAAApB,GACpB,MAAO,CACHf,KAAMe,EAAMuB,YAAYtC,QASoBiC,GAAzBE,CAA6C+kB,MErPzD8B,OAbf,WACE,OACE,eAAC,IAAD,WACE,cAAC9mB,EAAD,IACA,sBAAMP,UAAU,MAAhB,SACE,cAAC,IAAD,UACGknB,GAAO7gB,KAAI,SAAAihB,GAAK,OAAI,cAAC,IAAD,CAAOC,OAAK,EAAkBJ,KAAMG,EAAMH,KAAMC,UAAWE,EAAMF,WAA/CE,EAAMH,iBCEnCK,QACW,cAA7B/pB,OAAOC,SAAS+pB,UAEe,UAA7BhqB,OAAOC,SAAS+pB,UAEhBhqB,OAAOC,SAAS+pB,SAASjW,MAAM,2DCjBnC,IAYekW,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCNRQ,GAAe,CACjB3c,UAAW,KACX8J,YAAY,EACZqF,YAAa,KACbC,YAAa,KACbna,eAAe,EACf2nB,eAAe,GCNnB,IAAMD,GAAe,CACjB9pB,KAAM,MCFV,IAAM8pB,GAAe,CACjBtY,YAAa,ICKjB,IAAMwY,GAAcC,aAAgB,CAChC5nB,aHGG,WAAqD,IAA/BtB,EAA8B,uDAAtB+oB,GAAcI,EAAQ,uCACvD,OAAQA,EAAOrpB,MACX,IAAK,YACD,OAAO,6BAAKE,GAAZ,IAAmBoM,UAAW+c,EAAOzjB,QACzC,IAAK,cACD,OAAO,6BAAK1F,GAAZ,IAAmBkW,YAAalW,EAAMkW,aAC1C,IAAK,yBACD,OAAO,6BAAKlW,GAAZ,IAAmBub,YAAa4N,EAAOnjB,QAASwV,YAAa2N,EAAOljB,UACxE,IAAK,eACD,OAAO,6BAAKjG,GAAZ,IAAmBoM,UAAW+c,EAAO1c,eACzC,IAAK,iBACD,OAAO,6BAAKzM,GAAZ,IAAmBqB,eAAgBrB,EAAMqB,gBAC7C,IAAK,qBACD,OAAO,6BAAKrB,GAAZ,IAAmBgpB,cAAeG,EAAOC,YAC7C,QACI,OAAOppB,IGjBfuB,YFFG,WAAoD,IAA/BvB,EAA8B,uDAAtB+oB,GAAcI,EAAQ,uCACtD,OAAQA,EAAOrpB,MACX,IAAK,WACD,OAAO,6BAAKE,GAAZ,IAAmBf,KAAMkqB,EAAO/pB,aACpC,IAAK,aACD,OAAO,6BAAKY,GAAZ,IAAmBf,KAAM,OAC7B,QAEI,OADAxC,QAAQC,IAAI,SACLsD,IELfoZ,eDHG,WAAuD,IAA/BpZ,EAA8B,uDAAtB+oB,GAAcI,EAAQ,uCACzD,OAAQA,EAAOrpB,MACX,IAAK,mBACD,OAAO,6BAAKE,GAAZ,IAAmByQ,YAAa0Y,EAAO/V,UAC3C,QACI,OAAOpT,MCEbqpB,GAAmBhrB,OAAOirB,sCAAwCC,KAC3DjtB,GAAQktB,aAAYP,GAAaI,GAAiBI,aAAgBC,QCJ/EC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUvtB,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ4D,SAAS4pB,eAAe,SN+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAACyB,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACN5tB,QAAQ4tB,MAAMA,EAAMC,YM1G5BhC,O","file":"static/js/main.f0fefc57.chunk.js","sourcesContent":["export const sessionService = {\r\n    store,\r\n    load,\r\n    clear\r\n}\r\n\r\n\r\nfunction clear() {\r\n    sessionStorage.clear();\r\n}\r\n\r\nfunction store(key, value) {\r\n    console.log('saved to session!');\r\n    const val = JSON.stringify(value)\r\n    sessionStorage.setItem(key, val);\r\n\r\n}\r\n\r\n\r\nfunction load(key, defaultValue = null) {\r\n    var value = sessionStorage.getItem(key);\r\n    if (!value) return defaultValue\r\n    else return JSON.parse(value);\r\n}\r\n\r\n","import Axios from \"axios\";\n\nconst BASE_URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"/api/\"\n    : \"http://localhost:3031/api/\";\n\nvar axios = Axios.create({\n  withCredentials: true,\n});\n\nexport const httpService = {\n  get(endpoint, data) {\n    return ajax(endpoint, \"GET\", data);\n  },\n  post(endpoint, data) {\n    return ajax(endpoint, \"POST\", data);\n  },\n  put(endpoint, data) {\n    return ajax(endpoint, \"PUT\", data);\n  },\n  delete(endpoint, data) {\n    return ajax(endpoint, \"DELETE\", data);\n  },\n};\n\nasync function ajax(endpoint, method = \"get\", data = null) {\n  try {\n    const res = await axios({\n      url: `${BASE_URL}${endpoint}`,\n      method,\n      data,\n    });\n    return res.data;\n  } catch (err) {\n    console.log(\n      `Had Issues ${method}ing to the backend, endpoint: ${endpoint}, with data: ${data}`\n    );\n    console.dir(err);\n    if (err.response && err.response.status === 401) {\n      window.location.assign(\"/#/login\");\n    }\n    throw err;\n  }\n}\n","import { httpService } from './httpService'\r\nimport { sessionService } from './sessionStorageService'\r\nconst endpoint = 'user'\r\nconst KEY = 'loggedUserDB'\r\n\r\nexport const userService = {\r\n    getUsers,\r\n    login,\r\n    signup,\r\n    filterUsersBy,\r\n    checkLoggedUser,\r\n    logout\r\n}\r\n\r\nasync function getUsers() {\r\n    const users = await httpService.get(endpoint)\r\n    return users\r\n}\r\n\r\nasync function login(user) {\r\n    let loggedUser;\r\n    try {\r\n        loggedUser = await httpService.post(`${endpoint}/login/?password=${user.password}&username=${user.username}`)\r\n        delete loggedUser.password\r\n        sessionService.store(KEY, loggedUser)\r\n        console.log('logged', loggedUser);\r\n    } catch (err) {\r\n        console.log('couldnt find user');\r\n    }\r\n    return loggedUser\r\n}\r\n\r\nasync function signup(user, isGoogle) {\r\n    console.log('userrrr', user);\r\n    try {\r\n        const newUser = await httpService.post(`${endpoint}/signup`, { user, isGoogle })\r\n        delete newUser.password\r\n        sessionService.store(KEY, newUser)\r\n        return user\r\n    } catch (err) {\r\n        console.log('problem signing in ', err);\r\n    }\r\n}\r\n\r\n\r\nasync function filterUsersBy(value) {\r\n    try {\r\n\r\n        var users = await httpService.get(endpoint)\r\n        const regex = new RegExp(value, 'i')\r\n        users = users.filter(user => regex.test(user.fullname) || regex.test(user.username))\r\n        console.log('filtered users:', users);\r\n        return users\r\n    } catch (err) {\r\n        console.log(err);\r\n    }\r\n}\r\n\r\nfunction checkLoggedUser() {\r\n    return sessionService.load(KEY)\r\n}\r\n\r\nasync function logout() {\r\n    try {\r\n        await httpService.post(`${endpoint}/logout`)\r\n        sessionService.clear()\r\n    } catch (err) {\r\n        console.log('couldnt log out ', err);\r\n    }\r\n\r\n}","import { sessionService } from \"../../services/sessionStorageService\";\r\nimport { userService } from \"../../services/userService\"\r\n\r\nexport function setUser(user, isNewUser, isGoogle) {\r\n    return async (dispatch) => {\r\n        var loggedUser;\r\n        try {\r\n            if (isNewUser) loggedUser = await userService.signup(user, isGoogle)\r\n            else loggedUser = await userService.login(user)\r\n            // delete loggedUser.password\r\n            const action = {\r\n                type: 'SET_USER',\r\n                loggedUser\r\n            }\r\n            // sessionService.store('loggedUserDB', loggedUser)\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log('had problem seting the user', err);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function clearUser() {\r\n    console.log('logging out from action');\r\n    return async (dispatch) => {\r\n        try{\r\n             userService.logout()\r\n        \r\n            const action = {\r\n                type: 'CLEAR_USER',\r\n            }\r\n            dispatch(action)\r\n            \r\n        }catch{\r\n            console.log('couldnt log out!!');\r\n        }\r\n    }\r\n}\r\nexport function setUserAfterRefresh(loggedUser) {\r\n\r\n    return (dispatch) => {\r\n        const action = {\r\n            type: 'SET_USER',\r\n            loggedUser\r\n        }\r\n        dispatch(action)\r\n    }\r\n}","\r\nfunction on(eventName, listener) {\r\n\r\n    const callListener = ({ detail }) => {\r\n        listener(detail);\r\n    };\r\n    window.addEventListener(eventName, callListener);\r\n    \r\n    return () => {\r\n        window.removeEventListener(eventName, callListener);\r\n    };\r\n}\r\n\r\nfunction emit(eventName, data) {\r\n    window.dispatchEvent(new CustomEvent(eventName, { detail: data }));\r\n}\r\n\r\n\r\nexport const eventBusService = { on, emit };","import React, { Component } from 'react'\r\nimport { NavLink, withRouter } from 'react-router-dom'\r\n\r\nimport { connect } from 'react-redux'\r\nimport { clearUser, setUserAfterRefresh } from '../store/actions/userAction'\r\nimport { eventBusService } from '../services/eventBusService'\r\nimport { userService } from '../services/userService'\r\n\r\n class _AppHeader extends Component {\r\n    state = {\r\n        navBgc: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener('scroll', () => {\r\n            if (window.scrollY > 100) {\r\n                this.setState({ navBgc: 'colored-nav' })\r\n            } else {\r\n                this.setState({ navBgc: 'homepage-nav' })\r\n            }\r\n        })\r\n\r\n        const loggedUser = userService.checkLoggedUser()\r\n        console.log('user from header:', loggedUser);\r\n        if (loggedUser) this.props.setUserAfterRefresh(loggedUser)\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const currPath = this.props.history.location.pathname\r\n        const { navBgc } = this.state\r\n        const { user } = this.props\r\n        return (\r\n            <header className={`main-nav-header flex align-center  ${currPath === '/' ? navBgc : ''} ${currPath === '/login' || currPath === '/board' ? \"homepage-nav\" : \"\"}`}>\r\n                <ul className=\"main-nav  flex clear-list flex \">\r\n                    <li className=\"logo\"><NavLink to=\"/\"><span>Chello</span></NavLink></li>\r\n                    {user && <li className=\"user-desc flex align-center\"> Hello, {user.fullname.substring(0, user.fullname.indexOf(' '))} </li>}\r\n                    <li><NavLink to=\"/board\"><span>Boards</span></NavLink></li>\r\n                    {!user && <li><NavLink to=\"/login\"><span >Login</span></NavLink></li>}\r\n                    {user && <li className=\"logout flex align-center\" onClick={this.props.clearUser} > Logout </li>}\r\n                </ul>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isOverlayOpen: state.boardReducer.isOverlayOpen,\r\n        user: state.userReducer.user\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    clearUser,\r\n    setUserAfterRefresh\r\n}\r\n\r\n\r\n\r\n\r\nexport const AppHeader = connect(mapStateToProps, mapDispatchToProps)(withRouter(_AppHeader))","import React, { Component } from 'react'\r\n\r\nexport class HomePage extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <main className=\"home-page\">\r\n                <section className=\"homepage-fold\">\r\n                    <div className=\"homepage-heading flex column  justify-center align-center\">\r\n                        <h1>Chello</h1>\r\n                        <h2>Task Managment,</h2>\r\n                        <h2>The <span>Clever</span> Way.</h2>\r\n                        <a href=\"/board/600c504bd8ab8f77385f28c6\" className=\"cta-btn primary-btn\">Start Now</a>\r\n                    </div>\r\n                    <div className=\"homepage-image\">\r\n                    </div>\r\n                </section>\r\n\r\n                <section className=\"features  \">\r\n                    <div className=\"features-feature-1\">\r\n                        <div className=\"feature-1-bg\"></div>\r\n                        <div className=\"feature-1-txt flex column justify-center\">\r\n                            <h3>All the tools your team needs</h3>\r\n                            <span>Organize and assign tasks.</span>\r\n                            <span>With lists, teams see immediately what they need to do,</span>\r\n                            <span>which tasks are a priority, and when work is due.</span>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"features-feature-2\">\r\n                        <div className=\"feature-2-txt flex column justify-center\">\r\n                            <h3>Manage your time wisely</h3>\r\n                            <span>Instantly see which projects are on track,</span>\r\n                            <span>which ones are falling behind,</span>\r\n                            <span>and what every team member is working on at a glance.</span>\r\n                        </div>\r\n                        <div className=\"feature-2-bg\"></div>\r\n                    </div>\r\n                    <div className=\"features-feature-3\">\r\n                        <div className=\"feature-3-bg\"></div>\r\n                        <div className=\"feature-3-txt flex column justify-center\">\r\n                            <h3>Organize anything</h3>\r\n                            <h3>with anyone, anywhere</h3>\r\n                            <span>Bring your team’s work together in one shared space.</span>\r\n                            <span>Choose the project view that suits your style, and collaborate no matter where you are.</span>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <section className=\"bottom-cta flex justify-center\">\r\n                        <a href=\"/board/600c504bd8ab8f77385f28c6\">\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                            <span></span>\r\n                            Get Started</a>\r\n                    </section>\r\n                </section>\r\n                <footer className=\"flex align-center justify-center\">\r\n                    <p>® 2021 Chello | Reem Ben David | <a href=\"https://www.linkedin.com/in/yehonathan-segev-743a431a5/\">Yehonathan Segev</a> | Nofar Yunger</p>\r\n                </footer>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n","export const storageService = {\r\n    store,\r\n    load,\r\n    clear,\r\n    saveToLocalStorage,\r\n    loadFromLocalStorage\r\n}\r\n\r\n\r\nfunction clear() {\r\n    sessionStorage.clear();\r\n}\r\n\r\nfunction store(key, value) {\r\n    sessionStorage[key] = JSON.stringify(value);\r\n}\r\n\r\nfunction load(key, defaultValue = null) {\r\n    var value = sessionStorage[key];\r\n    if (!value) return defaultValue\r\n    else return JSON.parse(value);\r\n}\r\nfunction saveToLocalStorage(key, value) {\r\n    localStorage[key] = JSON.stringify(value);\r\n}\r\n\r\nfunction loadFromLocalStorage(key, defaultValue = null) {\r\n    var value = localStorage[key];\r\n    if (!value) return defaultValue\r\n    else return JSON.parse(value);\r\n}\r\n\r\n","\r\nexport const utilService = {\r\n    delay,\r\n    getRandomInt,\r\n    makeId,\r\n    formatTime,\r\n    getRandomColor,\r\n    formActivity,\r\n    lightenColor\r\n}\r\n\r\nfunction delay(ms = 1500) {\r\n    return new Promise(resolve => {\r\n        setTimeout(resolve, ms)\r\n    })\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\r\n}\r\n\r\nfunction makeId(length = 5) {\r\n    var txt = '';\r\n    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (var i = 0; i < length; i++) {\r\n        txt += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return txt;\r\n}\r\n\r\nfunction formActivity({ user, txt, task = null }) {\r\n    return {\r\n        id: makeId(),\r\n        createdAt: Date.now(),\r\n        txt,\r\n        byMember: { imgUrl: user?.imgUrl, fullname: user?.fullname || 'Guest' },\r\n        task: task ? { id: task.id, title: task.title } : null\r\n    }\r\n}\r\nfunction formatTime(timestamp) {\r\n    const date = new Date(timestamp).toLocaleDateString();\r\n    return date;\r\n}\r\n\r\nfunction getRandomColor() {\r\n    var letters = '0123456789ABCDEF';\r\n    var color = '#';\r\n    for (var i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n}\r\nfunction lightenColor(color, percent) {\r\n    var num = parseInt(color.replace(\"#\",\"\"), 16),\r\n      amt = Math.round(2.55 * percent),\r\n      R = (num >> 16) + amt,\r\n      B = (num >> 8 & 0x00FF) + amt,\r\n      G = (num & 0x0000FF) + amt;\r\n\r\n      return (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);\r\n};","import { httpService } from './httpService'\r\nimport { storageService } from './storageService'\r\nimport { utilService } from './utilService'\r\n\r\n\r\nexport const boardService = {\r\n    query,\r\n    getById,\r\n    save,\r\n    remove,\r\n    getTaskById,\r\n    getListIdxById,\r\n    getTaskIdxById,\r\n    getLabelIdxById,\r\n    getListAndTaskIdxById,\r\n    getEmptyList,\r\n    getNotifications,\r\n    saveNotifications,\r\n    getListByTaskId\r\n}\r\n\r\nconst endpoint = 'board'\r\nconst NOTIFICATION_KEY = 'notificationDB'\r\n\r\nasync function query() {\r\n    const boards = await httpService.get(endpoint)\r\n    return boards\r\n}\r\n\r\n//UPDATES ENTIRE BOARD FOR ANY CHANGE INSIDE THE BOARD\r\nasync function save(board, activity = null) {\r\n    var savedBoard;\r\n\r\n    if (!board._id) {\r\n        savedBoard = await httpService.post(endpoint, board)\r\n    } else {\r\n        savedBoard = await httpService.put(`${endpoint}/${board._id}`, { board, activity })\r\n    }\r\n\r\n    return savedBoard\r\n}\r\n\r\n//ONLY FOR REMOVAL OF ENTIRE BOARD\r\nasync function remove(boardId) {\r\n    await httpService.delete(`${endpoint}/${boardId}`)\r\n}\r\n\r\nasync function getById(boardId) {\r\n    const board = await httpService.get(`${endpoint}/${boardId}`)\r\n    return board\r\n}\r\n\r\n\r\n\r\n\r\n// REFACTOR TO SYNCHRONOUS\r\nasync function getTaskById(boardId, taskId) {\r\n    const board = await getById(boardId)\r\n    let tasks = board.lists.map(list => list.tasks)\r\n    const taskIds = []\r\n    tasks.forEach(task => {\r\n        taskIds.push(...task)\r\n    })\r\n    const task = taskIds.find(task => task.id === taskId)\r\n    return task\r\n}\r\n\r\nfunction getTaskIdxById(list, taskId) {\r\n    const taskIdx = list.tasks.findIndex(task => task.id === taskId)\r\n    return taskIdx\r\n}\r\n\r\nfunction getListIdxById(board, listId) {\r\n    const listIdx = board.lists.findIndex(list => list.id === listId)\r\n    return listIdx\r\n}\r\n\r\nfunction getListByTaskId(board, taskId) {\r\n    const list = board.lists.find(list => {\r\n        return list.tasks.some(task => task.id === taskId)\r\n    })\r\n    return list\r\n}\r\nfunction getListAndTaskIdxById(board, listId, taskId) {\r\n    const list = board.lists.find(list => list.id === listId)\r\n    const listIdx = getListIdxById(board, listId)\r\n    const taskIdx = getTaskIdxById(list, taskId)\r\n    return { listIdx, taskIdx }\r\n}\r\n\r\nfunction getLabelById(task, id) {\r\n    const label = task.labels.map(label => label.id === id)\r\n}\r\n\r\nfunction getLabelIdxById(task, labelId) {\r\n    const labelIdx = task.labels.findIndex(label => label.id === labelId)\r\n    return labelIdx\r\n}\r\n\r\nfunction getEmptyList() {\r\n    return {\r\n        id: 'k23eps34fc',\r\n        title: '',\r\n        tasks: [],\r\n        style: {\r\n            title: { bgColor: '#3cc2e0' }\r\n        }\r\n    }\r\n}\r\n\r\nfunction getNotifications() {\r\n    return storageService.loadFromLocalStorage(NOTIFICATION_KEY) || [\r\n        {\r\n            id: 'i101',\r\n            txt: 'Yoni added you to task i101'\r\n        },\r\n        {\r\n            id: 'i102',\r\n            txt: 'Nofar broke the server'\r\n        },\r\n        {\r\n            id: 'i103',\r\n            txt: 'Its time for shnatz'\r\n        },\r\n        {\r\n            id: 'i104',\r\n            txt: 'Guest has joined the board'\r\n        }\r\n    ]\r\n}\r\n\r\nfunction saveNotifications(notifications) {\r\n    storageService.saveToLocalStorage(NOTIFICATION_KEY, notifications)\r\n}","import CloseIcon from '@material-ui/icons/Close';\r\n\r\nexport function PopoverHeader({ title, setCurrPopover, className }) {\r\n\r\n    return <div className={`popover-header flex align-center justify-center ${className && className}`}>\r\n        <span className=\"popover-header-title\">{title}</span>\r\n        <CloseIcon className=\"close-icon\" onClick={setCurrPopover} />\r\n    </div>\r\n}","import { PopoverHeader } from './PopoverHeader'\r\nimport onClickOutside from 'react-onclickoutside'\r\nimport { Component } from 'react'\r\n\r\n class _BoardActions extends Component {\r\n \r\n    handleClickOutside = ev => {\r\n        this.props.toggleBoardActions(false)\r\n    }\r\n\r\n    render() {\r\n        const { board, onEditBoard, onRemoveBoard, toggleBoardActions } = this.props\r\n        return (\r\n            <div className=\"board-actions-popover\" onClick={(ev) => ev.stopPropagation()}>\r\n                <PopoverHeader title='Board Actions' setCurrPopover={(ev) => {\r\n                    ev.stopPropagation()\r\n                    toggleBoardActions()\r\n                }} />\r\n                <section className=\"popover-section\">\r\n                    <ul className=\"popover-section-list clear-list\">\r\n                        <li className=\"add-task popover-section-list-item\" onClick={(ev) => {\r\n                            toggleBoardActions()\r\n                            onEditBoard(board)\r\n                        }}>Edit board...</li>\r\n                        <li className=\"remove-list popover-section-list-item\" onClick={(ev) => {\r\n                            toggleBoardActions()\r\n                            onRemoveBoard(board._id)\r\n                        }}>Remove board...</li>\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const BoardActions = onClickOutside(_BoardActions)","import React from \"react\";\r\nimport { usePromiseTracker } from \"react-promise-tracker\";\r\nimport Loader from \"react-loader-spinner\";\r\n\r\nexport function LoadingSpinner(props) {\r\n    // const { promiseInProgress } = usePromiseTracker();\r\n\r\n    return (\r\n        // promiseInProgress && (\r\n            <div className=\"spinner flex justify-center align-center column\" style={{width:\"100%\",height:\"100%\",position:\"fixed\"  }}>\r\n               {/* <h1>Loading...</h1> */}\r\n                <Loader type=\"ThreeDots\" color=\"#6c63ff\" height=\"100\" width=\"100\" />\r\n            </div>\r\n        // )\r\n    );\r\n};          \r\n\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { BoardActions } from './BoardActions'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\n\r\nexport class BoardPreview extends Component {\r\n\r\n    state = {\r\n        isBoardActionsOpen: false,\r\n        isBoardHovered: false\r\n    }\r\n    toggleBoardActions = (toggle = !this.state.isBoardActionsOpen) => {\r\n        this.setState({ isBoardActionsOpen: toggle })\r\n    }\r\n\r\n    boardPreviewHandlers = {\r\n        onMouseEnter: () => {\r\n            this.setState({ isBoardHovered: true })\r\n        },\r\n        onMouseLeave: () => {\r\n            this.setState({ isBoardHovered: false })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { board, onRemove, onEdit } = this.props\r\n        if (!board) return <LoadingSpinner/>\r\n        return (\r\n            <div {...this.boardPreviewHandlers}\r\n                className={`board-card flex flex justify-center align-center ${this.state.isBoardActionsOpen && 'board-actions-open'}`} style={{ backgroundImage: board.style?.bg }} >\r\n                <Link to={`/board/${board._id}`}><h1>{board.title}</h1></Link>\r\n                <div className=\"card-overlay\"></div>\r\n                <div className=\"board-actions-popover-wrapper\">\r\n                    {this.state.isBoardHovered && <MoreHorizIcon className={`toggle-actions-icon`} onClick={this.toggleBoardActions} />}\r\n                    {this.state.isBoardActionsOpen &&\r\n                        <BoardActions\r\n                            board={board}\r\n                            onRemoveBoard={onRemove}\r\n                            onEditBoard={onEdit}\r\n                            {...this.props}\r\n                            toggleBoardActions={this.toggleBoardActions} />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BoardPreview } from './BoardPreview'\r\nimport AddIcon from '@material-ui/icons/Add';\r\n\r\nexport class BoardList extends Component {\r\n    render() {\r\n        const { boards, onRemove, onEdit, onToggleCompose } = this.props\r\n        return (\r\n            <div className=\"board-box board-layout\">\r\n                {boards.map(board => <BoardPreview key={board._id} onRemove={onRemove} board={board} onEdit={onEdit} />)}\r\n                <div className=\"board-card flex flex justify-center align-center add-board\" onClick={onToggleCompose}>\r\n                    <AddIcon className=\"add-board-icon\" /><div className=\"add-board-txt\">New</div></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { httpService } from \"./httpService\"\r\n\r\n\r\nexport const styleService = {\r\n\r\n    getBgOptions,\r\n    // letterAvatar\r\n}\r\n\r\n\r\nasync function getBgOptions() {\r\n\r\n    return [\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088348/trello%20background/pexels-photo-3769139_szaes1.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088331/trello%20background/pexels-photo-2310885_zczpxr.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088313/trello%20background/pexels-photo-266451_cyv6ux.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088301/trello%20background/pexels-photo-417173_oq55fd.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088285/trello%20background/pexels-photo-326055_bxexhu.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088271/trello%20background/pexels-photo-39811_mauelm.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088256/trello%20background/pexels-photo-934718_xv1kkf.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088244/trello%20background/pexels-photo-2246476_xueoqq.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088228/trello%20background/pexels-photo-4101555_svdfsl.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611088214/trello%20background/pexels-photo-1591305_ui4iai.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611059426/photo-1610377551984-9dc3f82aa31f_wuk20y.jpg')\",\r\n        \"url('https://res.cloudinary.com/nofar/image/upload/v1611328219/photo-1610720684893-619cd7a5cde5_zqn2tf.jpg')\",\r\n\r\n    ]\r\n}\r\n\r\n\r\n//  function letterAvatar(name, size) {\r\n\r\n//     name = name || '';\r\n//     size = size || 60;\r\n\r\n//     var colours = [\r\n//         \"#1abc9c\", \"#2ecc71\", \"#3498db\", \"#9b59b6\", \"#34495e\", \"#16a085\", \"#27ae60\", \"#2980b9\", \"#8e44ad\", \"#2c3e50\",\r\n//         \"#f1c40f\", \"#e67e22\", \"#e74c3c\", \"#ecf0f1\", \"#95a5a6\", \"#f39c12\", \"#d35400\", \"#c0392b\", \"#bdc3c7\", \"#7f8c8d\"\r\n//     ],\r\n\r\n//         nameSplit = String(name).toUpperCase().split(' '),\r\n//         initials, charIndex, colourIndex, canvas, context, dataURI;\r\n\r\n\r\n//     if (nameSplit.length === 1) {\r\n//         initials = nameSplit[0] ? nameSplit[0].charAt(0) : '?';\r\n//     } else {\r\n//         initials = nameSplit[0].charAt(0) + nameSplit[1].charAt(0);\r\n//     }\r\n\r\n\r\n//     charIndex = (initials === '?' ? 72 : initials.charCodeAt(0)) - 64;\r\n//     colourIndex = charIndex % 20;\r\n//     canvas = d.createElement('canvas');\r\n//     canvas.width = size;\r\n//     canvas.height = size;\r\n//     context = canvas.getContext(\"2d\");\r\n\r\n//     context.fillStyle = colours[colourIndex - 1];\r\n//     context.fillRect(0, 0, canvas.width, canvas.height);\r\n//     context.font = Math.round(canvas.width / 2) + \"px Arial\";\r\n//     context.textAlign = \"center\";\r\n//     context.fillStyle = \"#FFF\";\r\n//     context.fillText(initials, size / 2, size / 1.5);\r\n\r\n//     dataURI = canvas.toDataURL();\r\n//     canvas = null;\r\n\r\n//     return dataURI;\r\n// }\r\n","import Avatar from 'react-avatar';\r\n\r\n\r\nexport default function BoardMemberImg({ member, size = 30, className = null }) {\r\n\r\n    return (\r\n        //  <div className=\"task-member-img\"><img className=\"task-member-preview-img\" src={member?.imgUrl} /></div>\r\n        <Avatar className={`task-member-preview-img ${className}`} alt=\"task-member-preview-img\" name={member.fullname.toUpperCase()} size={size} textSizeRatio={1.75} fgColor='#fff' round={true} src={member.imgUrl} />\r\n    )\r\n\r\n\r\n}","import React, { Component } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { userService } from '../services/userService';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\nimport BoardMemberImg from './BoardMemberImg';\r\n\r\nexport class BoardMemberComposer extends Component {\r\n    state = {\r\n        users: [],\r\n        filterBy: ''\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUsers()\r\n    }\r\n\r\n\r\n    filterMembers = ({ target }) => {\r\n        const value = target.value\r\n        this.setState({ filterBy: value }, () => this.getUsers())\r\n\r\n    }\r\n\r\n\r\n    getUsers = async () => {\r\n        const { filterBy } = this.state\r\n        const usersToShow = await userService.filterUsersBy(filterBy)\r\n        this.setState({ users: usersToShow })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { isBoardMember, toggleMember, closeModal } = this.props\r\n        const { users } = this.state\r\n        if (!users) return <LoadingSpinner/>\r\n        return (\r\n            <div className=\"change-members-popover boards \" onClick={(ev) => { ev.stopPropagation() }}>\r\n                <div className=\"popover-header boards flex align-center justify-center\">\r\n                    <span className=\"popover-header-title\"> <input type=\"text\" placeholder=\"Add Members\" name=\"filterBy\" value={this.state.filterMembers} onChange={this.filterMembers} /></span>\r\n                    <CloseIcon className=\"close-icon\" onClick={() => closeModal()} />\r\n                </div>\r\n                <section className=\"popover-section\">\r\n                    <ul className=\"popover-section-list clear-list\">\r\n                        <h3 className=\"popover-section-header \">Board members</h3>\r\n                        {users.map(user => {\r\n                            return <li key={user._id} data-id={user._id} onClick={() => toggleMember(user)} style={{ height: '60px' }} className={`popover-section-list-item flex align-center ${isBoardMember(user._id) && 'picked'}`}>\r\n                                {isBoardMember(user._id) ? <DoneIcon /> : <AddIcon />}\r\n                                <BoardMemberImg member={user} size={40} />\r\n                                <span className=\"member-name\" data-id={user._id}>{user.fullname} </span>\r\n\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import { Component } from 'react'\r\nimport React, { Fragment } from 'react'\r\nimport { boardService } from '../services/boardService.js'\r\nimport { userService } from '../services/userService.js'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { utilService } from '../services/utilService.js'\r\nimport { styleService } from '../services/styleService.js'\r\nimport GroupAddIcon from '@material-ui/icons/GroupAdd';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { BoardMemberComposer } from './BoardMembersComposer.jsx'\r\n\r\nexport class _BoardComposer extends Component {\r\n\r\n    state = {\r\n        isMembersPreviewOpen: false,\r\n        newBoard: {\r\n            title: '',\r\n            members: [],\r\n            style: {\r\n                bg: '#3d3d3d'\r\n            }\r\n\r\n        },\r\n        users: [],\r\n        bgs: [],\r\n        filterMembersBy: '',\r\n        btnTxt: 'Create Board'\r\n    }\r\n\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { board } = this.props\r\n        if (prevProps.board === this.props.board) return\r\n        if (this.props.board) {\r\n            this.setState({\r\n                newBoard: {\r\n                    title: board.title,\r\n                    style: {\r\n                        bg: board.style.bg\r\n                    },\r\n                    members: board.members,\r\n                    _id: board._id\r\n                },\r\n                btnTxt: 'Update Board'\r\n            })\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getUsers()\r\n        this.loadBgs()\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.setState({\r\n            isMembersPreviewOpen: false,\r\n            newBoard: {\r\n                title: '',\r\n                members: [],\r\n                style: {\r\n                    bg: '#3d3d3d'\r\n                }\r\n\r\n            },\r\n            users: [],\r\n            bgs: [],\r\n            filterMembersBy: '',\r\n            btnTxt: 'Create Board'\r\n        })\r\n    }\r\n\r\n    onAddBoard = async (ev) => {\r\n        ev.preventDefault()\r\n        var { newBoard } = this.state\r\n        if (newBoard._id) {\r\n            newBoard = { ...this.props.board, ...newBoard }\r\n        }\r\n\r\n        const activity = {\r\n            txt: 'updated the board'\r\n        }\r\n        const savedBoard = await boardService.save(newBoard, activity)//add a new board to data\r\n        this.props.history.push(`/board/${savedBoard._id}`)//then gos to the board page\r\n    }\r\n\r\n\r\n\r\n    //gets all the bg style options from the service\r\n    loadBgs = async () => {\r\n        const bgs = await styleService.getBgOptions()\r\n        this.setState({ bgs })\r\n    }\r\n\r\n\r\n    //gets the filterd users from the data\r\n    getUsers = async () => {\r\n        const { filterMembersBy } = this.state\r\n        const usersToShow = await userService.filterUsersBy(filterMembersBy)\r\n        this.setState({ users: usersToShow })\r\n    }\r\n\r\n\r\n    handleInput = ({ target }) => {\r\n        const value = target.value\r\n        const field = target.name\r\n        this.setState(prevState => {\r\n            return {\r\n                newBoard: {\r\n                    ...prevState.newBoard,\r\n                    [field]: value\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    setBg = (bg) => {\r\n        this.setState({\r\n            newBoard: {\r\n                ...this.state.newBoard,\r\n                style: { ...this.state.newBoard.style, bg }\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    toggleMemberPreview = () => {\r\n        const memberPreview = this.state.isMembersPreviewOpen\r\n        this.setState({ isMembersPreviewOpen: !memberPreview })\r\n    }\r\n\r\n\r\n    closeMembersPreview = () => {\r\n        this.setState({ isMembersPreviewOpen: false })\r\n    }\r\n\r\n\r\n    isBoardMember = (id) => {\r\n        const { members } = this.state.newBoard\r\n        return members?.some(member => member._id === id)\r\n    }\r\n\r\n\r\n\r\n    toggleMember = (user) => {\r\n        let { members } = { ...this.state.newBoard }\r\n        const isMember = this.isBoardMember(user._id)\r\n\r\n        if (isMember) {//if the member is part of the board remove it\r\n            members = members.filter(member => member._id !== user._id)\r\n        } else { //else put it in\r\n            members.unshift(user)\r\n        }\r\n\r\n        const copyBoard = { ...this.state.newBoard }\r\n        copyBoard.members = members\r\n        this.setState({ newBoard: copyBoard })\r\n    }\r\n\r\n\r\n    render() {\r\n        const { bgs, newBoard, isMembersPreviewOpen, btnTxt } = this.state\r\n        const { onToggleCompose } = this.props\r\n        return (\r\n            <Fragment>\r\n\r\n                <form className=\"board-composer board-composer-layout flex column\" onClick={(ev) => ev.stopPropagation()} onSubmit={this.onAddBoard} >\r\n                    <div className=\"close-btn flex align-center justify-center\">\r\n                        <CloseIcon onClick={onToggleCompose} />\r\n                    </div>\r\n                    <div className=\"flex justify-center align-center board-details-wrapper\">\r\n\r\n                        <div className=\"demo-board board-card  flex justify-center align-center\" style={{ backgroundImage: newBoard.style.bg, backgroundSize: \"cover\" }}>\r\n                            <textarea className=\"title\" onChange={this.handleInput} placeholder=\"Enter Board Title \" name=\"title\" autoComplete=\"off\" value={newBoard.title} />\r\n                        </div>\r\n                        <span className=\"edit-board-members\">\r\n                            <GroupAddIcon className=\"addIcon\" onClick={this.toggleMemberPreview} />\r\n                            {isMembersPreviewOpen && <BoardMemberComposer isBoardMember={this.isBoardMember} toggleMember={this.toggleMember} closeModal={this.closeMembersPreview} />}\r\n                        </span>\r\n                    </div>\r\n\r\n                    <div className=\"bg-options\">\r\n                        {bgs.map(bg => {\r\n                            return <div className=\"bg-preview\" key={utilService.makeId()} onClick={() => this.setBg(bg)} style={{ backgroundImage: bg, backgroundSize: \"cover\" }}> </div>\r\n                        })}\r\n                    </div>\r\n\r\n\r\n                    <button className=\"primary-btn compose-board-btn\">{btnTxt}</button>\r\n                </form>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nexport const BoardComposer = withRouter(_BoardComposer)\r\n","import React, { Component, Fragment } from 'react'\r\nimport { boardService } from '../services/boardService.js'\r\nimport { BoardList } from '../cmps/BoardList'\r\nimport { BoardComposer } from '../cmps/BoardComposer.jsx'\r\nimport { LoadingSpinner } from '../cmps/LoadingSpinner.jsx'\r\n\r\nexport class Boards extends Component {\r\n\r\n    state = {\r\n        boards: [],\r\n        isComposerOpen: false,\r\n        boardToEdit: null\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadBoards()\r\n    }\r\n\r\n    loadBoards = async () => {\r\n        const boards = await boardService.query()\r\n        this.setState({ boards })\r\n    }\r\n\r\n\r\n    onRemove = async (boardId) => {\r\n        await boardService.remove(boardId)\r\n        let boards = this.state.boards\r\n        const newBoards = boards.filter(currBoard => currBoard._id !== boardId)\r\n        this.setState({ boards: newBoards })\r\n    }\r\n\r\n    onToggleCompose = () => {\r\n        const lastState = this.state.isComposerOpen\r\n        this.setState({ isComposerOpen: !lastState })//opens the add board form\r\n    }\r\n\r\n    editBoard = (board) => {\r\n        this.setState({ isComposerOpen: true, boardToEdit: board })\r\n    }\r\n\r\n    render() {\r\n\r\n        const { boards, isComposerOpen, boardToEdit } = this.state\r\n        if (!boards) return <LoadingSpinner />\r\n        return (\r\n            <Fragment>\r\n\r\n                <div className=\"glass-screen \"></div>\r\n                <div className=\"boards-bg \"></div>\r\n                <div className=\"board-page-container flex\">\r\n                    <div className=\"boards-page bg-overlay main-layout flex column board-layout\">\r\n                        <section className=\"user-boards-section\">\r\n                            <div className=\"user-boards-title\">Your Boards</div>\r\n                            <BoardList boards={boards} onRemove={this.onRemove} onEdit={this.editBoard} onToggleCompose={this.onToggleCompose} />\r\n                        </section>\r\n\r\n                    </div>\r\n                </div>\r\n                <div onClick={this.onToggleCompose} className={`composer-screen flex justify-center align-center ${!isComposerOpen && 'transparent'}`}>\r\n                    <BoardComposer board={boardToEdit} onToggleCompose={this.onToggleCompose} />\r\n                </div>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n","import { boardService } from '../../services/boardService'\r\n\r\nexport function setBoard(boardId) {\r\n    return async dispatch => {\r\n        try {\r\n            var board;\r\n            if (!boardId) board = null\r\n            else board = await boardService.getById(boardId)\r\n\r\n            dispatch({ type: 'SET_BOARD', board })\r\n\r\n        } catch (err) {\r\n            console.log('Couldnt get Board', err)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport function updateBoard(board, activity = null, isEmitting = true) {\r\n    //ACTIVITY PARAM MUST BE AN OBJECT!\r\n    return async dispatch => {\r\n        try {\r\n            const updatedBoard = isEmitting ? await boardService.save(board, activity, isEmitting) : board\r\n            const action = {\r\n                type: 'UPDATE_BOARD',\r\n                updatedBoard\r\n            }\r\n            dispatch(action)\r\n        } catch (err) {\r\n            console.log('couldnt update board', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleTask() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({ type: 'TOGGLE_TASK' })\r\n        } catch (err) {\r\n            console.log('Board actions, failed to toggle task', err)\r\n        }\r\n    }\r\n}\r\n\r\nexport function toggleOverlay() {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({ type: 'TOGGLE_OVERLAY' })\r\n        }\r\n        catch (err) {\r\n            console.log('Couldnt put overlay', err);\r\n        }\r\n    }\r\n}\r\n\r\nexport function setCurrListAndTaskIdx(listIdx, taskIdx) {\r\n    return async dispatch => {\r\n        try {\r\n            const action = {\r\n                type: 'SET_CURR_LIST_AND_TASK',\r\n                listIdx, taskIdx\r\n            }\r\n            dispatch(action)\r\n        }\r\n        catch (err) {\r\n            console.log('Borad actions, failed to get curr list', err);\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { boardService } from '../services/boardService'\r\nimport { connect } from 'react-redux'\r\nimport { PopoverHeader } from './PopoverHeader';\r\nimport { cloneDeep } from 'lodash'\r\nimport EditOutlinedIcon from '@material-ui/icons/EditOutlined';\r\n\r\nexport class _LabelsPopover extends Component {\r\n    state = {\r\n        labels: [\r\n            { id: '101', color: \"#61bd4f\", title: '', isPicked: false },\r\n            { id: '102', color: \"#f2d602\", title: '', isPicked: false },\r\n            { id: '103', color: \"#f99f1b\", title: '', isPicked: false },\r\n            { id: '104', color: \"#eb5a46\", title: '', isPicked: false },\r\n            { id: '105', color: \"#c377e0\", title: '', isPicked: false },\r\n            { id: '107', color: \"#1f79bf\", title: '', isPicked: false },\r\n            { id: '108', color: \"#3cc2e0\", title: '', isPicked: false },\r\n        ],\r\n        elRefs: []\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.markExistingLabels()\r\n        this.setRefs()\r\n    }\r\n\r\n    markExistingLabels() {\r\n        const { task } = this.props\r\n        if (!task.labels?.length) return;\r\n        let { labels } = { ...this.state }\r\n        const labelsIdsMap = labels.map(label => label.id)\r\n        task.labels.forEach(taskLabel => {\r\n            if (labelsIdsMap.includes(taskLabel.id)) {\r\n                const labelIdx = labels.findIndex(currLabel => currLabel.id === taskLabel.id)\r\n                labels[labelIdx].isPicked = true\r\n                labels[labelIdx].title = taskLabel.title\r\n            }\r\n        })\r\n        this.setState({ labels })\r\n    }\r\n\r\n    setRefs() {\r\n        const refs = []\r\n        this.state.labels.forEach(label => {\r\n            refs.push(React.createRef())\r\n        })\r\n        this.setState({ elRefs: refs })\r\n\r\n    }\r\n    onToggleLabel = ev => {\r\n        ev.stopPropagation()\r\n        const { labels } = { ...this.state }\r\n        const { board, list, task, updateBoard } = { ...this.props }\r\n        const labelId = ev.target.dataset.id\r\n        const labelIdx = this.getLabelIdxById(labelId)\r\n        labels[labelIdx].isPicked = !labels[labelIdx].isPicked\r\n        this.setState({ labels }, async () => {\r\n            delete labels[labelIdx].isPicked\r\n            const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n            const activity = { task }\r\n            if (task.labels?.some(label => label.id === labelId)) {\r\n                const taskLabelIdx = task.labels.findIndex(label => label.id === labelId)\r\n                task.labels.splice(taskLabelIdx, 1)\r\n                board.lists[listIdx].tasks[taskIdx] = task\r\n                activity.txt = `has removed label from task`\r\n            }\r\n            else {\r\n                task.labels = task.labels ? [...task.labels, labels[labelIdx]] : [labels[labelIdx]]\r\n                board.lists[listIdx].tasks[taskIdx] = task\r\n                activity.txt = `has added label to task`\r\n            }\r\n\r\n            await updateBoard(board, activity)\r\n            this.markExistingLabels()\r\n        })\r\n    }\r\n\r\n    getLabelIdxById(labelId) {\r\n        const { labels } = this.state\r\n        return labels.findIndex(label => label.id === labelId)\r\n    }\r\n\r\n    handleChange = (labelIdx, ev) => {\r\n        const { labels } = this.state\r\n        const labelsCopy = cloneDeep(labels)\r\n        labelsCopy[labelIdx].title = ev.target.value\r\n        this.setState({ labels: labelsCopy })\r\n    }\r\n\r\n    onEnterPress = ev => {\r\n        if (!ev.target.value) return\r\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\r\n            ev.preventDefault()\r\n            const { board, list, task, updateBoard } = this.props\r\n            const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n            const boardCopy = cloneDeep(board)\r\n            const { labels } = this.state\r\n            const labelsToAdd = labels.filter(label => label.isPicked)\r\n            boardCopy.lists[listIdx].tasks[taskIdx].labels = labelsToAdd\r\n            updateBoard(boardCopy)\r\n        }\r\n    }\r\n\r\n    onEditLabel = (labelIdx, ev) => {\r\n        ev.stopPropagation()\r\n        const { elRefs } = this.state\r\n        elRefs[labelIdx].current.focus()\r\n    }\r\n\r\n\r\n    render() {\r\n        const { labels, elRefs } = this.state\r\n        return (\r\n            <div className=\"labels-popover quick-edit-popover\" >\r\n                <PopoverHeader title='Labels' setCurrPopover={this.props.setCurrPopover} />\r\n                <section className=\"popover-section\">\r\n                    <ul className=\"popover-section-list clear-list flex column\">\r\n                        <h3 className=\"popover-section-header\">Labels</h3>\r\n                        {labels.map((label, labelIdx) => {\r\n                            return (\r\n\r\n                                <div className=\"flex\" key={label.id}>\r\n                                    <input\r\n                                        data-id={label.id}\r\n                                        onClick={this.onToggleLabel}\r\n                                        onMouseDown={(ev) => ev.preventDefault()}\r\n                                        key={label.id}\r\n                                        onChange={(ev) => this.handleChange(labelIdx, ev)}\r\n                                        value={labels[labelIdx].title}\r\n                                        onKeyDown={this.onEnterPress}\r\n                                        ref={elRefs[labelIdx]}\r\n                                        className={`popover-section-list-item ${label.isPicked && 'picked'}`} style={{ backgroundColor: label.color }}></input>\r\n                                    <EditOutlinedIcon onClick={(ev) => this.onEditLabel(labelIdx, ev)} />\r\n                                </div>\r\n\r\n                            )\r\n                        })}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardReducer.currBoard\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const LabelsPopover = connect(mapStateToProps, mapDispatchToProps)(_LabelsPopover)\r\n","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport { PopoverHeader } from './PopoverHeader'\r\nimport BoardMemberImg from './BoardMemberImg'\r\n\r\nexport class ChangeMembersPopover extends Component {\r\n    state = {\r\n        currTask: {},\r\n    }\r\n\r\n    loadTaskMembers() {\r\n        const { task } = this.props\r\n        return task.members\r\n    }\r\n\r\n    onUpdateTaskMember = async (ev) => {\r\n        ev.stopPropagation()\r\n        const { membersRef } = this.props\r\n        const { id } = ev.target.dataset\r\n        const { board } = { ...this.props }\r\n        const { members } = board\r\n        const member = members.find(member => member._id === id)\r\n        this.isTaskMember(member._id) ? await this.onRemoveTaskMember(member)\r\n            : await this.onAddTaskMember(member)\r\n        if (membersRef?.current) {\r\n            membersRef.current.clientWidth > 97 ?\r\n                membersRef.current.classList.add('narrow-down')\r\n                : membersRef.current.classList.remove('narrow-down')\r\n        }\r\n    }\r\n\r\n    onAddTaskMember = async (member) => {\r\n        const { board, updateBoard } = { ...this.props }\r\n        const { listIdx, taskIdx } = this.listAndTaskIdx\r\n        const currTask = board.lists[listIdx].tasks[taskIdx]\r\n        const { _id, username, fullname, imgUrl } = member\r\n        const miniMember = { _id, username, fullname, imgUrl }\r\n        currTask.members ? currTask.members.push(miniMember) : currTask.members = [miniMember]\r\n        this.setState({ currTask })\r\n        const activity = { txt: `has added ${miniMember.fullname} to task`, task: { ...currTask } }\r\n        await updateBoard(board, activity)\r\n    }\r\n\r\n    onRemoveTaskMember = async (member) => {\r\n        const { board, updateBoard, task } = { ...this.props },\r\n            { members } = task,\r\n            memberIdx = members.findIndex(currMember => member._id === currMember._id)\r\n        const { listIdx, taskIdx } = this.listAndTaskIdx\r\n        const { fullname } = { ...members[memberIdx] }\r\n        const currTask = board.lists[listIdx].tasks[taskIdx]\r\n        currTask.members.splice(memberIdx, 1)\r\n        this.setState({ currTask })\r\n        const activity = { txt: `has removed ${fullname} from task`, task: { ...currTask } }\r\n        await updateBoard(board, activity)\r\n    }\r\n\r\n    isTaskMember(id) {\r\n        const currTask = this.props.task\r\n        const isTaskMember = currTask.members?.some(currMember => id === currMember._id)\r\n        return isTaskMember\r\n    }\r\n\r\n    get listAndTaskIdx() {\r\n        const { board, list, task } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        return { listIdx, taskIdx }\r\n    }\r\n\r\n    render() {\r\n        const boardMembers = this.props.board.members\r\n        return (\r\n            <div className=\"change-members-popover \" onClick={(ev) => { ev.stopPropagation() }}>\r\n                <PopoverHeader title='Members' setCurrPopover={this.props.setCurrPopover} />\r\n                <section className=\"popover-section\">\r\n                    <ul className=\"popover-section-list clear-list\">\r\n                        <h3 className=\"popover-section-header\">Board members</h3>\r\n                        {boardMembers.map(member => {\r\n                            return <li key={member._id} data-id={member._id} onClick={this.onUpdateTaskMember} className={`popover-section-list-item flex align-center ${this.isTaskMember(member._id) && 'picked'}`}>\r\n                                    <BoardMemberImg member={member} size={40} className=\"board-member-img\"/>\r\n                                \r\n                                <span data-id={member._id}>{member.fullname}  ({member.username})</span>\r\n                                {this.isTaskMember(member._id) && <DoneIcon className=\"picked-icon\" />}\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { utilService } from '../services/utilService'\r\nimport { PopoverHeader } from './PopoverHeader'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { cloneDeep } from 'lodash'\r\n\r\nexport class CopyTaskPopover extends Component {\r\n    state = {\r\n        selectedListIdx: 0\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        this.setState({ selectedListIdx: ev.target.value })\r\n    }\r\n\r\n    onCopyClick = async () => {\r\n        const { board, task, updateBoard, setCurrPopover } = this.props\r\n        const { selectedListIdx } = this.state\r\n        const copyBoard = cloneDeep(board)\r\n        const copyTask = cloneDeep(task)\r\n        copyTask.id = utilService.makeId()\r\n        copyTask.createdAt = Date.now()\r\n        copyBoard.lists[selectedListIdx].tasks.push(copyTask)\r\n        await updateBoard(copyBoard)\r\n        setCurrPopover()\r\n    }\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        return (\r\n            <div className=\"copy-task-popover\" onClick={(ev) => ev.stopPropagation()}>\r\n                <PopoverHeader title=\"Copy Task\" setCurrPopover={this.props.setCurrPopover} />\r\n                <div className=\"copy-task-body flex column  justify-center align-center\">\r\n                    <h3>Select Destination</h3>\r\n                    <FormControl style={{ marginBottom: '10px', minWidth: '120px' }} >\r\n                        <Select\r\n                            native\r\n                            onChange={this.handleInput}\r\n                            inputProps={{\r\n                                name: 'list',\r\n                                id: 'age-native-simple',\r\n                            }}\r\n                        >\r\n                            {board.lists.map((list, listIdx) => {\r\n                                if (!list.title) return\r\n                                return <option value={listIdx}>{list.title}</option>\r\n                            })}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <button onClick={this.onCopyClick} className=\"date-close-btn primary-btn\">Copy</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\n\r\nexport class QuickEditButton extends Component {\r\n\r\n    state = {\r\n        isLabelsPopoverOpen: false\r\n    }\r\n\r\n    render() {\r\n        const { title, Component, setCurrPopover, currPopover, Icon } = this.props\r\n        return (\r\n            <>\r\n            <a className=\"quick-task-editor-buttons-item js-edit-labels\" onClick={ev => {\r\n                ev.stopPropagation()\r\n                currPopover === title ? setCurrPopover() : setCurrPopover(title)\r\n            }} data-for={'editLabels'}>\r\n                <span className=\"quick-task-editor-buttons-item-text flex align-center\">{Icon && <Icon className=\"quick-task-editor-buttons-item-icon\" />}{title}</span>\r\n            </a >\r\n                { Component && (currPopover === title) && <Component {...this.props} />}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    container: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n    },\r\n    textField: {\r\n        marginLeft: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n        width: 200,\r\n    },\r\n}));\r\n\r\nexport default function DateAndTimePickers(props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <form className={classes.container} noValidate>\r\n            <TextField\r\n\r\n                id=\"datetime-local\"\r\n                format=\"yyyy/MM/dd HH:mm\"\r\n                type=\"datetime-local\"\r\n                defaultValue=\"2021-01-24T10:30\"\r\n                className={classes.textField}\r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                }}\r\n                {...props}\r\n            />\r\n        </form>\r\n    );\r\n}\r\n","import React, { Component } from 'react'\r\nimport DateTime from './MUIDateTime'\r\nimport { PopoverHeader } from './PopoverHeader'\r\n\r\nexport class DateTimePopover extends Component {\r\n\r\n\r\n    render() {\r\n        const { classNames } = this.props\r\n        return (\r\n            <div className={`due-date-popover quick-edit-popover ${classNames && classNames}`} onClick={(ev) => ev.stopPropagation()}>\r\n                <PopoverHeader title='Due Date' setCurrPopover={this.props.setCurrPopover} />\r\n                <div className=\"due-date-body flex justify-center align-center\">\r\n                    <DateTime onChange={this.props.onDateChange} />\r\n                    <button onClick={() => this.props.onSaveDate()} className=\"date-close-btn primary-btn\">Save</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { PopoverHeader } from './PopoverHeader'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport { cloneDeep } from 'lodash'\r\n\r\n\r\nexport class MoveTaskPopover extends Component {\r\n\r\n    state = {\r\n        selectedListIdx: 0\r\n    }\r\n\r\n    handleInput = (ev) => {\r\n        this.setState({ selectedListIdx: ev.target.value })\r\n    }\r\n\r\n    onMoveSaveClick = async () => {\r\n        const { board, list, task, updateBoard, setCurrPopover } = this.props\r\n        const { selectedListIdx } = this.state\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const copyBoard = cloneDeep(board)\r\n        const taskToMove = copyBoard.lists[listIdx].tasks.splice(taskIdx, 1)\r\n        copyBoard.lists[+selectedListIdx].tasks.push(taskToMove[0])\r\n        await updateBoard(copyBoard)\r\n        setCurrPopover()\r\n        const { taskId, listId } = this.props.match.params\r\n        if (taskId && listId) {\r\n            this.props.history.push(`/board/${board._id}/${board.lists[selectedListIdx].id}/${task.id}`)\r\n        }\r\n    }\r\n    render() {\r\n        const { board } = this.props\r\n        return (\r\n            <div className=\"move-task-popover\" onClick={(ev) => ev.stopPropagation()}>\r\n                <PopoverHeader title=\"Move Task\" setCurrPopover={this.props.setCurrPopover} />\r\n                <div className=\"move-task-body flex column  justify-center align-center\">\r\n                    <h3>Select Destination</h3>\r\n                    <FormControl style={{ marginBottom: '10px', minWidth: '120px' }} >\r\n                        <Select\r\n                            native\r\n                            onChange={this.handleInput}\r\n                            inputProps={{\r\n                                name: 'list',\r\n                                id: 'age-native-simple',\r\n                            }}\r\n                        >\r\n                            {board.lists.map((list, listIdx) => {\r\n                                if (!list.title) return\r\n                                return <option value={listIdx}>{list.title}</option>\r\n                            })}\r\n                        </Select>\r\n                    </FormControl>\r\n                    <button onClick={this.onMoveSaveClick} className=\"date-close-btn primary-btn\">Move</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { LabelsPopover } from './LabelsPopover'\r\nimport { ChangeMembersPopover } from './ChangeMembersPopover'\r\nimport { CopyTaskPopover } from './CopyTaskPopover'\r\nimport { QuickEditButton } from './QuickEditButton'\r\nimport LabelIcon from '@material-ui/icons/LabelOutlined';\r\nimport ChangeMembersIcon from '@material-ui/icons/PeopleOutline';\r\nimport RemoveIcon from '@material-ui/icons/DeleteOutline';\r\nimport ChangeDueDateIcon from '@material-ui/icons/QueryBuilder';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined'\r\nimport { DateTimePopover } from './DateTimePopover'\r\nimport { MoveTaskPopover } from './MoveTaskPopover'\r\nimport { parseISO } from 'date-fns'\r\nimport { getTime } from 'date-fns'\r\n\r\n/* FOR DEMO 3:\r\nthe TaskEdit component renders the quick edit buttons which on click, opens the respected popover.\r\nas you can see, it is built in a way that assuming in the future a programmer would like to add a new component, \r\nall that is required is to add another object to the state.\r\n\r\n*/\r\n\r\nconst popovers = [\r\n    {\r\n        title: 'Edit Labels',\r\n        Component: LabelsPopover,\r\n        Icon: LabelIcon\r\n    },\r\n    {\r\n        title: 'Change Members',\r\n        Component: ChangeMembersPopover,\r\n        Icon: ChangeMembersIcon\r\n    },\r\n    { title: 'Move', Icon: ArrowForwardIcon, Component: MoveTaskPopover },\r\n    { title: 'Copy', Icon: FileCopyOutlinedIcon },\r\n    {\r\n        title: 'Change Due Date',\r\n        Component: DateTimePopover,\r\n        Icon: ChangeDueDateIcon,\r\n        classNames: 'quick-edit-datepicker'\r\n    },\r\n]\r\n\r\nexport class TaskEdit extends Component {\r\n\r\n    state = {\r\n        dueDate: {\r\n            timestamp: '',\r\n            isDone: false\r\n        }\r\n    }\r\n\r\n    dueDateHandlers = {\r\n        onDateChange: (ev) => {\r\n            let parsedString = parseISO(ev.target.value)\r\n            let timestamp = getTime(parsedString)\r\n            const dueDate = {\r\n                timestamp,\r\n                isDone: false\r\n            }\r\n            this.setState({ dueDate })\r\n        },\r\n        onSaveDate: () => {\r\n            const { board, list, task, updateBoard } = this.props\r\n            const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n            const boardCopy = { ...board }\r\n            if (!this.state.dueDate.timestamp) return\r\n            boardCopy.lists[listIdx].tasks[taskIdx].dueDate = this.state.dueDate\r\n            updateBoard(boardCopy)\r\n            this.props.setCurrPopover()\r\n        }\r\n    }\r\n\r\n    onRemoveTask = ev => {\r\n        ev.stopPropagation()\r\n        const { task, list, board } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const boardCopy = { ...this.props.board }\r\n        boardCopy.lists[listIdx].tasks.splice(taskIdx, 1)\r\n        this.props.updateBoard(boardCopy)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"quick-task-editor-buttons\">\r\n                {popovers.map(popover => {\r\n                    return <QuickEditButton\r\n                        key={popover.title}\r\n                        {...this.dueDateHandlers}\r\n                        {...this.props}\r\n                        {...popover} />\r\n                })}\r\n                <a className=\"quick-task-editor-buttons-item js-edit-labels\" href=\"#\" onClick={this.onRemoveTask}>\r\n                    <span className=\"icon-sm icon-label light\"></span>\r\n                    <span className=\"quick-task-editor-buttons-item-text flex align-center\">\r\n                        <RemoveIcon className=\"quick-task-editor-buttons-item-icon\" />Remove</span>\r\n                </a>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { toggleTask, setCurrListAndTaskIdx, updateBoard } from '../store/actions/boardActions'\r\nimport { connect } from 'react-redux'\r\nimport { withRouter } from 'react-router-dom'\r\nimport ContentEditable from \"react-contenteditable\";\r\nimport EditIcon from '@material-ui/icons/CreateOutlined';\r\nimport CheckIcon from '@material-ui/icons/CheckBoxOutlined';\r\nimport DueDateIcon from '@material-ui/icons/QueryBuilderOutlined';\r\nimport NotesOutlinedIcon from '@material-ui/icons/NotesOutlined';\r\nimport { TaskEdit } from './TaskEdit'\r\nimport CommentIcon from '@material-ui/icons/TextsmsOutlined';\r\nimport { format } from 'date-fns'\r\nimport { Draggable } from 'react-beautiful-dnd';\r\nimport BoardMemberImg from './BoardMemberImg'\r\n\r\nexport class _TaskPreview extends Component {\r\n\r\n    state = {\r\n        isTaskHovered: false,\r\n        isEditOpen: false,\r\n        taskTitle: '',\r\n        titleBeforeChange: '',\r\n        unreadNotificationsCount: 0,\r\n        isLabelOpen: false,\r\n        isManyMembers: false,\r\n    }\r\n\r\n    membersRef = React.createRef()\r\n\r\n\r\n    componentDidMount() {\r\n        const { task } = this.props\r\n        this.setState({ taskTitle: task.title, titleBeforeChange: task.title })\r\n\r\n        if (this.membersRef.current) {\r\n            this.membersRef.current.clientWidth > 97 ?\r\n                this.membersRef.current.classList.add('narrow-down')\r\n                : this.membersRef.current.classList.remove('narrow-down')\r\n        }\r\n    }\r\n\r\n    onTaskUpdated = (activityTxt) => {\r\n        const { unreadNotificationsCount } = { ...this.state }\r\n        this.setState({ unreadNotificationsCount: unreadNotificationsCount + 1 }, () => {\r\n        })\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { task } = this.props\r\n        if (prevProps.task === task) return\r\n        this.setState({ taskTitle: task.title, titleBeforeChange: task.title })\r\n    }\r\n\r\n\r\n    setDefaultTitle = () => {\r\n        const { titleBeforeChange } = this.state\r\n        this.setState({ taskTitle: titleBeforeChange })\r\n    }\r\n\r\n    get doesContainIndics() {\r\n        const { task } = this.props\r\n        return task.description || task.checklists?.length || task.dueDate || task.comments?.length || task.members?.length\r\n    }\r\n    onOpenDetails = async (ev) => {\r\n        ev.stopPropagation()\r\n        if (this.state.isEditOpen) return\r\n\r\n        const { list, board, task } = this.props\r\n        const { taskIdx, listIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n\r\n        await this.props.setCurrListAndTaskIdx(listIdx, taskIdx)\r\n        await this.props.toggleOverlay()\r\n\r\n        // await this.props.toggleTask()\r\n        this.props.history.push(`/board/${board._id}/${list.id}/${task.id}`)\r\n    }\r\n\r\n    taskPreviewHandlers = {\r\n        //To identify hover state (for revealing quick edit icon)\r\n        onMouseEnter: () => {\r\n            this.setState({ isTaskHovered: true })\r\n        },\r\n        onMouseLeave: () => {\r\n            this.setState({ isTaskHovered: false })\r\n        }\r\n    }\r\n\r\n    onToggleEdit = ev => {\r\n        ev.stopPropagation()\r\n        const { isEditOpen } = this.state\r\n        this.setState({ isEditOpen: !isEditOpen })\r\n        if (isEditOpen) this.setDefaultTitle()\r\n        this.props.setListDnd(isEditOpen)\r\n    }\r\n\r\n\r\n\r\n    get taskTodosLength() {\r\n        const { task } = this.props\r\n        const totalLen = task.checklists.reduce((acc, checklist) => { return acc + checklist.todos.length }, 0)\r\n        return totalLen\r\n    }\r\n\r\n    get taskDoneTodosLength() {\r\n        const { task } = this.props\r\n        var doneTodos = []\r\n        task.checklists.forEach(checklist => {\r\n            const checklistDoneTodos = checklist.todos.filter(todo => todo.isDone)\r\n            doneTodos = [...doneTodos, ...checklistDoneTodos]\r\n        })\r\n        return doneTodos.length\r\n    }\r\n\r\n\r\n    handleChange = evt => {\r\n        this.setState({ taskTitle: evt.target.value });\r\n    };\r\n\r\n    onSaveTitle = async (ev) => {\r\n        const { taskTitle } = this.state\r\n        if (!taskTitle) return\r\n        const { list, board, task } = this.props\r\n        if (taskTitle === task.title) {\r\n            this.onToggleEdit(ev)\r\n            return\r\n        }\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const copyBoard = { ...board }\r\n        copyBoard.lists[listIdx].tasks[taskIdx].title = taskTitle\r\n        const { user } = this.props\r\n        await this.props.updateBoard(copyBoard, { user, txt: `has changed task (${task.title}) title`, task: { ...this.props.task } })\r\n        this.onToggleEdit(ev)\r\n    }\r\n\r\n    render() {\r\n        const { task, list, taskIdx, toggleLabels, isLabelOpen } = this.props\r\n        const { isEditOpen, isTaskHovered } = this.state\r\n        return (\r\n            <Fragment>\r\n                <div className={`${isEditOpen && 'main-overlay'}`} onClick={this.onToggleEdit}></div>\r\n                <Draggable\r\n                    draggableId={task.id}\r\n                    index={taskIdx}\r\n                    isDragDisabled={isEditOpen}\r\n                >\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            {...provided.draggableProps}\r\n                            {...provided.dragHandleProps}\r\n                            ref={provided.innerRef}\r\n                        >\r\n                            <div {...this.taskPreviewHandlers} className={`task-preview ${snapshot.isDragging && 'moving'} ${isEditOpen && ' quickEdit'} ${this.props.className}`} onClick={this.onOpenDetails} >\r\n                                {(task.attachments?.length) ?\r\n                                    <div className=\"preview-img\" style={{ backgroundImage: `url(${task.attachments.slice(-1)[0]})` }}>\r\n                                    </div>\r\n                                    : ''\r\n                                }\r\n                                {task.labels?.length ? <div className=\"top-line-preview-container flex\">\r\n                                    <div className=\"labels-container flex\">\r\n                                        {task.labels.map(label => {\r\n                                            return (\r\n                                                <div onClick={(ev) => {\r\n                                                    ev.stopPropagation()\r\n                                                    toggleLabels()\r\n                                                }} style={{ backgroundColor: label.color }} key={label.id} className={`task-label ${isLabelOpen && \"open\"}`} title={label.title}>{isLabelOpen ? label.title : ''}</div>\r\n                                            )\r\n\r\n                                        })}\r\n\r\n                                    </div>\r\n                                    <div className=\"quick-edit-wrapper\">\r\n                                        {isTaskHovered && <EditIcon className=\"edit-icon\" onClick={this.onToggleEdit} />}\r\n                                        {isEditOpen && <TaskEdit\r\n                                            {...this.props}\r\n                                            membersRef={this.membersRef}\r\n                                            task={task}\r\n                                            list={list}\r\n                                            onToggleEdit={this.onToggleEdit} />}\r\n                                    </div>\r\n                                </div> : ''}\r\n                                <div className=\"task-title-wrapper flex space-between \">\r\n\r\n\r\n                                    <ContentEditable\r\n                                        style={{ color: list.style.title.bgColor }}\r\n                                        html={this.state.taskTitle} // innerHTML of the editable div\r\n                                        disabled={!isEditOpen} // use true to disable edition\r\n                                        onChange={this.handleChange} // handle innerHTML change\r\n                                        className=\"task-title-input\"\r\n                                    />\r\n\r\n                                    {!task.labels?.length && <div className=\"quick-edit-wrapper\">\r\n                                        {(isTaskHovered || isEditOpen) &&\r\n                                            <EditIcon className=\"edit-icon\" onClick={this.onToggleEdit} />}\r\n                                        {isEditOpen && <TaskEdit {...this.props} task={task} membersRef={this.membersRef} list={list} onToggleEdit={this.onToggleEdit} />}\r\n                                    </div>}\r\n                                </div>\r\n                                {this.doesContainIndics &&\r\n                                    <div className=\"task-preview-icons-container indication-icon flex \">\r\n                                        <div className=\"task-preview-indication-icons flex start\">\r\n                                            {task.description && <NotesOutlinedIcon className=\"description-indication-icon indication-icon\" />}\r\n                                            {task.checklists?.length ? <div className=\"flex align-center\"><CheckIcon className=\"indication-icon\" />{this.taskDoneTodosLength}/{this.taskTodosLength}</div> : ''}\r\n                                            {task.dueDate ? <div className={`date-indication  flex align-center ${task.dueDate.isDone ? \"complete\" : \"\"}`}><DueDateIcon className=\"indication-icon\" /><div>{format(new Date(task?.dueDate?.timestamp), 'LLL')} {format(new Date(task?.dueDate?.timestamp), 'd')}</div></div> : ''}\r\n                                            {task.comments && <CommentIcon className=\"comment-indication-icon indication-icon\" />}\r\n                                        </div>\r\n                                        {task.members?.length ?\r\n                                            <div ref={this.membersRef} className=\"task-members-imgs flex\">\r\n                                                {task.members.map(member => { return <BoardMemberImg key={member._id} member={member} /> })}\r\n                                            </div>\r\n                                            : ''}\r\n\r\n                                    </div>\r\n                                }\r\n                                {isEditOpen && <button className=\"primary-btn quick-btn\" onClick={this.onSaveTitle}> Save </button>}\r\n                            </div >\r\n\r\n                        </div>\r\n                    )}\r\n                </Draggable>\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    toggleTask,\r\n    setCurrListAndTaskIdx,\r\n    updateBoard\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isTaskOpen: state.boardReducer.isTaskOpen,\r\n        isOverlayOpen: state.boardReducer.isOverlayOpen,\r\n        board: state.boardReducer.currBoard\r\n    }\r\n}\r\n\r\nexport const TaskPreview = connect(mapStateToProps, mapDispatchToProps)(withRouter(_TaskPreview))\r\n\r\n\r\n/*\r\nSockets activities plan:\r\nlogged in user is adding somebody to a task.\r\nat the same time board is updated ,\r\nupdateUserActivities is sent,\r\n\"you have been added to the task.\"\r\n\r\n*/","\r\nexport function setCurrPopover(popover=null) {\r\n    return async dispatch => {\r\n        try {\r\n            dispatch({ type: 'SET_CURR_POPOVER', popover })\r\n        } catch (err) {\r\n            console.log('Could not set popover status, ', err);\r\n        }\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { PopoverHeader } from './PopoverHeader'\r\nimport onClickOutside from 'react-onclickoutside'\r\n\r\n\r\nexport class _ListActions extends Component {\r\n    state = {\r\n        listColors: ['#9895E0', '#4A94F8', '#56c991', '#3cc2e0', '#eb5a46', '#ac0275', '#67c0a4', '#F5E50E'],\r\n    }\r\n\r\n    onSetListColor = (color) => {\r\n        const { board, listIdx, updateBoard } = { ...this.props }\r\n        board.lists[listIdx].style.title.bgColor = color\r\n        updateBoard(board)\r\n    }\r\n\r\n    handleClickOutside = () => {\r\n        this.props.handleClickOutside()\r\n    }\r\n    render() {\r\n        const { onToggleComposer, onRemoveList, setCurrPopover } = this.props\r\n        return (\r\n            <div className=\"list-actions-popover\" onClick={(ev) => ev.stopPropagation()}>\r\n                <PopoverHeader title='List Actions' setCurrPopover={setCurrPopover} />\r\n                <section className=\"popover-section\">\r\n                    <ul className=\"popover-section-list clear-list\">\r\n                        <li className=\"add-task popover-section-list-item\" onClick={(ev) => {\r\n                            setCurrPopover()\r\n                            onToggleComposer(ev)\r\n                        }}>Add task...</li>\r\n                        <li className=\"remove-list popover-section-list-item\" onClick={(ev) => {\r\n                            setCurrPopover()\r\n                            onRemoveList(ev)\r\n                        }}>Remove list...</li>\r\n                        <li className=\" popover-section-list-item\">\r\n                            {/* <div className=\"pick-list-color\">Change color...</div> */}\r\n                            <div className=\"list-colors-grid\">{this.state.listColors.map(color => {\r\n                                return <div key={color} className=\"list-color-option\" onClick={() => this.onSetListColor(color)} style={{ backgroundColor: color }}></div>\r\n                            })}\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const ListActions = onClickOutside(_ListActions)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard, toggleOverlay } from '../store/actions/boardActions'\r\nimport { boardService } from '../services/boardService'\r\nimport { utilService } from '../services/utilService'\r\nimport { setCurrPopover } from '../store/actions/popoverActions'\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport { ListActions } from './ListActions'\r\nimport { LoadingSpinner } from './LoadingSpinner'\r\n\r\nexport class _ListTitle extends Component {\r\n    state = {\r\n        title: '',\r\n        isListActionsOpen: false\r\n    }\r\n\r\n    elListTitleRef = React.createRef()\r\n\r\n    componentDidMount() {\r\n        const { title } = this.props\r\n        this.setState({ title })\r\n    }\r\n\r\n    updateBoard = async (board) => {\r\n        await this.props.updateBoard(board)\r\n    }\r\n\r\n    listTitleHandlers = {\r\n        onChange: (ev) => {\r\n            const { name, value } = ev.target\r\n            this.setState({ [name]: value })\r\n        },\r\n        onBlur: ({ target }) => {\r\n            const board = { ...this.props.board }\r\n            const { list } = this.props\r\n            const listIdx = boardService.getListIdxById(board, list.id)\r\n            board.lists[listIdx][target.name] = target.value\r\n            target.style.backgroundColor = list.style.title.bgColor\r\n            target.style.color = '#fff'\r\n            this.props.updateBoard(board)\r\n        },\r\n        onFocus: ({ target }) => {\r\n            target.style.backgroundColor = '#fff'\r\n            target.style.color = '#212121'\r\n            target.style.borderRadius = \"2px\"\r\n        }\r\n    }\r\n\r\n    editIconHandlers = {\r\n        onMouseEnter: ({ target }) => {\r\n            const { list } = this.props\r\n            const bgColor = utilService.lightenColor(list.style.title.bgColor, 10)\r\n            target.style.backgroundColor = bgColor\r\n        },\r\n        onMouseLeave: ({ target }) => {\r\n            target.style.backgroundColor = 'transparent'\r\n        }\r\n    }\r\n    onPressEnter = (ev) => {\r\n        ev.preventDefault()\r\n        this.elListTitleRef.current.blur()\r\n    }\r\n\r\n    onToggleListActions = (ev) => {\r\n        console.log('isPropagation stopped? ', ev.stopPropagation);\r\n        this.setState({ isListActionsOpen: !this.state.isListActionsOpen })\r\n    }\r\n\r\n    handleClickOutside = ev => {\r\n        this.setState({ isListActionsOpen: false })\r\n    }\r\n\r\n    render() {\r\n        const { list, isComposerOpen } = this.props\r\n        const { isListActionsOpen } = this.state\r\n        if (!list) return <LoadingSpinner />\r\n        return (\r\n            <form onSubmit={this.onPressEnter}\r\n                autoComplete=\"off\"\r\n                className=\"list-title flex align-center\"\r\n                style={{ backgroundColor: `${list.style.title.bgColor}` }}>\r\n                <input\r\n                    {...this.listTitleHandlers}\r\n                    placeholder=\"Enter list title\"\r\n                    ref={this.elListTitleRef}\r\n                    value={this.state.title}\r\n                    name=\"title\" />\r\n                <div className=\"list-actions-popover-wrapper\">\r\n                    {<MoreHorizIcon\r\n                        {...this.editIconHandlers}\r\n                        onClick={this.onToggleListActions}\r\n\r\n                        className={`toggle-actions-icon ${isComposerOpen && 'close'}`} />}\r\n                    {isListActionsOpen && <ListActions {...this.props} handleClickOutside={this.handleClickOutside} />}\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardReducer.currBoard,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    setCurrPopover,\r\n    toggleOverlay\r\n}\r\n\r\nexport const ListTitle = connect(mapStateToProps, mapDispatchToProps)(_ListTitle)","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { boardService } from '../services/boardService'\r\nimport { utilService } from '../services/utilService'\r\n\r\nexport class _TaskComposer extends Component {\r\n\r\n    state = {\r\n        task: {\r\n            title: '',\r\n            description: '',\r\n        }\r\n    }\r\n\r\n    handleChange = ev => {\r\n        const { name, value } = ev.target\r\n        this.setState(prevState => ({ task: { ...prevState.task, [name]: value } }))\r\n    }\r\n\r\n    onAddTask = ev => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const { task } = { ...this.state }\r\n        const { board } = { ...this.props }\r\n        const { list } = this.props\r\n        const listIdx = boardService.getListIdxById(board, list.id)\r\n        task.createdAt = Date.now()\r\n        task.id = utilService.makeId()\r\n        if (!board.lists[listIdx].tasks) {\r\n            board.lists[listIdx].tasks = []\r\n        }\r\n        board.lists[listIdx].tasks.push(task)\r\n        this.setState({\r\n            task: {\r\n                title: '',\r\n                description: '',\r\n            }\r\n        }, () => {\r\n            const activity = { task }\r\n            activity.txt = `has added new task ${task.title} to list ${list.title}`\r\n            this.props.updateBoard(board, activity)\r\n        })\r\n    }\r\n\r\n    updateBoard(board = this.props.board) {\r\n        this.props.updateBoard(board)\r\n    }\r\n\r\n    render() {\r\n        const { isComposerOpen, titleRef, setCurrPopover, list } = this.props\r\n        const { task } = this.state\r\n        return (\r\n            <form className={`task-composer`} onSubmit={this.onAddTask}>\r\n                <input value={task.title} type=\"text\" ref={titleRef} name=\"title\" onClick={() => { setCurrPopover(`TASK_COMPOSER${list.id}`) }} onChange={this.handleChange}\r\n                    placeholder={list.tasks.length ? \"+ Add another card\" : \"+ Add a card\"} autoComplete=\"off\" id=\"\" />\r\n                <div className={`open-composer-section ${!isComposerOpen && 'display-none'}`}>\r\n                    <button className={`save-task-btn primary-btn `}>Add</button>\r\n                </div>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardReducer.currBoard\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const TaskComposer = connect(mapStateToProps, mapDispatchToProps)(_TaskComposer)\r\n","import React, { Component } from 'react'\r\nimport { TaskPreview } from './TaskPreview'\r\nimport { boardService } from '../services/boardService'\r\nimport { ListTitle } from './ListTitle'\r\nimport { TaskComposer } from './TaskComposer'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\n\r\nexport class TaskList extends Component {\r\n    state = {\r\n        isComposerOpen: false,\r\n        isDragDisabled: false\r\n    }\r\n\r\n    elTaskTitleRef = React.createRef()\r\n\r\n    updateBoard = async (board = this.props.board) => {\r\n        await this.props.updateBoard(board)\r\n    }\r\n\r\n    onEditTask = () => {\r\n        const { list } = this.props\r\n        const { task } = this.state\r\n        const board = { ...this.props.board }\r\n        const taskIdx = boardService.getTaskIdxById(list, task.id)\r\n        board.lists.tasks[taskIdx] = task\r\n        this.updateBoard()\r\n    }\r\n\r\n    listTitleHandlersProps = {\r\n        onRemoveList: () => {\r\n            const listIdx = this.listIdx\r\n            const { board, updateBoard } = { ...this.props }\r\n            const activity = { txt: `has removed list ${board.lists[listIdx].title}` }\r\n            board.lists.splice(listIdx, 1)\r\n            updateBoard(board, activity)\r\n\r\n        },\r\n        onToggleComposer: ev => {\r\n            ev.stopPropagation()\r\n            this.props.setCurrPopover(`TASK_COMPOSER${this.props.list.id}`)\r\n            this.setState({ isComposerOpen: !this.state.isComposerOpen }, () => {\r\n                this.elTaskTitleRef.current.focus()\r\n            })\r\n        }\r\n    }\r\n\r\n    get listIdx() {\r\n        const { list, board } = this.props\r\n        const listIdx = boardService.getListIdxById(board, list.id)\r\n        return listIdx\r\n    }\r\n\r\n    setDragability = (boolean) => {\r\n        this.setState({ isDragDisabled: !boolean })\r\n        console.log('isDragable?', this.state.isDragDisabled);\r\n    }\r\n\r\n    render() {\r\n        const { list, currPopover, listIdx } = this.props\r\n        const { tasks } = list\r\n\r\n        return (\r\n            <Draggable draggableId={list.id} index={listIdx} isDragDisabled={this.state.isDragDisabled} >\r\n\r\n                {(provided, snapshot) => (\r\n                    <li\r\n                        style={{ backgroundColor: list.style.bgColor }}\r\n                        className={`task-list task-list-container ${snapshot.isDragging && 'moving'}  `}\r\n                        {...provided.dragHandleProps}\r\n                        {...provided.draggableProps}\r\n                        ref={provided.innerRef}>\r\n\r\n                        <ListTitle\r\n                            {...provided.dragHandleProps}\r\n                            {...this.props}\r\n                            {...this.listTitleHandlersProps}\r\n                        />\r\n\r\n                        <div className=\"task-previews-container\">\r\n                            <Droppable droppableId={list.id} type=\"task\">\r\n                                {provided => (\r\n                                    <div ref={provided.innerRef} {...provided.droppableProps} className=\"flex column\" style={{ flexGrow: \"1\", minHeight: \"1px\" }}>\r\n\r\n                                        {tasks ? tasks.map((task, idx) => <TaskPreview key={task.id} taskIdx={idx} {...this.props} setListDnd={this.setDragability} task={task} className={(idx === tasks.length - 1) && \"last-child\"} />) : ''}\r\n\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                        <TaskComposer {...this.props} titleRef={this.elTaskTitleRef} isComposerOpen={currPopover === `TASK_COMPOSER${list.id}`} onToggleComposer={this.onToggleComposer} />\r\n                    </li>\r\n                )\r\n                }\r\n            </Draggable>\r\n\r\n        )\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { TaskList } from './TaskList'\r\nimport { boardService } from '../services/boardService'\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { utilService } from '../services/utilService'\r\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\r\nimport { LoadingSpinner } from './LoadingSpinner';\r\n\r\n\r\nexport class _Board extends Component {\r\n    state = {\r\n        listColors: ['#9895E0', '#4A94F8', '#56c991', '#3cc2e0', '#eb5a46'],\r\n        listToAdd: {\r\n            title: '',\r\n            tasks: [],\r\n            style: {\r\n                bgColor: '',\r\n                title: { bgColor: '' }\r\n            }\r\n        },\r\n        isLabelOpen: false\r\n    }\r\n\r\n    elListTitleRef = React.createRef()\r\n\r\n    toggleLabels = (boolean = !this.state.isLabelOpen) => {\r\n        this.setState({ isLabelOpen: boolean })\r\n    }\r\n\r\n    addListHandlers = {\r\n        onClick: (ev) => {\r\n            ev.stopPropagation()\r\n            this.elListTitleRef.current.focus()\r\n            const { setCurrPopover } = this.props\r\n            setCurrPopover('LIST_ADD')\r\n        },\r\n        onSubmit: ev => {\r\n            ev.preventDefault()\r\n            const { board, updateBoard } = { ...this.props }\r\n            const { listToAdd } = { ...this.state }\r\n            const listToAddIdx = board.lists.length\r\n            let listColor = this.state.listColors[listToAddIdx]\r\n            if (!listColor) listColor = utilService.getRandomColor()\r\n            listToAdd.id = utilService.makeId()\r\n            listToAdd.style.title.bgColor = listColor\r\n            listToAdd.style.bgColor = listToAdd.style.title.bgColor + '82'\r\n            board.lists.push(listToAdd)\r\n            this.setState({\r\n                listToAdd: {\r\n                    title: '',\r\n                    tasks: [],\r\n                    style: {\r\n                        title: { bgColor: '' }\r\n                    }\r\n                }\r\n            })\r\n            var activity = { txt: `has added list (${listToAdd.title}) to the board.` }\r\n            updateBoard(board, activity)\r\n        }\r\n    }\r\n\r\n    handleChange = ({ target }) => {\r\n        const { name, value } = target\r\n        this.setState(prevState => ({ listToAdd: { ...prevState.listToAdd, [name]: value } }))\r\n    }\r\n\r\n\r\n\r\n    // activate when a dragged item is released\r\n    onDragEnd = (res) => {\r\n        const { destination, source, type } = res;\r\n\r\n        if (!destination) return\r\n\r\n        if (//if the item stayed in the same spot \r\n            destination.droppableId === source.droppableId &&\r\n            destination.index === source.index\r\n        ) return;\r\n\r\n        const copyBoard = { ...this.props.board }\r\n\r\n        const activity = {}\r\n        if (type === 'task') {\r\n\r\n            const sourceListIdx = boardService.getListIdxById(copyBoard, source.droppableId)\r\n            const destinationListIdx = boardService.getListIdxById(copyBoard, destination.droppableId)\r\n            const task = copyBoard.lists[sourceListIdx].tasks.splice(source.index, 1);\r\n            copyBoard.lists[destinationListIdx].tasks.splice(destination.index, 0, task[0]);\r\n\r\n            const sourceListName = copyBoard.lists[sourceListIdx].title\r\n            const destinationListName = copyBoard.lists[destinationListIdx].title\r\n            activity.txt = `has moved ${task[0].title} from ${sourceListName} to ${destinationListName}`\r\n\r\n        } else {\r\n\r\n            const list = copyBoard.lists.splice(source.index, 1);\r\n            copyBoard.lists.splice(destination.index, 0, list[0]);\r\n\r\n            activity.txt = `has moved list ${list[0].title}`\r\n        }\r\n\r\n\r\n\r\n        this.props.updateBoard(copyBoard, activity)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { board, currPopover, isDashboardOpen } = this.props\r\n        const { lists } = board\r\n        const isCurrPopover = (currPopover === 'LIST_ADD')\r\n        const { listToAdd, isLabelOpen } = this.state\r\n        if (!board) return <LoadingSpinner />\r\n        return (\r\n            <div className={`board board-layout ${isDashboardOpen && 'slide-from-left'}`} style={{ height: \"76vh\" }}>\r\n\r\n                <DragDropContext onDragEnd={this.onDragEnd} >\r\n                    <Droppable\r\n                        droppableId=\"all-columns\"\r\n                        direction=\"horizontal\"\r\n                        type=\"list\"\r\n                    >\r\n                        {provided => (\r\n                            <ul\r\n                                className=\"lists-group clear-list flex  \"\r\n                                {...provided.droppableProps}\r\n                                ref={provided.innerRef}\r\n                            >\r\n                                {lists.map((list, idx) =>\r\n                                    <TaskList\r\n                                        toggleLabels={this.toggleLabels}\r\n                                        isLabelOpen={isLabelOpen}\r\n                                        key={list.id} list={list} listIdx={idx}\r\n                                        title={list.title} {...this.props}\r\n                                    />)}\r\n\r\n                                {provided.placeholder}\r\n\r\n\r\n                                <li className=\"add-list task-list-container flex column\">\r\n\r\n                                    <form {...this.addListHandlers} className={`add-list-form  flex column ${isCurrPopover && 'open'}`}>\r\n                                        <div className=\"input-wrapper align-center flex\">\r\n                                            {!isCurrPopover && <AddIcon />}\r\n                                            <input type=\"text\" value={listToAdd.title} className=\"add-list-title\" placeholder=\"Add New List\" name=\"title\" autoComplete=\"off\" ref={this.elListTitleRef} onChange={this.handleChange} />\r\n                                        </div>\r\n\r\n                                        <button type=\"submit\" className={`add-list-btn primary-btn ${isCurrPopover && 'open'}`}>Add list</button>\r\n                                    </form>\r\n\r\n                                </li>\r\n                            </ul>\r\n                        )}\r\n                    </Droppable>\r\n                </DragDropContext>\r\n\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currPopover: state.popoverReducer.currPopover\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nexport const Board = connect(mapStateToProps, mapDispatchToProps)(_Board)","import React, { Component } from 'react'\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport onClickOutside from 'react-onclickoutside'\r\n\r\nclass _BoardFilter extends Component {\r\n\r\n    state = {\r\n        isOpen: false\r\n    }\r\n\r\n    handleClickOutside = () => {\r\n        this.setState({ isOpen: false })\r\n    }\r\n\r\n    toggleSearch = (boolean = true) => {\r\n        this.setState({ isOpen: boolean })\r\n    }\r\n\r\n    render() {\r\n        const {isOpen} = this.state\r\n        return (\r\n            <div className={`board-filter flex align-center ${isOpen && 'open'}`}>\r\n                <input type=\"text\" name=\"txt\" className=\"filter-by-txt\" disabled={!isOpen} autoComplete=\"off\"/>\r\n                <SearchIcon onClick={this.toggleSearch} className=\"filter-icon\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport const BoardFilter = onClickOutside(_BoardFilter)","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport {PopoverHeader} from './PopoverHeader'\r\n\r\nexport class NotificationPopover extends Component {\r\n    state = {\r\n        notifications: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        const notifications = boardService.getNotifications()\r\n        this.setState({ notifications })\r\n    }\r\n\r\n    onReadNotification = (notificationId) => {\r\n        const { notifications } = this.state\r\n        const notificationIdx = notifications.findIndex(notification => notification.id === notificationId)\r\n        notifications.splice(notificationIdx, 1)\r\n        this.setState({notifications})\r\n    }\r\n    render() {\r\n        const { notifications } = this.state\r\n        const { board, setCurrPopover } = this.props\r\n\r\n        if (!notifications) return <h1>Loading...</h1>\r\n        return (\r\n            <div className=\"notification-popover flex column\" onClick={ev => ev.stopPropagation()}>\r\n                <PopoverHeader title='Notifications' setCurrPopover={setCurrPopover}/>\r\n                <div className=\"notification-actions flex space-between\">\r\n                    <span className=\"view-all\">View All</span>\r\n                    <span className=\"mark-all-as-read\">Mark All as Read</span>\r\n                </div>\r\n                <section className=\"popover-section flex column\">\r\n                    <ul className=\"popover-section-list clear-list\">\r\n                        <h3 className=\"popover-section-header\">Your Notifications</h3>\r\n                        {notifications.map(notification => {\r\n                            return <li key={notification.id} className=\"popover-section-list-item flex\">\r\n                                <div className=\"checkbox-container \" title=\"mark-read\">\r\n                                    <input type=\"checkbox\" className={`read-notification-checkbox`} onChange={() => { this.onReadNotification(notification.id) }} />\r\n                                </div>\r\n                                <div className=\"notification-details\">\r\n                                    <div className=\"notification-details-header flex column justify-center align-start\">\r\n                                        <span className=\"notification-details-header-task-title\">{notification.txt}</span>\r\n                                        <div className=\"notification-details-header-board-title\">\r\n                                            <span>{board.title}</span>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"notification-details-body\">\r\n                                        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Nesciunt odit voluptas, similique eius corporis reprehenderit officiis cupiditate eos beatae molestias.\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                        })}\r\n                    </ul>\r\n                </section>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","export function BackgroundMenu({ backgrounds, onChangeBoardBg, goBack }) {\r\n    return (\r\n        <div className=\"background-menu-container\">\r\n            <button className=\"go-back-btn\" onClick={goBack}>Go back</button>\r\n            <ul className=\"background-menu clear-list flex space-between\">\r\n                {backgrounds.map(bg => {\r\n                    return <div key={bg} onClick={() => onChangeBoardBg(bg)} className=\"bg-img-container\" style={{ backgroundImage: bg }}>\r\n                    </div>\r\n                })}\r\n            </ul>\r\n        </div>\r\n    )\r\n}","import React, { Component } from 'react'\r\nimport BoardMemberImg from './BoardMemberImg'\r\nimport { PopoverHeader } from './PopoverHeader'\r\nimport { boardService } from '../services/boardService'\r\nimport formatDistanceToNow from 'date-fns/formatDistanceToNow'\r\nimport { BackgroundMenu } from './BackgroundMenu'\r\nimport { styleService } from '../services/styleService'\r\n\r\n\r\nexport class SideMenu extends Component {\r\n    state = {\r\n        activites: [],\r\n        currSection: 'activity',\r\n        bgs: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.loadBgs()\r\n    }\r\n\r\n    loadBgs = async () => {\r\n        const bgs = await styleService.getBgOptions()\r\n        this.setState({ bgs }, () => {\r\n            console.log('backgrounds: ', this.state.bgs);\r\n        })\r\n    }\r\n\r\n    onChangeBoardBg = (bg) => {\r\n        const { board, updateBoard } = { ...this.props }\r\n        board.style.bg = bg\r\n        updateBoard(board)\r\n    }\r\n    onOpenTask = (taskId) => {\r\n        const list = boardService.getListByTaskId(this.props.board, taskId)\r\n        this.props.history.push(`/board/${this.props.board._id}/${list.id}/${taskId}`)\r\n    }\r\n\r\n    onChangeSection = (section) => {\r\n        this.setState({ currSection: section })\r\n    }\r\n\r\n    render() {\r\n        const { setCurrPopover } = this.props;\r\n        const { board } = { ...this.props },\r\n            { activities } = board\r\n        const isCurrPopover = this.props.currPopover === 'ACTIVITY_MENU'\r\n        const { currSection, bgs } = this.state\r\n        return (\r\n            <div className={`activity-menu ${isCurrPopover && 'open'}`} onClick={ev => { ev.stopPropagation() }}>\r\n                <PopoverHeader title='Menu' setCurrPopover={setCurrPopover} />\r\n\r\n                {\r\n                    (currSection === 'activity' && <section className=\"popover-section flex column  activities-section\">\r\n                        <button className=\"change-background-go-to-btn\" onClick={() => { this.onChangeSection('background') }}>Change background</button>\r\n                        <ul className=\"popover-section-list clear-list\">\r\n                            {activities.map(activity => {\r\n                                return <li key={activity.id} className=\"popover-section-list-item\">\r\n                                    <BoardMemberImg member={activity.byMember} />\r\n                                    <div className=\"activity-txt\">\r\n                                        <span className=\"activity-by\">{activity.byMember.fullname} </span>\r\n                                        <span className=\"txt\">\r\n                                            {activity.txt} {activity.task && <span className=\"task-title\" onClick={() => { this.onOpenTask(activity.task.id) }}>{activity.task.title}</span>}</span>\r\n                                        <div className=\"activity-at\">\r\n                                            {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\r\n                                        </div>\r\n                                    </div>\r\n                                </li>\r\n                            })}\r\n                        </ul>\r\n                    </section>)\r\n                }\r\n\r\n                {\r\n                    (currSection === 'background' && <BackgroundMenu goBack={()=>{this.onChangeSection('activity')}} backgrounds={bgs} onChangeBoardBg={this.onChangeBoardBg} />)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { BoardFilter } from './BoardFilter'\r\nimport { NotificationPopover } from './NotificationPopover'\r\nimport NotificationsIcon from '@material-ui/icons/NotificationsNone';\r\nimport MoreHorizOutlinedIcon from '@material-ui/icons/MoreHorizOutlined';\r\n// import DashboardOutlinedIcon from '@material-ui/icons/DashboardOutlined';\r\nimport DashboardOutlinedIcon from '@material-ui/icons/TimelineOutlined';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport { SideMenu } from './SideMenu'\r\nimport BoardMemberImg from './BoardMemberImg'\r\n\r\nexport class BoardHeader extends Component {\r\n\r\n    state = {\r\n        currBadgeCount: 0,\r\n    }\r\n\r\n\r\n    incNotificationBadge = (notification) => {\r\n        this.setState({ currBadgeCount: this.state.currBadgeCount + 1 }, () => {\r\n        })\r\n    }\r\n    render() {\r\n        const { board, setCurrPopover, currPopover, onToggleDashboard, className, isDashboardOpen } = this.props\r\n        const { members } = board\r\n        const { currBadgeCount } = this.state\r\n        const isCurrPopover = currPopover === 'NOTIFICATION_POPOVER'\r\n        // const isActivityCurrPopover = currPopover === 'ACTIVITY_MENU'\r\n        return (\r\n            <>\r\n                <header className={`board-header board-layout  ${className}`}>\r\n                    {isDashboardOpen && <ArrowBackIcon className=\"go-back-icon\" onClick={() => onToggleDashboard()} />}\r\n                    <div className=\"board-title\">{board.title}</div>\r\n                    <div className=\"members-nav-display flex\">\r\n                        {members.map(member => {\r\n                            return <div key={member._id} className=\"board-member-img-wrapper\">\r\n\r\n                                <BoardMemberImg member={member} />\r\n\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n                    <ul className=\"board-nav clear-list flex\">\r\n                        <li className=\"board-filter-container\"><BoardFilter /></li>\r\n                        <li className={`notification-icon-container ${currBadgeCount && 'unread'}`}>\r\n                            <NotificationsIcon onClick={ev => {\r\n                                ev.stopPropagation()\r\n                                this.setState({ currBadgeCount: 0 })\r\n                                setCurrPopover('NOTIFICATION_POPOVER')\r\n                            }} />\r\n                        </li>\r\n                        <li title=\"dashboard\">\r\n                            <DashboardOutlinedIcon\r\n                                className=\"dashboard-icon\"\r\n                                onClick={() => onToggleDashboard()}\r\n                            />\r\n                        </li>\r\n                        <li title=\"activity\"><MoreHorizOutlinedIcon className=\"activity-menu-icon\" onClick={ev => {\r\n                            ev.stopPropagation()\r\n                            setCurrPopover('ACTIVITY_MENU')\r\n                        }} /></li>\r\n                    </ul>\r\n                </header>\r\n                {isCurrPopover\r\n                    &&\r\n                    <NotificationPopover {...this.props} />}\r\n                <SideMenu {...this.props} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { cloneDeep } from 'lodash'\r\nimport { boardService } from '../services/boardService'\r\nimport { formatRelative } from 'date-fns'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { ChangeMembersPopover } from './ChangeMembersPopover'\r\nimport BoardMemberImg from './BoardMemberImg'\r\nimport { LabelsPopover } from './LabelsPopover'\r\nimport AddIcon from '@material-ui/icons/Add'\r\n\r\nexport class _TaskDetailsInfo extends Component {\r\n    state = {\r\n        isMemberModalOpen: false,\r\n    }\r\n\r\n\r\n    onToggleMembersModal = () => {\r\n        this.setState({ isMemberModalOpen: !this.state.isMemberModalOpen })\r\n    }\r\n\r\n    onDateCheckChange = (listIdx, taskIdx, ev) => {\r\n        const { currBoard, updateBoard, user, task } = this.props\r\n        const copyBoard = cloneDeep(currBoard)\r\n        const taskDueDate = copyBoard.lists[listIdx].tasks[taskIdx].dueDate\r\n        taskDueDate.isDone = ev.target.checked\r\n        let txt\r\n        if (taskDueDate.isDone) {\r\n            txt = 'marked the due date complete on'\r\n        } else {\r\n            txt = 'marked the due date incomplete on'\r\n        }\r\n        const activity = {\r\n            user,\r\n            txt,\r\n            task,\r\n        }\r\n        updateBoard(copyBoard, activity)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { currBoard, currPopver, togglePopover } = this.props\r\n        const { listId, taskId } = this.props.match.params\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(currBoard, listId, taskId)\r\n        const list = currBoard.lists[listIdx]\r\n        const task = currBoard.lists[listIdx].tasks[taskIdx]\r\n        const { isMemberModalOpen } = this.state\r\n        return (\r\n            <div className=\"details-info\">\r\n                <div className=\"flex\" style={{ flexWrap: 'wrap' }}>\r\n\r\n                    {task?.members?.length && <div className=\"card-detail\">\r\n                        <h3>Members</h3>\r\n                        <div className=\"member-imgs flex align-center\">\r\n\r\n                            {task.members.map(member => {\r\n                                return <div key={member._id} className=\"task-member-img\">\r\n                                    {/* <img src={member.imgUrl} /> */}\r\n                                    <BoardMemberImg member={member} />\r\n                                </div>\r\n                            })}\r\n                            <div className=\"task-add-member small-btn-bgc\" title=\"Add Member\">\r\n                                {<AddIcon onClick={this.onToggleMembersModal} style={{ height: '32px' }} />}\r\n                                {isMemberModalOpen && <ChangeMembersPopover board={currBoard} list={list} task={task} setCurrPopover={this.onToggleMembersModal} currListIdx={this.props.currListIdx}\r\n                                    currTaskIdx={this.props.currTaskIdx}\r\n                                    updateBoard={this.props.updateBoard}\r\n                                />}\r\n                            </div>\r\n                        </div>\r\n                    </div>}\r\n                    {(task.labels?.length) ? <div className=\"card-detail detail-labels\">\r\n                        <h3>Labels</h3>\r\n                        <div className=\"task-labels flex\">\r\n                            {task.labels.map(label => {\r\n                                return <span onClick={() => togglePopover('labels')} key={label.id} className=\"task-label-preview flex align-center justify-center\" style={{ backgroundColor: label.color }}>\r\n                                    <span className=\"label-title\">{label?.title}</span>\r\n                                </span>\r\n                            })}\r\n                            <div className=\"task-add-label small-btn-bgc\" title=\"Add Label\">\r\n                                {<AddIcon onClick={() => togglePopover('labels')} style={{ height: '32px' }} />}\r\n                                {currPopver === 'labels' && <LabelsPopover setCurrPopover={() => togglePopover('')} {...this.props} />}\r\n                            </div>\r\n                        </div>\r\n                    </div> : ''}\r\n                    {task.dueDate?.timestamp && <div className=\"card-detail\">\r\n                        <h3>Due Date</h3>\r\n                        <div className=\"task-due-time flex align-center justify-center\">\r\n                            <span style={{ marginLeft: '5px' }}>\r\n                                <span className=\"date-checkbox\">\r\n                                    <input checked={task.dueDate.isDone} onChange={(ev) => this.onDateCheckChange(listIdx, taskIdx, ev)} type=\"checkbox\" />\r\n                                </span>\r\n                                {formatRelative(task?.dueDate?.timestamp, Date.now())}</span>\r\n                            <span className={`date-complete ${!task.dueDate.isDone && \"hidden\"}`}>COMPLETE</span>\r\n                        </div>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currBoard: state.boardReducer.currBoard,\r\n        currListIdx: state.boardReducer.currListIdx,\r\n        currTaskIdx: state.boardReducer.currTaskIdx,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const TaskDetailsInfo = connect(mapStateToProps, mapDispatchToProps)(_TaskDetailsInfo)\r\n","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { withRouter } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { cloneDeep } from 'lodash'\r\nimport NotesOutlinedIcon from '@material-ui/icons/NotesOutlined'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\n\r\nexport class _TaskDetailsDesc extends Component {\r\n    state = {\r\n        currTask: '',\r\n        isTxtAreaOpen: false,\r\n\r\n    }\r\n\r\n    componentDidMount() {\r\n        const { task } = this.props\r\n        this.setState({ currTask: task })\r\n    }\r\n\r\n\r\n    handleInput = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState(prevState => {\r\n            return {\r\n                currTask: {\r\n                    ...prevState.currTask,\r\n                    [field]: value\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    toggleControls = (boolean) => {\r\n        this.setState({ isTxtAreaOpen: boolean })\r\n    }\r\n\r\n    closeInput = () => {\r\n        this.setState({ currTask: this.props.task }, () => this.toggleControls(false))\r\n    }\r\n\r\n    saveDescription = (ev) => {\r\n        const { board, user } = this.props\r\n        const { listId, taskId } = this.props.match.params\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, listId, taskId)\r\n        let task = cloneDeep(this.props.task)\r\n        const currTask = cloneDeep(this.state.currTask)\r\n        task = currTask\r\n        const boardCopy = cloneDeep(board)\r\n        boardCopy.lists[listIdx].tasks[taskIdx] = task\r\n        const activity = {\r\n            user,\r\n            txt: `changed task description on`,\r\n            task,\r\n        }\r\n        this.props.updateBoard(boardCopy, activity)\r\n        this.toggleControls(false)\r\n    }\r\n\r\n    render() {\r\n        const { board, list, task } = this.props\r\n        const { currTask, isTxtAreaOpen } = this.state\r\n        return (\r\n            <div className=\"task-middle-details\">\r\n                <div className=\"details-description\">\r\n                    <NotesOutlinedIcon style={{ position: 'absolute', left: '-30px', top: '3px' }} />\r\n                    <h3 className=\"task-section-heading\">Description</h3>\r\n                    {(task.description)\r\n                        ? <textarea className=\"task-textarea\" style={{ fontSize: '16px', fontWeight: '400px', height: 'auto' }}\r\n                            value={currTask.description}\r\n                            name=\"description\"\r\n                            spellCheck=\"false\"\r\n                            onChange={this.handleInput}\r\n                            rows=\"3\"\r\n                            onFocus={() => this.toggleControls(true)}\r\n                            onBlur={() => this.saveDescription()}\r\n                        />\r\n                        : <textarea className=\"task-textarea\" style={{ fontSize: '16px', fontWeight: '400px', height: 'auto', backgroundColor: 'rgba(9,30,66,.04)' }}\r\n                            value={currTask.description}\r\n                            placeholder=\"Add a more detailed description...\"\r\n                            name=\"description\"\r\n                            spellCheck=\"false\"\r\n                            onChange={this.handleInput}\r\n                            rows=\"3\"\r\n                            onFocus={() => this.toggleControls(true)}\r\n                            onBlur={() => this.saveDescription()}\r\n                        />\r\n                    }\r\n                    <div className={`task-desc-buttons flex align-center ${!isTxtAreaOpen && \"hidden\"}`}>\r\n                        <button onClick={this.saveDescription} className=\"primary-btn\">Save</button>\r\n                        <CloseIcon onClick={() => this.closeInput()} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardReducer.currBoard,\r\n        currListIdx: state.boardReducer.currListIdx,\r\n        currTaskIdx: state.boardReducer.currTaskIdx,\r\n\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const TaskDetailsDesc = connect(mapStateToProps, mapDispatchToProps)(withRouter(_TaskDetailsDesc))\r\n","import React, { Component } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { utilService } from '../services/utilService'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport { cloneDeep } from 'lodash'\r\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport { LoadingSpinner } from './LoadingSpinner'\r\n\r\nexport class _TaskDetailsChecklist extends Component {\r\n\r\n    state = {\r\n        checklists: [],\r\n        newTodo: {\r\n            txt: ''\r\n        },\r\n        newTodos: []\r\n\r\n\r\n    }\r\n\r\n    elTitleRef = React.createRef()\r\n\r\n\r\n    componentDidMount() {\r\n        const { checklists } = this.props.task\r\n        if (checklists) {\r\n\r\n            const copyChecklists = cloneDeep(checklists)\r\n            this.setState({ checklists: copyChecklists })\r\n        } else {\r\n            this.setState({ checklists: [] })\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { checklists } = this.props.task\r\n        if (prevProps.task.checklists !== checklists) {\r\n\r\n            const copyChecklists = cloneDeep(checklists)\r\n            this.setState({ checklists: copyChecklists })\r\n        }\r\n    }\r\n\r\n\r\n\r\n    handleInput = (idx, { target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        const checkListToUpdate = cloneDeep(this.state.checklists[idx])\r\n        const checklistsCopy = cloneDeep(this.state.checklists)\r\n        checkListToUpdate[field] = value\r\n        checklistsCopy[idx] = checkListToUpdate\r\n        this.setState({ checklists: checklistsCopy })\r\n    }\r\n\r\n\r\n    handleCheckbox = (todoIdx, listIdx, ev) => {\r\n        const copyChecklists = cloneDeep(this.state.checklists)\r\n        const todo = copyChecklists[listIdx].todos[todoIdx]\r\n        todo.isDone = ev.target.checked\r\n        this.setState({ checklists: copyChecklists }, () => {\r\n            if (todo.isDone) {\r\n                this.onUpdateBoard('completed', todo.title)\r\n            } else {\r\n                this.onUpdateBoard('unchecked', todo.title)\r\n            }\r\n        })\r\n    }\r\n\r\n    handleTodoChange = (todoIdx, listIdx, ev) => {\r\n        const copyChecklists = cloneDeep(this.state.checklists)\r\n        copyChecklists[listIdx].todos[todoIdx].title = ev.target.value\r\n        this.setState({ checklists: copyChecklists })\r\n    }\r\n\r\n    percentDone = (checklist) => {\r\n        const doneTodos = checklist.todos.filter(todo => todo.isDone)\r\n        const percent = parseInt((doneTodos.length / checklist.todos.length) * 100)\r\n        return percent\r\n    }\r\n\r\n    handleNewTodo = (ev) => {\r\n        const checklistIdx = ev.target.name\r\n        const value = ev.target.value\r\n        const newTodos = [...this.state.newTodos]\r\n        newTodos[checklistIdx] = value\r\n        this.setState({ newTodos })\r\n    }\r\n\r\n    onEnterPress = ev => {\r\n        if (!ev.target.value) return\r\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\r\n            ev.preventDefault()\r\n            if (ev.target.name === 'title') {\r\n                this.onUpdateBoard('changeTitle')\r\n            } else {\r\n                this.onUpdateBoard('changeTxt')\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    onUpdateBoard = async (activityType, title) => {\r\n        const { board, list, task } = this.props\r\n        const { checklists } = this.state\r\n        const boardCopy = cloneDeep(board)\r\n        const listIdx = boardService.getListIdxById(board, list.id)\r\n        const taskIdx = boardService.getTaskIdxById(list, task.id)\r\n        boardCopy.lists[listIdx].tasks[taskIdx].checklists = checklists\r\n        const { user } = this.props\r\n        let txt\r\n        if (activityType === 'completed') {\r\n            txt = `completed \"${title}\" on task `\r\n        } else if (activityType === 'changeTxt') {\r\n            txt = 'changed a todo in task'\r\n        } else if (activityType === 'unchecked') {\r\n            txt = `unchecked \"${title}\" on task`\r\n        } else if (activityType === 'remove') {\r\n            txt = `removed \"${title}\" from task`\r\n        } else if (activityType === 'newTodo') {\r\n            txt = `added a todo: \"${title}\" to task`\r\n        } else {\r\n            txt = 'changed checklist title in'\r\n        }\r\n        const activity = {\r\n            user,\r\n            txt,\r\n            task,\r\n        }\r\n        await this.props.updateBoard(boardCopy, activity)\r\n        this.elTitleRef.current?.blur()\r\n    }\r\n\r\n    onRemoveTodo = (todoIdx, listIdx, ev) => {\r\n        let copyChecklists = cloneDeep(this.state.checklists)\r\n        const todoToRemove = copyChecklists[listIdx].todos[todoIdx]\r\n        copyChecklists[listIdx].todos.splice(todoIdx, 1)\r\n        if (!copyChecklists[listIdx].todos.length) {\r\n            copyChecklists.splice(listIdx, 1)\r\n        }\r\n        this.setState({ checklists: copyChecklists }, () => this.onUpdateBoard('remove', todoToRemove.title))\r\n\r\n    }\r\n\r\n    onAddItem = (listIdx, ev) => {\r\n        if (!ev.target.value) return\r\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\r\n            const todoToAdd = {\r\n                id: utilService.makeId(),\r\n                title: this.state.newTodos[listIdx],\r\n                isDone: false\r\n            }\r\n            const copyChecklists = cloneDeep(this.state.checklists)\r\n            copyChecklists[listIdx].todos.push(todoToAdd)\r\n            this.setState({ checklists: copyChecklists }, () => {\r\n                this.onUpdateBoard('newTodo', todoToAdd.title)\r\n                const newTodos = [...this.state.newTodos]\r\n                newTodos[listIdx] = ''\r\n                this.setState({ newTodos })\r\n            })\r\n        }\r\n    }\r\n\r\n    onDeleteChecklist = (checklistIdx) => {\r\n        const boardCopy = cloneDeep(this.props.board)\r\n        const { list, task, updateBoard } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(boardCopy, list.id, task.id)\r\n        boardCopy.lists[listIdx].tasks[taskIdx].checklists.splice(checklistIdx, 1)\r\n        updateBoard(boardCopy)\r\n    }\r\n\r\n    render() {\r\n        const { checklists, newTodos } = this.state\r\n        const { percentDone } = this\r\n        if (!checklists) return <LoadingSpinner />\r\n        return (\r\n            <div className=\"task-checklist\">\r\n                { checklists?.map((checklist, listIdx) => {\r\n                    return <div className=\"checklist-header\">\r\n                        <CheckBoxOutlinedIcon style={{ position: 'absolute', left: '-30px', top: '3px' }} />\r\n                        <div className=\"flex align-center space-between\">\r\n\r\n                            <textarea style={{ width: '70%' }}\r\n                                className=\"task-textarea\"\r\n                                value={checklist.title}\r\n                                name=\"title\"\r\n                                onChange={(ev) => this.handleInput(listIdx, ev)}\r\n                                spellCheck=\"false\"\r\n                                onKeyDown={this.onEnterPress}\r\n                                ref={this.elTitleRef}\r\n                            />\r\n                            <span onClick={() => this.onDeleteChecklist(listIdx)}><button className=\"secondary-btn\" style={{ padding: '5px 8px' }}>Delete</button></span>\r\n                        </div>\r\n                        {checklist?.todos.length ? <LinearProgressWithLabel value={percentDone(checklist)} /> : ''}\r\n\r\n                        {checklist?.todos &&\r\n                            checklist.todos.map((todo, todoIdx) => {\r\n                                return <div className=\"task-todo-container flex align-center justify-center\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        name=\"checkbox\"\r\n                                        onChange={(ev) => this.handleCheckbox(todoIdx, listIdx, ev)}\r\n                                        checked={todo.isDone}\r\n                                    />\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        className={`${todo.isDone && \"checked\"} todo-title task-todo-input`}\r\n                                        value={todo.title}\r\n                                        onChange={(ev) => this.handleTodoChange(todoIdx, listIdx, ev)}\r\n                                        onKeyDown={this.onEnterPress}\r\n                                        autoComplete=\"false\"\r\n                                        onBlur={this.onUpdateBoard}\r\n                                    />\r\n                                    <DeleteOutlinedIcon className=\"todo-delete-btn\" onClick={(ev) => this.onRemoveTodo(todoIdx, listIdx, ev)} />\r\n                                </div>\r\n\r\n                            })\r\n\r\n                        }\r\n                        <input\r\n                            type=\"text\"\r\n                            autoComplete=\"false\"\r\n                            name={listIdx}\r\n                            placeholder=\"Add an item\"\r\n                            className=\"task-todo-input\"\r\n                            value={newTodos[listIdx]}\r\n                            onChange={this.handleNewTodo}\r\n                            onKeyDown={(ev) => this.onAddItem(listIdx, ev)}\r\n                            onBlur={() => {\r\n                                const newTodo = { txt: '' }\r\n                                this.setState({ newTodo })\r\n                            }}\r\n                        />\r\n                    </div>\r\n                })\r\n                }\r\n            </div >\r\n        )\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currListIdx: state.boardReducer.currListIdx,\r\n    }\r\n}\r\n\r\nexport const TaskDetailsChecklist = connect(mapStateToProps, mapDispatchToProps)(_TaskDetailsChecklist)\r\n\r\n\r\nfunction LinearProgressWithLabel(props) {\r\n    return (\r\n        <Box display=\"flex\" alignItems=\"center\">\r\n            <Box width=\"100%\" mr={1}>\r\n                <LinearProgress variant=\"determinate\" {...props} />\r\n            </Box>\r\n            <Box minWidth={35}>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nLinearProgressWithLabel.propTypes = {\r\n\r\n    value: PropTypes.number.isRequired,\r\n};\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\nexport default function LinearWithValueLabel() {\r\n    const classes = useStyles();\r\n    const [progress, setProgress] = React.useState(10);\r\n\r\n    React.useEffect(() => {\r\n        const timer = setInterval(() => {\r\n            setProgress((prevProgress) => (prevProgress >= 100 ? 10 : prevProgress + 10));\r\n        }, 800);\r\n        return () => {\r\n            clearInterval(timer);\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <LinearProgressWithLabel value={progress} />\r\n        </div>\r\n    );\r\n}\r\n\r\n","import React, { Component } from 'react'\r\nimport { formatDistance } from 'date-fns'\r\nimport { cloneDeep } from 'lodash'\r\nimport { boardService } from '../services/boardService'\r\nimport { utilService } from '../services/utilService'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard } from '../store/actions/boardActions'\r\nimport TextsmsOutlinedIcon from '@material-ui/icons/TextsmsOutlined';\r\nimport PermIdentityOutlinedIcon from '@material-ui/icons/PermIdentityOutlined';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport { LoadingSpinner } from './LoadingSpinner'\r\n\r\n\r\nexport class _TaskDetailsActivity extends Component {\r\n    state = {\r\n        isActivityOpen: false,\r\n        comment: {\r\n            txt: ''\r\n        },\r\n    }\r\n\r\n    onToggleDetails = () => {\r\n        this.setState({ isActivityOpen: !this.state.isActivityOpen })\r\n    }\r\n\r\n    handleComment = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        this.setState(prevState => {\r\n            return {\r\n                comment: {\r\n                    ...prevState.comment,\r\n                    [field]: value\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    onEnterPress = ev => {\r\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\r\n            ev.preventDefault()\r\n            this.saveComment(ev)\r\n        }\r\n    }\r\n\r\n    saveComment = async (ev) => {\r\n        ev.preventDefault()\r\n        const { txt } = this.state.comment\r\n        const { user } = this.props\r\n        const commentToAdd = {\r\n            id: utilService.makeId(),\r\n            createdAt: Date.now(),\r\n            txt\r\n        }\r\n        let byMember;\r\n        if (!user) {\r\n            byMember = { _id: 'guest', fullname: 'Guest', imgUrl: 'https://res.cloudinary.com/nofar/image/upload/v1611336021/psvaqtmh8ithfqe8ah27.png' }\r\n        } else {\r\n            byMember = { _id: user._id, fullname: user.fullname, imgUrl: user.imgUrl }\r\n        }\r\n        commentToAdd.byMember = byMember\r\n        const { currBoard, list, task } = this.props\r\n        const copyTask = cloneDeep(task)\r\n        const copyBoard = cloneDeep(currBoard)\r\n        if (copyTask.comments) {\r\n            copyTask.comments.unshift(commentToAdd)\r\n        } else {\r\n            copyTask.comments = []\r\n            copyTask.comments.unshift(commentToAdd)\r\n        }\r\n\r\n        const { taskIdx, listIdx } = boardService.getListAndTaskIdxById(currBoard, list.id, task.id)\r\n        copyBoard.lists[listIdx].tasks[taskIdx] = copyTask\r\n        const activity = {\r\n            user,\r\n            txt: `commented  \"${txt}\" on`,\r\n            task,\r\n        }\r\n        await this.props.updateBoard(copyBoard, activity)\r\n        const comment = { txt: '' }\r\n        this.setState({ comment })\r\n\r\n    }\r\n\r\n    onRemoveComment = async (listIdx, taskIdx, commentIdx) => {\r\n        const copyBoard = cloneDeep(this.props.currBoard)\r\n        copyBoard.lists[listIdx].tasks[taskIdx].comments.splice(commentIdx, 1)\r\n        const { user, task } = this.props\r\n        const activity = {\r\n            user,\r\n            txt: `removed a comment from`,\r\n            task,\r\n        }\r\n        await this.props.updateBoard(copyBoard, activity)\r\n    }\r\n\r\n    render() {\r\n        const { currBoard, user } = this.props\r\n        const { listId, taskId } = this.props.match.params\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(currBoard, listId, taskId)\r\n        const task = currBoard.lists[listIdx].tasks[taskIdx]\r\n        const taskComments = task?.comments\r\n        const taskActivities = currBoard.activities.filter(activity => {\r\n            if (activity.task) {\r\n                return activity.task.id === task.id\r\n            }\r\n        })\r\n        const { isActivityOpen, comment } = this.state\r\n        if (!taskActivities) return <LoadingSpinner />\r\n        return (\r\n            <div className=\"task-activity\">\r\n                <div className=\"activity-header flex\">\r\n                    <TextsmsOutlinedIcon style={{ position: 'absolute', left: '-30px', top: '3px' }} />\r\n                    <h3 className=\"task-section-heading\" style={{ padding: '4px 8px' }}>Activity</h3>\r\n                    <button onClick={this.onToggleDetails} className=\"secondary-btn\">{(isActivityOpen) ? 'Hide Activity' : 'Show Activity'}</button>\r\n                </div>\r\n                <div className=\"task-comments\">\r\n                    <div className=\"new-comment flex align-center\">\r\n                        <div className=\"task-member-img\">{(user) ? <img src={user.imgUrl} /> : <img src=\"https://res.cloudinary.com/nofar/image/upload/v1611336021/psvaqtmh8ithfqe8ah27.png\" />}</div>\r\n                        <form>\r\n                            <div className=\"comment-box\">\r\n                                <textarea\r\n                                    className=\"comment-textarea\"\r\n                                    placeholder=\"Write a comment...\"\r\n                                    value={comment.txt}\r\n                                    name=\"txt\"\r\n                                    onChange={this.handleComment}\r\n                                    onKeyDown={this.onEnterPress}\r\n                                >\r\n                                </textarea>\r\n                            </div>\r\n                        </form>\r\n                    </div>\r\n                    {taskComments ?\r\n                        taskComments.map((comment, commentIdx) => {\r\n                            return <div key={comment.id} className=\"task-user-comment flex\">\r\n                                <div className=\"task-member-img\"><img src={comment.byMember.imgUrl} /></div>\r\n                                <div className=\"activity-info flex column justify-center\">\r\n                                    <p className=\"activity-txt\">\r\n                                        <span className=\"activity-member-name\">{comment.byMember.fullname} </span>\r\n                                        <div className=\"activity-date\" style={{ display: 'inline-block' }}><span>{formatDistance(comment.createdAt, Date.now())}</span></div>\r\n                                    </p>\r\n                                    <div className=\"comment-txt\">\r\n                                        <span>{comment.txt}</span>\r\n                                    </div>\r\n                                </div>\r\n                                {(comment.byMember._id === user?._id) ? <span onClick={() => this.onRemoveComment(listIdx, taskIdx, commentIdx)} className=\"comment-dlt-container\" ><DeleteOutlinedIcon className=\"comment-dlt-btn\" /></span> : ''}\r\n                            </div>\r\n                        })\r\n                        : ''}\r\n                </div>\r\n                <div className={`activity-container ${!isActivityOpen && \"hidden\"}`}>\r\n                    {taskActivities &&\r\n                        taskActivities.map(activity => {\r\n                            return <div key={activity.id} className=\"task-user-activity flex\">\r\n                                <div className=\"task-member-img\"><img src={activity.byMember.imgUrl} /></div>\r\n                                <div className=\"activity-info flex column justify-center\">\r\n                                    <p className=\"activity-txt\">\r\n                                        <span className=\"activity-member-name\">{activity.byMember.fullname} </span>\r\n                                        <span>{activity.txt} </span>\r\n                                        <span className=\"activity-task-title\">{activity.task.title}</span>\r\n                                    </p>\r\n                                    <div className=\"activity-date\">\r\n                                        <span>{formatDistance(activity.createdAt, Date.now())}</span>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currBoard: state.boardReducer.currBoard,\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard\r\n}\r\n\r\nexport const TaskDetailsActivity = connect(mapStateToProps, mapDispatchToProps)(_TaskDetailsActivity)\r\n","import React, { Component } from 'react'\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined'\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\nimport { boardService } from '../services/boardService'\r\nimport { cloneDeep } from 'lodash'\r\n\r\n\r\n\r\nexport class TaskDetailsAttachments extends Component {\r\n\r\n    onDeleteImg = (imgIdx) => {\r\n        const { board, list, task, updateBoard, user } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const boardCopy = cloneDeep(board)\r\n        boardCopy.lists[listIdx].tasks[taskIdx].attachments.splice(imgIdx, 1)\r\n        const activity = {\r\n            user,\r\n            txt: `removed an image from`,\r\n            task,\r\n        }\r\n        updateBoard(boardCopy, activity)\r\n\r\n    }\r\n    render() {\r\n        const { board, list, task } = this.props\r\n        const taskImages = task.attachments\r\n        return (\r\n            <section className=\"attachments\">\r\n                <div className=\"details-images\">\r\n                    <ImageOutlinedIcon style={{ position: 'absolute', left: '-30px', top: '3px' }} />\r\n                    <h3 className=\"task-section-heading\">Images</h3>\r\n                    {(taskImages ? <div className=\"img-list\">\r\n                        {taskImages.map((img, imgIdx) => {\r\n                            return <div className=\"img-preview flex\" style={{ backgroundImage: `url('${img}')` }}>\r\n                                <DeleteOutlinedIcon onClick={() => this.onDeleteImg(imgIdx)} className=\"todo-delete-btn\" style={{ position: 'absolute', right: '0' }} />\r\n                            </div>\r\n                        })}\r\n                    </div>\r\n\r\n                        : ''\r\n                    )}\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n","import axios from 'axios'\r\n\r\n\r\nexport const cloudinaryService = {\r\n  uploadImg\r\n}\r\n\r\n\r\nasync function uploadImg(file) {\r\n\r\n  console.log('Clouddddddddd');\r\n\r\n  const CLOUD_NAME = \"nofar\"\r\n  const UPLOAD_URL = `https://api.cloudinary.com/v1_1/nofar/image/upload`\r\n\r\n  const formData = new FormData();\r\n  formData.append('file', file)\r\n  formData.append('upload_preset', 'yn9mpntb');\r\n  try {\r\n    const res = await axios(UPLOAD_URL, {\r\n      method: 'POST',\r\n      data: formData\r\n    })\r\n    const data = res.data\r\n    console.log('data:', data);\r\n    return data\r\n\r\n  } catch (err) {\r\n    console.log(err);\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport LabelOutlinedIcon from '@material-ui/icons/LabelOutlined'\r\nimport ChangeMembersIcon from '@material-ui/icons/PeopleOutline'\r\nimport QueryBuilderOutlinedIcon from '@material-ui/icons/QueryBuilderOutlined'\r\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined'\r\nimport ImageOutlinedIcon from '@material-ui/icons/ImageOutlined'\r\nimport ArrowRightAltOutlinedIcon from '@material-ui/icons/ArrowRightAltOutlined'\r\nimport DeleteOutlineOutlinedIcon from '@material-ui/icons/DeleteOutlineOutlined'\r\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined'\r\nimport { ChangeMembersPopover } from './ChangeMembersPopover'\r\nimport { LabelsPopover } from './LabelsPopover'\r\nimport { DateTimePopover } from './DateTimePopover'\r\nimport { MoveTaskPopover } from './MoveTaskPopover'\r\nimport { CopyTaskPopover } from './CopyTaskPopover'\r\nimport { cloneDeep } from 'lodash'\r\nimport { utilService } from '../services/utilService'\r\nimport { cloudinaryService } from '../services/cloudinaryService'\r\nimport { parseISO } from 'date-fns'\r\nimport { getTime } from 'date-fns'\r\nimport { formatRelative } from 'date-fns'\r\nimport { boardService } from '../services/boardService';\r\n\r\nexport class TaskSidebar extends Component {\r\n\r\n    state = {\r\n        dueDate: {\r\n            timestamp: '',\r\n            isDone: false\r\n        },\r\n        taskImgUrl: ''\r\n    }\r\n\r\n    onAddNewList = () => {\r\n        const { board, list, task, updateBoard, user } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const copyBoard = cloneDeep(board)\r\n        const newChecklist = {\r\n            \"id\": utilService.makeId(),\r\n            \"title\": \"Checklist\",\r\n            \"todos\": []\r\n        }\r\n        if (!copyBoard.lists[listIdx].tasks[taskIdx].checklists) {\r\n            copyBoard.lists[listIdx].tasks[taskIdx].checklists = []\r\n        }\r\n        copyBoard.lists[listIdx].tasks[taskIdx].checklists.push(newChecklist)\r\n        const activity = {\r\n            user,\r\n            txt: `added ${newChecklist.title} to`,\r\n            task,\r\n        }\r\n        updateBoard(copyBoard, activity)\r\n        console.log('after update')\r\n    }\r\n\r\n    onRemoveTask = async () => {\r\n        const { board, list, task, updateBoard, user } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const copyBoard = cloneDeep(board)\r\n        copyBoard.lists[listIdx].tasks.splice(taskIdx, 1)\r\n        const activity = {\r\n            user,\r\n            txt: `removed task`,\r\n            task,\r\n        }\r\n        this.props.history.push(`/board/${board._id}`)\r\n        await updateBoard(copyBoard, activity)\r\n    }\r\n\r\n    onDateChange = (ev) => {\r\n        let parsedString = parseISO(ev.target.value)\r\n        let timestamp = getTime(parsedString)\r\n        const dueDate = {\r\n            timestamp,\r\n            isDone: false\r\n        }\r\n        this.setState({ dueDate })\r\n    }\r\n\r\n    onSaveDate = () => {\r\n\r\n        const { board, list, task, updateBoard, user } = this.props\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n        const copyBoard = cloneDeep(board)\r\n        if (!this.state.dueDate.timestamp) return\r\n        copyBoard.lists[listIdx].tasks[taskIdx].dueDate = this.state.dueDate\r\n        const activity = {\r\n            user,\r\n            txt: `set a due date to ${formatRelative(this.state.dueDate.timestamp, Date.now())} on`,\r\n            task,\r\n        }\r\n        updateBoard(copyBoard, activity)\r\n        this.props.togglePopover('')\r\n    }\r\n\r\n    onUploadImg = async ev => {\r\n        try {\r\n            const { secure_url } = await cloudinaryService.uploadImg(ev.target.files[0])\r\n            this.setState({ taskImgUrl: secure_url }, async () => {\r\n                const { board, list, task, updateBoard, user } = this.props\r\n                const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, list.id, task.id)\r\n                const copyBoard = cloneDeep(board)\r\n                let currTask = copyBoard.lists[listIdx].tasks[taskIdx]\r\n                if (currTask.attachments?.length) {\r\n                    currTask.attachments = [\r\n                        ...copyBoard.lists[listIdx].tasks[taskIdx].attachments,\r\n                        this.state.taskImgUrl\r\n                    ]\r\n                } else {\r\n                    currTask.attachments = []\r\n                    currTask.attachments.push(this.state.taskImgUrl)\r\n                }\r\n                const activity = {\r\n                    user,\r\n                    txt: `uploaded an image to`,\r\n                    task,\r\n                }\r\n                await updateBoard(copyBoard, activity)\r\n            })\r\n\r\n        } catch (err) {\r\n            this.setState({ msg: 'Couldnt upload your image try again' })\r\n            console.log('problem loading the img ', err);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { currPopover, togglePopover } = this.props\r\n        return (\r\n            <aside className=\"sidebar flex column\">\r\n                <h3 className=\"sidebar-heading\">Actions</h3>\r\n                <div className=\"sidebar-actions flex column\">\r\n                    <div className=\"action-container flex align-center\" onClick={() => togglePopover('labels')} >\r\n                        <span className=\"action-icon\"><LabelOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Labels</span>\r\n                        {currPopover === 'labels' && <LabelsPopover setCurrPopover={() => togglePopover('')} {...this.props} />}\r\n\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={() => togglePopover('members')}>\r\n                        <span className=\"action-icon\"><ChangeMembersIcon /></span>\r\n                        <span className=\"action-txt\">Members</span>\r\n                        {currPopover === 'members' && <ChangeMembersPopover setCurrPopover={() => togglePopover('')} {...this.props} />}\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={() => togglePopover('date')}>\r\n                        <span className=\"action-icon\"><QueryBuilderOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Due Date</span>\r\n                        {currPopover === 'date' && <DateTimePopover\r\n                            onClick={(ev) => ev.stopPropagation()}\r\n                            setCurrPopover={() => togglePopover('')}\r\n                            onDateChange={this.onDateChange}\r\n                            onSaveDate={this.onSaveDate}\r\n                            {...this.props} />}\r\n\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={this.onAddNewList}>\r\n                        <span className=\"action-icon\"><CheckBoxOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Checklist</span>\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\">\r\n                        <label className=\"action-icon\" style={{ width: '100%', cursor: 'pointer' }}>  <ImageOutlinedIcon className=\"add-img-icon\" />\r\n                            <input onChange={this.onUploadImg} type=\"file\" hidden />\r\n                            <span className=\"action-txt\">Image</span>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={() => togglePopover('move')}>\r\n                        <span className=\"action-icon\"><ArrowRightAltOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Move</span>\r\n                        {currPopover === 'move' && <MoveTaskPopover setCurrPopover={() => togglePopover('')} {...this.props} />}\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={() => togglePopover('copy')}>\r\n                        <span className=\"action-icon\"><FileCopyOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Copy</span>\r\n                        {currPopover === 'copy' && <CopyTaskPopover setCurrPopover={() => togglePopover('')} {...this.props} />}\r\n                    </div>\r\n                    <div className=\"action-container flex align-center\" onClick={this.onRemoveTask}>\r\n                        <span className=\"action-icon\"><DeleteOutlineOutlinedIcon /></span>\r\n                        <span className=\"action-txt\">Delete</span>\r\n                    </div>\r\n                </div>\r\n            </aside>\r\n        )\r\n    }\r\n}\r\n","import React, { Component, Fragment } from 'react'\r\nimport { boardService } from '../services/boardService'\r\nimport { TaskDetailsInfo } from './TaskDetailsInfo'\r\nimport { TaskDetailsDesc } from './TaskDetailsDesc'\r\nimport { TaskDetailsChecklist } from './TaskDetailsChecklist'\r\nimport { TaskDetailsActivity } from './TaskDetailsActivity'\r\nimport { TaskDetailsAttachments } from './TaskDetailsAttachments'\r\nimport { TaskSidebar } from './TaskSidebar'\r\nimport { cloneDeep } from 'lodash'\r\nimport { connect } from 'react-redux'\r\nimport { updateBoard, toggleTask, toggleOverlay } from '../store/actions/boardActions'\r\nimport { withRouter } from 'react-router-dom'\r\nimport DvrOutlinedIcon from '@material-ui/icons/DvrOutlined';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nexport class _TaskDetails extends Component {\r\n    state = {\r\n        isDetailsOpen: false,\r\n        currPopover: '',\r\n        board: {},\r\n        list: {},\r\n        task: {}\r\n\r\n    }\r\n\r\n    elTitleRef = React.createRef()\r\n\r\n    componentDidMount() {\r\n        const { listId, taskId } = this.props.match.params // Whenever someone opens task through URL\r\n        const details = this.getDetails()\r\n        if (details) {\r\n\r\n            const { board, list, task } = details\r\n            this.getCurrTask(board._id, taskId)\r\n            this.setState({ board, list, task })\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        const { listId, taskId } = this.props.match.params\r\n        const details = this.getDetails()\r\n        if (details) {\r\n\r\n            const { board, list, task } = details\r\n            if (taskId && listId && !this.state.isDetailsOpen) { // When task is clicked on board\r\n                this.setState({ isDetailsOpen: true, board, list, task }, async () => {\r\n                    this.getCurrTask(board._id, taskId)\r\n                    if (!this.props.isOverlayOpen) {\r\n                        await this.props.toggleOverlay()\r\n                    }\r\n\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.props.toggleOverlay()\r\n    }\r\n\r\n    // TRY TO REFACTOR\r\n    getDetails = () => {\r\n        const { listId, taskId } = this.props.match.params\r\n        if (listId && taskId) {\r\n            const { board } = { ...this.props }\r\n            const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, listId, taskId)\r\n            const list = board.lists[listIdx]\r\n            const task = list.tasks[taskIdx]\r\n            return { board, list, task }\r\n        }\r\n    }\r\n\r\n    handleTitle = ({ target }) => {\r\n        const field = target.name\r\n        const value = target.value\r\n        const copyTask = cloneDeep(this.state.task)\r\n        copyTask.title = value\r\n        this.setState({ task: copyTask })\r\n    }\r\n\r\n    onEnterPress = ev => {\r\n        if (ev.keyCode === 13 && ev.shiftKey === false) {\r\n            ev.preventDefault()\r\n            this.onSubmitForm(ev)\r\n        }\r\n    }\r\n\r\n    onSubmitForm = async (ev) => {\r\n        ev.preventDefault()\r\n        const { board, list, task } = this.state\r\n        if (!task.title) return\r\n        const boardCopy = { ...this.state.board }\r\n        const currListIdx = boardService.getListIdxById(board, list.id)\r\n        const taskIdx = boardCopy.lists[currListIdx].tasks.findIndex(currTask => currTask.id === task.id)\r\n        boardCopy.lists[currListIdx].tasks[taskIdx] = task\r\n        const { user } = this.props\r\n        const activity = {\r\n            user,\r\n            txt: `has changed task (${task.title}) title`,\r\n            task,\r\n        }\r\n        this.elTitleRef.current.blur()\r\n        await this.props.updateBoard(boardCopy, activity)\r\n    }\r\n\r\n    getCurrTask = async (boardId, taskId) => {\r\n        const task = await boardService.getTaskById(boardId, taskId)\r\n        this.setState({ task })\r\n    }\r\n\r\n    onCloseModal = (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const { board } = this.state\r\n        this.setState({ isDetailsOpen: false }, async () => {\r\n            this.props.history.push(`/board/${board._id}`)\r\n        })\r\n    }\r\n\r\n    togglePopover = (name) => {\r\n        const { currPopover } = this.state\r\n        if (currPopover === name) {\r\n            this.setState({ currPopover: '' })\r\n        } else {\r\n            this.setState({ currPopover: name })\r\n\r\n        }\r\n    }\r\n\r\n    onOverlayClick = () => {\r\n        const { board } = this.props\r\n        this.props.history.push(`/board/${board._id}`)\r\n    }\r\n\r\n\r\n    render() {\r\n        const { isDetailsOpen, currPopover } = this.state\r\n        const { board, user } = this.props\r\n        const { listId, taskId } = this.props.match.params\r\n        const { listIdx, taskIdx } = boardService.getListAndTaskIdxById(board, listId, taskId)\r\n        const currList = board.lists[listIdx]\r\n        const currTask = board.lists[listIdx].tasks[taskIdx]\r\n\r\n\r\n        if (!currTask) return <div>Loading details...</div>\r\n        return (\r\n            <section onClick={() => currPopover ? this.togglePopover('') : ''} className=\"task-details\">\r\n                {this.state.isDetailsOpen &&\r\n                    <div className={`${this.props.isOverlayOpen && \"main-overlay\"} ${!isDetailsOpen && \"hidden\"}`} onClick={this.onOverlayClick}>\r\n                        <div className=\"details-modal flex\" onClick={(ev) => {\r\n                            ev.stopPropagation()\r\n                            if (currPopover) this.togglePopover('')\r\n                        }}>\r\n                            <div className=\"main-details flex column\">\r\n\r\n                                <div className=\"details-header flex column\">\r\n                                    <form className=\"flex\">\r\n                                        <DvrOutlinedIcon style={{ position: 'absolute', left: '-30px', top: '3px' }} />\r\n                                        <textarea onKeyDown={this.onEnterPress} ref={this.elTitleRef} className=\"task-textarea\"\r\n                                            name=\"title\"\r\n                                            onChange={this.handleTitle}\r\n                                            value={this.state.task?.title}\r\n                                            spellCheck=\"false\"\r\n                                            onBlur={this.onSubmitForm}\r\n                                        />\r\n                                        <div className=\"task-details-close-btn close-btn flex align-center justify-center\">\r\n                                            <CloseIcon onClick={this.onCloseModal} />\r\n                                        </div>\r\n                                    </form>\r\n                                    <p>in list <span className=\"details-list-name\">{currList?.title}</span></p>\r\n                                </div>\r\n                                <div className=\"details-info\">\r\n                                    <TaskDetailsInfo board={board} list={currList} task={currTask} togglePopover={this.togglePopover} currPopover={this.state.currPopover}  {...this.props} />\r\n                                </div>\r\n                                <div className=\"details-description\">\r\n                                    <TaskDetailsDesc board={board} list={currList} task={currTask} user={user} />\r\n                                </div>\r\n                                {currTask.attachments?.length ?\r\n                                    <div className=\"details-attachments\">\r\n                                        <TaskDetailsAttachments board={board} list={currList} task={currTask} {...this.props} />\r\n                                    </div>\r\n                                    : ''\r\n                                }\r\n                                <div className=\"details-checklist\">\r\n                                    <TaskDetailsChecklist board={board} list={currList} task={currTask} user={user} />\r\n                                </div>\r\n                                <div className=\"details-activity\">\r\n                                    <TaskDetailsActivity board={board} list={currList} task={currTask} {...this.props} />\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"details-buttons\">\r\n\r\n\r\n                                <div className=\"task-sidebar\">\r\n                                    <TaskSidebar board={board} list={currList} task={currTask} togglePopover={this.togglePopover} currPopover={this.state.currPopover} {...this.props} />\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                }\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    updateBoard,\r\n    toggleTask,\r\n    toggleOverlay\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        isTaskOpen: state.boardReducer.isTaskOpen,\r\n        board: state.boardReducer.currBoard,\r\n        currListIdx: state.boardReducer.currListIdx,\r\n        currTaskIdx: state.boardReducer.currTaskIdx,\r\n        isOverlayOpen: state.boardReducer.isOverlayOpen,\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nexport const TaskDetails = connect(mapStateToProps, mapDispatchToProps)(withRouter(_TaskDetails))","import io from 'socket.io-client'\r\n\r\nimport { storageService } from '../services/storageService.js'\r\nconst baseUrl = (process.env.NODE_ENV === 'production') ? '' : 'http://localhost:3031'\r\nexport const socketService = createSocketService()\r\n// socketService.setup()\r\n// export const socketService = createDummySocketService()\r\n\r\nwindow.socketService = socketService\r\nconst MSG_STORAGE_KEY = 'msgDB'\r\n\r\nfunction createSocketService() {\r\n    var socket;\r\n\r\n    const socketService = {\r\n        setup() {\r\n            socket = io(baseUrl, {\r\n                withCredentials: true,\r\n            });\r\n        },\r\n        on(eventName, cb) {\r\n            socket.on(eventName, cb)\r\n        },\r\n        off(eventName, cb) {\r\n            socket.off(eventName, cb)\r\n        },\r\n        emit(eventName, data) {\r\n            socket.emit(eventName, data)\r\n        },\r\n        terminate() {\r\n            socket = null\r\n        },\r\n        saveMsgsToStorage(msgs) {\r\n            storageService.store(MSG_STORAGE_KEY, msgs)\r\n        },\r\n        getMsgsFromStorage() {\r\n            return storageService.load(MSG_STORAGE_KEY)\r\n        }\r\n        \r\n\r\n    }\r\n    return socketService\r\n}\r\n\r\n// eslint-disable-next-line\r\nfunction createDummySocketService() {\r\n    var listenersMap = {}\r\n    const socketService = {\r\n        setup() {\r\n            listenersMap = {}\r\n        },\r\n        terminate() {\r\n            this.setup()\r\n        },\r\n        on(eventName, cb) {\r\n            listenersMap[eventName] = [...(listenersMap[eventName]) || [], cb]\r\n        },\r\n        off(eventName, cb) {\r\n            if (!listenersMap[eventName]) return\r\n            listenersMap[eventName] = listenersMap[eventName].filter(l => l !== cb)\r\n        },\r\n        emit(eventName, data) {\r\n            if (!listenersMap[eventName]) return\r\n            listenersMap[eventName].forEach(listener => {\r\n                listener(data)\r\n            })\r\n        },\r\n        debugMsg() {\r\n            this.emit('chat addMsg', { from: 'Someone', txt: 'Aha it worked!' })\r\n        },\r\n    }\r\n    return socketService\r\n}\r\n\r\n// Basic Tests\r\n// function cb(x) {console.log(x)}\r\n// socketService.on('baba', cb)\r\n// socketService.emit('baba', 'DATA')\r\n// socketService.off('baba', cb)\r\n","import { zonedTimeToUtc, utcToZonedTime, format } from 'date-fns-tz'\r\n\r\nexport const dashboardService = {\r\n    getTasksPerPeopleData,\r\n    getActivityPerDayData,\r\n    getTasksPerDayData,\r\n    getDashboardPrevsData\r\n}\r\n\r\nfunction getTasksPerPeopleData(board) {\r\n    const labels = board.members.map(member => member.fullname)\r\n    var boardTasks = []\r\n    board.lists.forEach(list => {\r\n        boardTasks = [...boardTasks, ...list.tasks]\r\n    })\r\n    const tasksPerPerson = boardTasks.reduce((acc, task) => {\r\n        task.members?.length && task.members.forEach(member => {\r\n            const currIdx = labels.indexOf(member.fullname)\r\n            acc[currIdx] = acc[currIdx] ? acc[currIdx] + 1 : 1\r\n        })\r\n\r\n        return acc\r\n    }, [])\r\n    return {\r\n        labels, tasksPerPerson, data: {\r\n            labels,\r\n            datasets: [{\r\n                data: tasksPerPerson,\r\n                backgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56'\r\n                ]\r\n            }]\r\n        }\r\n    }\r\n}\r\n\r\nfunction getActivityPerDayData(board) {\r\n    var labels = []\r\n\r\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    const date = new Date()\r\n    const zonedDate = utcToZonedTime(date, timeZone)\r\n\r\n    for (var i = 0; i < 6; i++) {\r\n        labels[i] = format(zonedDate, 'LLL') + ' ' + (zonedDate.getDate() - i)\r\n    }\r\n\r\n    const activityPerDay = board.activities.reduce((acc, activity) => {\r\n        const zonedCreatedAt = utcToZonedTime(new Date(activity.createdAt), timeZone)\r\n        const formattedTime = format(zonedCreatedAt, 'LLL') + ' ' + (zonedCreatedAt.getDate())\r\n        const currIdx = labels.indexOf(formattedTime)\r\n        if (currIdx !== -1) acc[currIdx] = acc[currIdx] ? acc[currIdx] + 1 : 1\r\n        return acc\r\n    }, [])\r\n\r\n    return {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Activity',\r\n                data: activityPerDay,\r\n                barPercentage: 0.8,\r\n                borderColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    '#c377e0',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ],\r\n                borderWidth: 2,\r\n                backgroundColor: [\r\n                    '#FF638450',\r\n                    '#36A2EB50',\r\n                    '#FFCE5650',\r\n                    '#c377e050',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    '#c377e0',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nfunction getTasksPerDayData(board) {\r\n    var labels = []\r\n\r\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    const date = new Date()\r\n    const zonedDate = utcToZonedTime(date, timeZone)\r\n\r\n    for (var i = 0; i < 6; i++) {\r\n        labels[i] = format(zonedDate, 'LLL') + ' ' + (zonedDate.getDate() - i)\r\n    }\r\n\r\n    var boardTasks = []\r\n    board.lists.forEach(list => {\r\n        boardTasks = [...boardTasks, ...list.tasks]\r\n    })\r\n\r\n    const tasksPerDay = boardTasks.reduce((acc, task) => {\r\n        const zonedCreatedAt = utcToZonedTime(new Date(task.createdAt), timeZone)\r\n        const formattedTime = format(zonedCreatedAt, 'LLL') + ' ' + (zonedCreatedAt.getDate())\r\n        const currIdx = labels.indexOf(formattedTime)\r\n        if (currIdx !== -1) acc[currIdx] = acc[currIdx] ? acc[currIdx] + 1 : 1\r\n        return acc\r\n    }, [])\r\n\r\n    return {\r\n        labels,\r\n        datasets: [\r\n            {\r\n                label: 'Tasks',\r\n                data: tasksPerDay,\r\n                barPercentage: 0.8,\r\n                borderColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ],\r\n                borderWidth: 2,\r\n                backgroundColor: [\r\n                    '#FF638450',\r\n                    '#36A2EB50',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                    '#FFCE56',\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n}\r\n\r\nfunction getDashboardPrevsData(board) {\r\n\r\n    const currTime = Date.now()\r\n    const oneWeekMS = 6048000000\r\n\r\n    const boardActivity = board.activities,\r\n        totalActivity = boardActivity.length,\r\n        newActivity = boardActivity.filter(activity => {\r\n            return activity.createdAt >= currTime - oneWeekMS\r\n        }),\r\n        totalNewActivity = newActivity.length\r\n\r\n\r\n    const boardTasks = _getAllTasks(board),\r\n        totalTasks = boardTasks.length,\r\n        newTasks = boardTasks.filter(task => {\r\n            return task.createdAt >= currTime - oneWeekMS\r\n        }),\r\n        totalNewTasks = newTasks.length,\r\n\r\n        overDueTasks = boardTasks.filter(task => {\r\n            return task.dueDate > currTime\r\n        }),\r\n        totalOverDueTasks = overDueTasks.length,\r\n\r\n        newOverdueTasks = overDueTasks.filter(task => {\r\n            return task.createdAt >= currTime - oneWeekMS\r\n        }),\r\n        totalNewOverDueTasks = newOverdueTasks.length\r\n\r\n\r\n    return [\r\n\r\n        { title: 'Tasks', total: totalTasks, new: totalNewTasks,bgColor:'#56c991' },\r\n        { title: 'Activity', total: totalActivity, new: totalNewActivity, bgColor: '#9895e0' },\r\n        { title: 'Overdue', total: totalOverDueTasks, new: totalNewOverDueTasks,bgColor:'#3cc2e0' }\r\n    ]\r\n\r\n}\r\n\r\nfunction _getAllTasks(board) {\r\n    return board.lists.reduce((acc, list) => {\r\n        acc = [...acc, ...list.tasks]\r\n        return acc\r\n    }, [])\r\n}\r\n\r\nfunction _getZonedDate(timestamp = Date.now()) {\r\n    const timeZone = Intl.DateTimeFormat().resolvedOptions().timeZone;\r\n    const date = new Date(timestamp)\r\n    const zonedDate = utcToZonedTime(date, timeZone)\r\n    return zonedDate\r\n}","import { Component } from 'react';\r\nimport { Doughnut } from 'react-chartjs-2'\r\nimport { dashboardService } from '../../services/dashboardService'\r\n\r\nexport default class MyChart extends Component {\r\n    state = {\r\n        data: {\r\n            labels: [\r\n                'Adult Toys',\r\n                'Kid Toys',\r\n                'Yellow'\r\n            ],\r\n            datasets: [{\r\n                data: [300, 50, 100],\r\n                backgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56'\r\n                ],\r\n                hoverBackgroundColor: [\r\n                    '#FF6384',\r\n                    '#36A2EB',\r\n                    '#FFCE56'\r\n                ]\r\n            }]\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { board,className } = this.props,\r\n        { data } = dashboardService.getTasksPerPeopleData(board)\r\n        // const { data } = this.state\r\n        return (\r\n            <div className={`tasks-per-person ${className}`}>\r\n                <h3>Tasks per Person</h3>\r\n                <Doughnut data={data} height={400} width= {400} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import { Bar } from 'react-chartjs-2'\r\nimport { dashboardService } from '../../services/dashboardService'\r\n\r\nimport React, { Component } from 'react'\r\n\r\nexport default class ActivityPerDay extends Component {\r\n    state = {\r\n        data: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const { board } = this.props,\r\n        //     data = dashboardService.getActivityPerDayData(board)\r\n        // this.setState({ data }, () => {\r\n        //     console.log('Data: ', this.state.data);\r\n        // })\r\n    }\r\n\r\n    render() {\r\n        const { board,className } = this.props,\r\n            data = dashboardService.getActivityPerDayData(board)\r\n        // const { data } = this.state\r\n        if (!data) return <h1>Loading</h1>\r\n        return (\r\n            <div className={`activity-per-day ${className}`}>\r\n                <h3>Activity per Day</h3>\r\n                <Bar data={data} width={400} height={400} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2'\r\nimport { dashboardService } from '../../services/dashboardService'\r\n\r\n\r\nexport default class MyChart extends Component {\r\n    state = {\r\n        data: {}\r\n    }\r\n\r\n    componentDidMount() {\r\n        // const { board } = this.props,\r\n        //     data = dashboardService.getTasksPerDayData(board)\r\n        // this.setState({ data })\r\n    }\r\n\r\n    render() {\r\n        const { board,className } = this.props,\r\n        data = dashboardService.getTasksPerDayData(board)\r\n        // const { data } = this.state\r\n        return (\r\n            <div className={`tasks-per-person ${className}`}>\r\n                <h3>New Tasks per Day</h3>\r\n                <Line data={data} height={400} width={400} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport function DashboardDataPreview({ data }) {\r\n\r\n    return (\r\n        <article style={{ backgroundColor: data.bgColor }} className=\"dashboard-data-preview\">\r\n            <h3 className=\"data-title\">{data.title}</h3>\r\n            <h2 className=\"data-total\">Total: {data.total}</h2>\r\n            <span className=\"data-recent\">This Week: {data.new}</span>\r\n        </article>\r\n    )\r\n}\r\n","import React, { Component } from 'react'\r\nimport TasksPerPerson from './Charts/TasksPerPerson'\r\nimport ActivityPerDay from './Charts/ActivityPerDay'\r\nimport TasksPerDay from './Charts/TasksPerDay'\r\nimport { dashboardService } from '../services/dashboardService'\r\nimport { DashboardDatalist } from './DashboardDatalist'\r\nimport { DashboardDataPreview } from './DashboardDataPreview'\r\n\r\nexport class Dashboard extends Component {\r\n\r\n    state = {\r\n\r\n    }\r\n    componentDidMount() {\r\n        const { board } = this.props\r\n        dashboardService.getDashboardPrevsData(board)\r\n    }\r\n\r\n    handleClickOutside = ev => {\r\n        this.props.toggleDashboard(false)\r\n    }\r\n\r\n    render() {\r\n        const { board } = this.props\r\n        const prevsData = dashboardService.getDashboardPrevsData(board)\r\n        const Charts = [\r\n            { Chart: TasksPerPerson, props: { ...this.props, className: \"grid-chart\" } },\r\n            { Chart: ActivityPerDay, props: { ...this.props, className: \"grid-chart\" } },\r\n            { Chart: TasksPerDay, props: { ...this.props, className: \"grid-chart\" } },\r\n        ]\r\n\r\n        return (\r\n            <div className=\"dashboard  board-layout\">\r\n                {prevsData.map((data, idx) => {\r\n                    const { Chart, props } = Charts[idx]\r\n                    return (\r\n                        <section key={data.title} className=\"dashboard-grid-section\">\r\n                            <DashboardDataPreview data={data} />\r\n                            <Chart {...props} />\r\n                        </section>\r\n                    )\r\n                })}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Board } from '../cmps/Board'\r\nimport { setBoard, toggleOverlay, updateBoard } from '../store/actions/boardActions'\r\nimport { setCurrPopover } from '../store/actions/popoverActions'\r\nimport { BoardHeader } from '../cmps/BoardHeader'\r\nimport { TaskDetails } from '../cmps/TaskDetails'\r\nimport { socketService } from '../services/socketService'\r\nimport { Dashboard } from '../cmps/Dashboard'\r\nimport { LoadingSpinner } from '../cmps/LoadingSpinner.jsx'\r\n\r\n\r\nclass _TrelloApp extends Component {\r\n\r\n    state = {\r\n        isDashboardOpen: false,\r\n        isBoardClosed: false\r\n    }\r\n\r\n\r\n    componentDidMount = async () => {\r\n        const { boardId } = this.props.match.params\r\n        socketService.setup()\r\n        socketService.emit('member connected', { userId: '123', boardId })\r\n        socketService.on('board updated fs', this.onBoardUpdated)\r\n        await this.props.setBoard(boardId)\r\n    }\r\n\r\n    toggleDashboard = (boolean = !this.state.isDashboardOpen) => {\r\n        this.setState({ isDashboardOpen: boolean }, () => {\r\n            this.state.isBoardClosed ? this.setState({ isBoardClosed: false }) :\r\n                setTimeout(() => {\r\n                    this.setState({ isBoardClosed: true })\r\n                }, 1000)\r\n        })\r\n    }\r\n\r\n    async componentWillUnmount() {\r\n        socketService.off('board updated fs', this.onBoardUpdated)\r\n        socketService.terminate()\r\n        const { setBoard } = this.props\r\n        await setBoard(null)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        const { boardId } = this.props.match.params\r\n        if (prevProps.match.params.boardId !== boardId) {\r\n            this.props.setBoard(boardId)\r\n        }\r\n    }\r\n\r\n    onBoardUpdated = async ({ updatedBoard, activity }) => {\r\n        const board = { ...updatedBoard }\r\n        await this.props.updateBoard(board, null, false)\r\n    }\r\n\r\n    render() {\r\n        const { board, setCurrPopover } = this.props\r\n        const { isDashboardOpen, isBoardClosed } = this.state\r\n        if (!board) return <LoadingSpinner />\r\n        return (\r\n            <div onClick={() => {\r\n                setCurrPopover()\r\n                // if (isOverlayOpen) toggleOverlay()\r\n            }} style={{ paddingTop: '54px' }}>\r\n                <div className=\"main-bg\" style={{ backgroundImage: board.style.bg }} onClick={ev => { ev.stopPropagation() }}></div>\r\n                <div className={`bg-overlay `}>\r\n                    <BoardHeader {...this.props} className={isDashboardOpen && 'dashboard-mode'} isDashboardOpen={isDashboardOpen} onToggleDashboard={this.toggleDashboard} />\r\n                    {!isBoardClosed && <Board {...this.props} isDashboardOpen={isDashboardOpen} />}\r\n                    {this.props.match.params.listId && <TaskDetails />}\r\n                </div>\r\n                <div\r\n                    className={`dashboard-screen ${isDashboardOpen && 'slide-to-right'} ${!isDashboardOpen && 'hidden'}`}>\r\n                    <Dashboard board={board} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        board: state.boardReducer.currBoard,\r\n        isOverlayOpen: state.boardReducer.isOverlayOpen,\r\n        currPopover: state.popoverReducer.currPopover,\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setBoard,\r\n    updateBoard,\r\n    setCurrPopover,\r\n    toggleOverlay\r\n}\r\n\r\nexport const TrelloApp = connect(mapStateToProps, mapDispatchToProps)(_TrelloApp)","export const refreshTokenSetup = (res) => {\r\n    // Timing to renew access token\r\n    let refreshTiming = (res.tokenObj.expires_in || 3600 - 5 * 60) * 1000;\r\n  \r\n    const refreshToken = async () => {\r\n      const newAuthRes = await res.reloadAuthResponse();\r\n      refreshTiming = (newAuthRes.expires_in || 3600 - 5 * 60) * 1000;\r\n      console.log('newAuthRes:', newAuthRes);\r\n      // saveUserToken(newAuthRes.access_token);  <-- save new token\r\n      localStorage.setItem('authToken', newAuthRes.id_token);\r\n  \r\n      // Setup the other timer after the first one\r\n      setTimeout(refreshToken, refreshTiming);\r\n    };\r\n  \r\n    // Setup first refresh timer\r\n    setTimeout(refreshToken, refreshTiming);\r\n  };","import React, { Component, Fragment } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport { cloudinaryService } from '../services/cloudinaryService'\r\nimport { setUser, clearUser } from '../store/actions/userAction'\r\nimport AddAPhotoIcon from '@material-ui/icons/AddAPhoto';\r\nimport { GoogleLogin } from 'react-google-login';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nimport { refreshTokenSetup } from '../services/googleService';\r\n\r\nconst clientId = '996251564221-qedkti8vudlin8md60j8dllv408gqodo.apps.googleusercontent.com';\r\nconst absoluteURI = (process.env.NODE_ENV === 'production') ? 'http://herokupath' : 'http://localhost:3031'\r\n\r\nclass _LoginSignup extends Component {\r\n\r\n    state = {\r\n        signupCred: {\r\n            username: '',\r\n            fullname: '',\r\n            password: '',\r\n            imgUrl: ''\r\n        },\r\n        loginCred: {\r\n            username: '',\r\n            password: ''\r\n        },\r\n        googleCreds: {},\r\n        isNewUser: true,\r\n        msg: '',\r\n        isUploading: false,\r\n        isGoogle: false\r\n    }\r\n\r\n\r\n\r\n    // -------------------------------------------------GOOGLE----------------------------------------\r\n    onSuccessGoogleLogin = (res) => {\r\n        console.log(res.profileObj);\r\n        const user = res.profileObj\r\n        this.setState({\r\n            signupCred: {\r\n                username: user.email,\r\n                fullname: user.name,\r\n                password: user.googleId,\r\n                imgUrl: user.imageUrl\r\n            }, isGoogle: true\r\n        })\r\n        refreshTokenSetup(res);\r\n\r\n    };\r\n\r\n    onFailureGoogleLogin = (res) => {\r\n        console.log('Login failed: res:', res);\r\n\r\n    };\r\n    //-------------------------------------------------------------------------------------------------------------\r\n\r\n    onSubmit = async (ev) => {\r\n        ev.preventDefault()\r\n        ev.stopPropagation()\r\n        const { signupCred, loginCred, isNewUser, isGoogle } = this.state\r\n\r\n        var userCreds;\r\n        if (isNewUser) userCreds = signupCred\r\n        else userCreds = loginCred\r\n\r\n        if (!userCreds.password || !userCreds.username) {\r\n            this.setState({ msg: 'you need to fill all the feilds' })\r\n            return\r\n        }\r\n\r\n        try {\r\n            const { setUser } = this.props\r\n            await setUser(userCreds, isNewUser, isGoogle)\r\n            const { user } = this.props\r\n            if (!user) return\r\n            this.setState({ msg: '' })\r\n            if (this.props.user) this.props.history.push(`/board`)//then gos to the boards page\r\n            else this.props.history.push(`/login`)\r\n\r\n        } catch (err) {\r\n            console.log('inside the catchhhhhhhhhhhhhhhhhhhhhhhhhh')\r\n            console.log(err, 'inside catch');\r\n            this.setState({ msg: 'somthing went worng!' })\r\n            this.props.history.push(`/login`)\r\n        }\r\n\r\n    }\r\n\r\n    handleInput = ({ target }) => {\r\n        const value = target.value\r\n        const field = target.name\r\n        var typeOfForm = this.state.isNewUser ? 'signupCred' : 'loginCred'\r\n        this.setState(prevState => {\r\n            return {\r\n                [typeOfForm]: {\r\n                    ...prevState[typeOfForm],\r\n                    [field]: value\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    toggleForms = (ev) => {\r\n        ev.preventDefault()\r\n        this.setState(prevState => {\r\n            return {\r\n                isNewUser: !prevState.isNewUser,\r\n                msg: ''\r\n            }\r\n        })\r\n    }\r\n\r\n\r\n    onUploadImg = async ev => {\r\n        this.setState({ isUploading: true })\r\n        try {\r\n            const { secure_url } = await cloudinaryService.uploadImg(ev.target.files[0])\r\n            console.log('url:', secure_url);\r\n            this.setState({ signupCred: { ...this.state.signupCred, imgUrl: secure_url }, isUploading: false }\r\n                , console.log('imgUrl', this.state.signupCred))\r\n\r\n        } catch (err) {\r\n            this.setState({ msg: 'Couldnt upload your image try again' })\r\n            console.log('problem loading the img ', err);\r\n        }\r\n    }\r\n\r\n    onLogout = async () => {\r\n        await this.props.clearUser()\r\n        this.setState({\r\n            signupCred: {\r\n                username: '',\r\n                fullname: '',\r\n                password: '',\r\n                imgUrl: ''\r\n            },\r\n            loginCred: {\r\n                username: '',\r\n                password: ''\r\n            },\r\n            isNewUser: true,\r\n            msg: '',\r\n            isUploading: false,\r\n            isGoogle: false\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { signupCred, loginCred, isNewUser, isUploading, msg } = this.state\r\n        const { user } = this.props\r\n        return (\r\n\r\n            <Fragment>\r\n                <div className=\"login-bg-screen\" > </div>\r\n                <div className=\"login-container flex justify-center \">\r\n\r\n\r\n                    <div className={`login-signup-wrapper flex  ${isUploading && 'uploadStage'}`} >\r\n\r\n\r\n\r\n\r\n                        {user && <div className=\"glass-form \">\r\n                            <h2>Welcome {user.fullname}</h2>\r\n                            <div className=\"avatar\" style={{ backgroundImage: `url(${user.imgUrl})` }}> </div>\r\n                            <button className=\"primary-btn\"> <Link to=\"/board\"> Start Now </Link> </button>\r\n                            <a onClick={this.onLogout}> <GoogleLogout\r\n                                clientId={clientId}\r\n                                buttonText=\"Logout\"\r\n                                onLogoutSuccess={this.onLogout}\r\n                            ></GoogleLogout></a>\r\n\r\n\r\n\r\n                        </div>}\r\n\r\n\r\n                        {!user && isNewUser && <div>\r\n                            <form className={`glass-form`} onSubmit={this.onSubmit}>\r\n\r\n\r\n                                <h1>Sign Up</h1>\r\n                                <label> <div className=\"avatar flex justify-center align-center\" style={{\r\n                                    backgroundImage: ` url(${signupCred.imgUrl})`\r\n                                }}> <AddAPhotoIcon style={{ color: ' #dadbdb' }} className={signupCred.imgUrl && 'hidden'} />  </div>\r\n                                    <input onChange={this.onUploadImg} type=\"file\" hidden /></label>\r\n\r\n\r\n                                <GoogleLogin\r\n                                    className=\"with-btn\"\r\n                                    clientId={clientId}\r\n                                    clientSecret=\"dFOQhDq1oIii5Tv7Z1QxMDRV\"\r\n                                    proxy={true}\r\n                                    callbackURL={absoluteURI + \"/auth/google/callback\"}\r\n\r\n                                    buttonText=\"Login with Google\"\r\n                                    onSuccess={this.onSuccessGoogleLogin}\r\n                                    onFailure={this.onFailureGoogleLogin}\r\n                                    cookiePolicy={'single_host_origin'}\r\n\r\n                                    isSignedIn={user === true}\r\n                                />\r\n\r\n\r\n\r\n                                <input type=\"text\" value={signupCred.fullname} name=\"fullname\" placeholder=\"Name\" onChange={this.handleInput} />\r\n                                <input type=\"text\" value={signupCred.username} name=\"username\" placeholder=\"Username\" onChange={this.handleInput} />\r\n                                <input type=\"password\" className=\"password\" value={signupCred.password} name=\"password\" placeholder=\"Password\" onChange={this.handleInput} />\r\n\r\n\r\n                            </form>\r\n                            <span style={{ display: 'block' }}>{msg}</span>\r\n                            <button className=\"primary-btn\" onClick={this.onSubmit}><ArrowForwardIcon /></button>\r\n                            <p>Already have an account? <span onClick={this.toggleForms} >Sign In</span> </p>\r\n\r\n                        </div>\r\n                        }\r\n                        {!user && !isNewUser && <div>\r\n                            < form className={`glass-form  login`} onSubmit={this.onSubmit}>\r\n\r\n\r\n                                <h1 >Log In</h1>\r\n\r\n                                <input type=\"text\" name=\"username\" value={loginCred.username} placeholder=\"Username\" onChange={this.handleInput} />\r\n                                <input type=\"password\" name=\"password\" value={loginCred.password} placeholder=\"Password\" onChange={this.handleInput} />\r\n\r\n\r\n                                <span style={{ display: 'block' }}>{msg}</span>\r\n                            </form>\r\n                            <button type=\"submit\" className=\"primary-btn\" onClick={this.onSubmit}><ArrowForwardIcon /></button>\r\n                            <p>Dont have an account? <span onClick={this.toggleForms} >Sign Up</span> </p>\r\n\r\n                        </div>\r\n                        }\r\n                        <div className=\"SVG\" ></div>\r\n                    </div>\r\n\r\n\r\n                </div>\r\n            </Fragment >\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.userReducer.user\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    setUser,\r\n    clearUser\r\n}\r\n\r\nexport const LoginSignup = connect(mapStateToProps, mapDispatchToProps)(_LoginSignup)","import { HomePage } from \"./pages/HomePage.jsx\";\r\nimport { Boards } from \"./pages/Boards.jsx\";\r\nimport { TrelloApp } from \"./pages/TrelloApp.jsx\";\r\nimport { LoginSignup } from \"./pages/LoginSignup.jsx\";\r\n\r\nexport const routes = [\r\n  {\r\n    path: \"/\",\r\n    component: HomePage,\r\n  },\r\n  {\r\n    path: `/board/:boardId/:listId?/:taskId?`,\r\n    component: TrelloApp,\r\n  },\r\n  {\r\n    path: \"/board\",\r\n    component: Boards,\r\n  },\r\n  {\r\n    path: \"/login\",\r\n    component: LoginSignup,\r\n  },\r\n];\r\n","import React from 'react';\r\nimport { Switch, BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport { AppHeader } from './cmps/AppHeader.jsx'\r\nimport { routes } from './routes'\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <AppHeader />\r\n      <main className=\"App\">\r\n        <Switch>\r\n          {routes.map(route => <Route exact key={route.path} path={route.path} component={route.component} />)}\r\n        </Switch>\r\n      </main>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\r\nconst initialState = {\r\n    currBoard: null,\r\n    isTaskOpen: false,\r\n    currListIdx: null,\r\n    currTaskIdx: null,\r\n    isOverlayOpen: false,\r\n    isPopoverOpen: false\r\n}\r\n\r\nexport function boardReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_BOARD':\r\n            return { ...state, currBoard: action.board }\r\n        case 'TOGGLE_TASK':\r\n            return { ...state, isTaskOpen: !state.isTaskOpen }\r\n        case 'SET_CURR_LIST_AND_TASK':\r\n            return { ...state, currListIdx: action.listIdx, currTaskIdx: action.taskIdx }\r\n        case \"UPDATE_BOARD\":\r\n            return { ...state, currBoard: action.updatedBoard }\r\n        case \"TOGGLE_OVERLAY\":\r\n            return { ...state, isOverlayOpen: !state.isOverlayOpen }\r\n        case \"SET_POPOVER_STATUS\":\r\n            return { ...state, isPopoverOpen: action.isPopover }\r\n        default:\r\n            return state\r\n    }\r\n}","\r\nconst initialState = {\r\n    user: null\r\n}\r\n\r\n\r\nexport function userReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_USER':\r\n            return { ...state, user: action.loggedUser }\r\n        case 'CLEAR_USER':\r\n            return { ...state, user: null }\r\n        default:\r\n            console.log('state')\r\n            return state\r\n    }\r\n}\r\n","const initialState = {\r\n    currPopover: '',\r\n}\r\n\r\n//IMPORTANT TO REMEMBER TO ADD STOPPROPAGATION TO PREVENT CLOSING OF POPOVERS.\r\n\r\nexport function popoverReducer(state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'SET_CURR_POPOVER':\r\n            return { ...state, currPopover: action.popover }\r\n        default:\r\n            return state\r\n    }\r\n}","import thunk from 'redux-thunk';\r\nimport { createStore, applyMiddleware, compose, combineReducers } from 'redux'\r\n\r\nimport { boardReducer } from './reducers/boardReducer'\r\nimport { userReducer } from './reducers/userReducer'\r\nimport { popoverReducer } from './reducers/popoverReducer'\r\nconst rootReducer = combineReducers({\r\n    boardReducer,\r\n    userReducer,\r\n    popoverReducer\r\n});\r\n\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nexport const store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"./assets/styles/styles.scss\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./store/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.unregister();\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}